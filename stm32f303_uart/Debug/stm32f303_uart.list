
stm32f303_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035b4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800373c  0800373c  0001373c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003774  08003774  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003774  08003774  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003774  08003774  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003774  08003774  00013774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003778  08003778  00013778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800377c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          000028b0  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200028c0  200028c0  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000a58b  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001a90  00000000  00000000  0002a60e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000770  00000000  00000000  0002c0a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000005b1  00000000  00000000  0002c810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001cdd9  00000000  00000000  0002cdc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000adc7  00000000  00000000  00049b9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000acf38  00000000  00000000  00054961  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001d08  00000000  00000000  0010189c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  001035a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003724 	.word	0x08003724

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08003724 	.word	0x08003724

080001c8 <HAL_UART_TxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int isSent = 1;
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	isSent = 1;
 80001d0:	4b06      	ldr	r3, [pc, #24]	; (80001ec <HAL_UART_TxCpltCallback+0x24>)
 80001d2:	2201      	movs	r2, #1
 80001d4:	601a      	str	r2, [r3, #0]
	countinterrupt++;
 80001d6:	4b06      	ldr	r3, [pc, #24]	; (80001f0 <HAL_UART_TxCpltCallback+0x28>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	3301      	adds	r3, #1
 80001dc:	4a04      	ldr	r2, [pc, #16]	; (80001f0 <HAL_UART_TxCpltCallback+0x28>)
 80001de:	6013      	str	r3, [r2, #0]
}
 80001e0:	bf00      	nop
 80001e2:	370c      	adds	r7, #12
 80001e4:	46bd      	mov	sp, r7
 80001e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ea:	4770      	bx	lr
 80001ec:	20000000 	.word	0x20000000
 80001f0:	200028b4 	.word	0x200028b4

080001f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001fa:	f000 f9f7 	bl	80005ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001fe:	f000 f83b 	bl	8000278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000202:	f000 f8c3 	bl	800038c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000206:	f000 f891 	bl	800032c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
//  HAL_UART_Receive(&huart2, buffer, 1, 0xFFFF);
//  HAL_UART_Transmit(&huart2, buffer, 1, 0xFFFF);
  for (uint32_t i=0; i<10240; i++)
 800020a:	2300      	movs	r3, #0
 800020c:	607b      	str	r3, [r7, #4]
 800020e:	e009      	b.n	8000224 <main+0x30>
  {
  	  TxData[i] = i&(0xff);
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	b2d9      	uxtb	r1, r3
 8000214:	4a13      	ldr	r2, [pc, #76]	; (8000264 <main+0x70>)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	4413      	add	r3, r2
 800021a:	460a      	mov	r2, r1
 800021c:	701a      	strb	r2, [r3, #0]
  for (uint32_t i=0; i<10240; i++)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	3301      	adds	r3, #1
 8000222:	607b      	str	r3, [r7, #4]
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800022a:	d3f1      	bcc.n	8000210 <main+0x1c>
//	HAL_UART_Transmit(&huart2, TxData, 10240, HAL_MAX_DELAY);
//
//	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8);
//	HAL_Delay(500);

	  if (isSent == 1)
 800022c:	4b0e      	ldr	r3, [pc, #56]	; (8000268 <main+0x74>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	2b01      	cmp	r3, #1
 8000232:	d108      	bne.n	8000246 <main+0x52>
	    {
		  HAL_UART_Transmit_IT(&huart2, TxData, 10240);
 8000234:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8000238:	490a      	ldr	r1, [pc, #40]	; (8000264 <main+0x70>)
 800023a:	480c      	ldr	r0, [pc, #48]	; (800026c <main+0x78>)
 800023c:	f002 f9f6 	bl	800262c <HAL_UART_Transmit_IT>
		  isSent = 0;
 8000240:	4b09      	ldr	r3, [pc, #36]	; (8000268 <main+0x74>)
 8000242:	2200      	movs	r2, #0
 8000244:	601a      	str	r2, [r3, #0]
	    }
	    HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8);
 8000246:	f44f 7180 	mov.w	r1, #256	; 0x100
 800024a:	4809      	ldr	r0, [pc, #36]	; (8000270 <main+0x7c>)
 800024c:	f000 fd78 	bl	8000d40 <HAL_GPIO_TogglePin>
	    HAL_Delay(500);
 8000250:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000254:	f000 fa30 	bl	80006b8 <HAL_Delay>
	    countloop++;
 8000258:	4b06      	ldr	r3, [pc, #24]	; (8000274 <main+0x80>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	3301      	adds	r3, #1
 800025e:	4a05      	ldr	r2, [pc, #20]	; (8000274 <main+0x80>)
 8000260:	6013      	str	r3, [r2, #0]
	  if (isSent == 1)
 8000262:	e7e3      	b.n	800022c <main+0x38>
 8000264:	200000b4 	.word	0x200000b4
 8000268:	20000000 	.word	0x20000000
 800026c:	2000002c 	.word	0x2000002c
 8000270:	48001000 	.word	0x48001000
 8000274:	200028b8 	.word	0x200028b8

08000278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b09e      	sub	sp, #120	; 0x78
 800027c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000282:	2228      	movs	r2, #40	; 0x28
 8000284:	2100      	movs	r1, #0
 8000286:	4618      	mov	r0, r3
 8000288:	f003 fa1f 	bl	80036ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800028c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000290:	2200      	movs	r2, #0
 8000292:	601a      	str	r2, [r3, #0]
 8000294:	605a      	str	r2, [r3, #4]
 8000296:	609a      	str	r2, [r3, #8]
 8000298:	60da      	str	r2, [r3, #12]
 800029a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800029c:	463b      	mov	r3, r7
 800029e:	223c      	movs	r2, #60	; 0x3c
 80002a0:	2100      	movs	r1, #0
 80002a2:	4618      	mov	r0, r3
 80002a4:	f003 fa11 	bl	80036ca <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002a8:	2301      	movs	r3, #1
 80002aa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002b0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002b2:	2300      	movs	r3, #0
 80002b4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b6:	2301      	movs	r3, #1
 80002b8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ba:	2302      	movs	r3, #2
 80002bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002c2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002c4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002c8:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80002ce:	4618      	mov	r0, r3
 80002d0:	f000 fd50 	bl	8000d74 <HAL_RCC_OscConfig>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002da:	f000 f8a3 	bl	8000424 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002de:	230f      	movs	r3, #15
 80002e0:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002e2:	2302      	movs	r3, #2
 80002e4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e6:	2300      	movs	r3, #0
 80002e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f0:	2300      	movs	r3, #0
 80002f2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002f4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002f8:	2102      	movs	r1, #2
 80002fa:	4618      	mov	r0, r3
 80002fc:	f001 fd78 	bl	8001df0 <HAL_RCC_ClockConfig>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000306:	f000 f88d 	bl	8000424 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800030a:	2302      	movs	r3, #2
 800030c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800030e:	2300      	movs	r3, #0
 8000310:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000312:	463b      	mov	r3, r7
 8000314:	4618      	mov	r0, r3
 8000316:	f001 ff8b 	bl	8002230 <HAL_RCCEx_PeriphCLKConfig>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000320:	f000 f880 	bl	8000424 <Error_Handler>
  }
}
 8000324:	bf00      	nop
 8000326:	3778      	adds	r7, #120	; 0x78
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}

0800032c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000330:	4b14      	ldr	r3, [pc, #80]	; (8000384 <MX_USART2_UART_Init+0x58>)
 8000332:	4a15      	ldr	r2, [pc, #84]	; (8000388 <MX_USART2_UART_Init+0x5c>)
 8000334:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000336:	4b13      	ldr	r3, [pc, #76]	; (8000384 <MX_USART2_UART_Init+0x58>)
 8000338:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800033c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800033e:	4b11      	ldr	r3, [pc, #68]	; (8000384 <MX_USART2_UART_Init+0x58>)
 8000340:	2200      	movs	r2, #0
 8000342:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000344:	4b0f      	ldr	r3, [pc, #60]	; (8000384 <MX_USART2_UART_Init+0x58>)
 8000346:	2200      	movs	r2, #0
 8000348:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800034a:	4b0e      	ldr	r3, [pc, #56]	; (8000384 <MX_USART2_UART_Init+0x58>)
 800034c:	2200      	movs	r2, #0
 800034e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000350:	4b0c      	ldr	r3, [pc, #48]	; (8000384 <MX_USART2_UART_Init+0x58>)
 8000352:	220c      	movs	r2, #12
 8000354:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000356:	4b0b      	ldr	r3, [pc, #44]	; (8000384 <MX_USART2_UART_Init+0x58>)
 8000358:	2200      	movs	r2, #0
 800035a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800035c:	4b09      	ldr	r3, [pc, #36]	; (8000384 <MX_USART2_UART_Init+0x58>)
 800035e:	2200      	movs	r2, #0
 8000360:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000362:	4b08      	ldr	r3, [pc, #32]	; (8000384 <MX_USART2_UART_Init+0x58>)
 8000364:	2200      	movs	r2, #0
 8000366:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000368:	4b06      	ldr	r3, [pc, #24]	; (8000384 <MX_USART2_UART_Init+0x58>)
 800036a:	2200      	movs	r2, #0
 800036c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800036e:	4805      	ldr	r0, [pc, #20]	; (8000384 <MX_USART2_UART_Init+0x58>)
 8000370:	f002 f90e 	bl	8002590 <HAL_UART_Init>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800037a:	f000 f853 	bl	8000424 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800037e:	bf00      	nop
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	2000002c 	.word	0x2000002c
 8000388:	40004400 	.word	0x40004400

0800038c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b088      	sub	sp, #32
 8000390:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000392:	f107 030c 	add.w	r3, r7, #12
 8000396:	2200      	movs	r2, #0
 8000398:	601a      	str	r2, [r3, #0]
 800039a:	605a      	str	r2, [r3, #4]
 800039c:	609a      	str	r2, [r3, #8]
 800039e:	60da      	str	r2, [r3, #12]
 80003a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003a2:	4b1e      	ldr	r3, [pc, #120]	; (800041c <MX_GPIO_Init+0x90>)
 80003a4:	695b      	ldr	r3, [r3, #20]
 80003a6:	4a1d      	ldr	r2, [pc, #116]	; (800041c <MX_GPIO_Init+0x90>)
 80003a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80003ac:	6153      	str	r3, [r2, #20]
 80003ae:	4b1b      	ldr	r3, [pc, #108]	; (800041c <MX_GPIO_Init+0x90>)
 80003b0:	695b      	ldr	r3, [r3, #20]
 80003b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80003b6:	60bb      	str	r3, [r7, #8]
 80003b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ba:	4b18      	ldr	r3, [pc, #96]	; (800041c <MX_GPIO_Init+0x90>)
 80003bc:	695b      	ldr	r3, [r3, #20]
 80003be:	4a17      	ldr	r2, [pc, #92]	; (800041c <MX_GPIO_Init+0x90>)
 80003c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003c4:	6153      	str	r3, [r2, #20]
 80003c6:	4b15      	ldr	r3, [pc, #84]	; (800041c <MX_GPIO_Init+0x90>)
 80003c8:	695b      	ldr	r3, [r3, #20]
 80003ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003ce:	607b      	str	r3, [r7, #4]
 80003d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80003d2:	4b12      	ldr	r3, [pc, #72]	; (800041c <MX_GPIO_Init+0x90>)
 80003d4:	695b      	ldr	r3, [r3, #20]
 80003d6:	4a11      	ldr	r2, [pc, #68]	; (800041c <MX_GPIO_Init+0x90>)
 80003d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80003dc:	6153      	str	r3, [r2, #20]
 80003de:	4b0f      	ldr	r3, [pc, #60]	; (800041c <MX_GPIO_Init+0x90>)
 80003e0:	695b      	ldr	r3, [r3, #20]
 80003e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80003e6:	603b      	str	r3, [r7, #0]
 80003e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 80003ea:	2200      	movs	r2, #0
 80003ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003f0:	480b      	ldr	r0, [pc, #44]	; (8000420 <MX_GPIO_Init+0x94>)
 80003f2:	f000 fc8d 	bl	8000d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80003f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003fc:	2301      	movs	r3, #1
 80003fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000400:	2300      	movs	r3, #0
 8000402:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000404:	2300      	movs	r3, #0
 8000406:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000408:	f107 030c 	add.w	r3, r7, #12
 800040c:	4619      	mov	r1, r3
 800040e:	4804      	ldr	r0, [pc, #16]	; (8000420 <MX_GPIO_Init+0x94>)
 8000410:	f000 fb04 	bl	8000a1c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000414:	bf00      	nop
 8000416:	3720      	adds	r7, #32
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	40021000 	.word	0x40021000
 8000420:	48001000 	.word	0x48001000

08000424 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000428:	b672      	cpsid	i
}
 800042a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800042c:	e7fe      	b.n	800042c <Error_Handler+0x8>
	...

08000430 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000430:	b480      	push	{r7}
 8000432:	b083      	sub	sp, #12
 8000434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000436:	4b0f      	ldr	r3, [pc, #60]	; (8000474 <HAL_MspInit+0x44>)
 8000438:	699b      	ldr	r3, [r3, #24]
 800043a:	4a0e      	ldr	r2, [pc, #56]	; (8000474 <HAL_MspInit+0x44>)
 800043c:	f043 0301 	orr.w	r3, r3, #1
 8000440:	6193      	str	r3, [r2, #24]
 8000442:	4b0c      	ldr	r3, [pc, #48]	; (8000474 <HAL_MspInit+0x44>)
 8000444:	699b      	ldr	r3, [r3, #24]
 8000446:	f003 0301 	and.w	r3, r3, #1
 800044a:	607b      	str	r3, [r7, #4]
 800044c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800044e:	4b09      	ldr	r3, [pc, #36]	; (8000474 <HAL_MspInit+0x44>)
 8000450:	69db      	ldr	r3, [r3, #28]
 8000452:	4a08      	ldr	r2, [pc, #32]	; (8000474 <HAL_MspInit+0x44>)
 8000454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000458:	61d3      	str	r3, [r2, #28]
 800045a:	4b06      	ldr	r3, [pc, #24]	; (8000474 <HAL_MspInit+0x44>)
 800045c:	69db      	ldr	r3, [r3, #28]
 800045e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000462:	603b      	str	r3, [r7, #0]
 8000464:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000466:	bf00      	nop
 8000468:	370c      	adds	r7, #12
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop
 8000474:	40021000 	.word	0x40021000

08000478 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b08a      	sub	sp, #40	; 0x28
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000480:	f107 0314 	add.w	r3, r7, #20
 8000484:	2200      	movs	r2, #0
 8000486:	601a      	str	r2, [r3, #0]
 8000488:	605a      	str	r2, [r3, #4]
 800048a:	609a      	str	r2, [r3, #8]
 800048c:	60da      	str	r2, [r3, #12]
 800048e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4a1b      	ldr	r2, [pc, #108]	; (8000504 <HAL_UART_MspInit+0x8c>)
 8000496:	4293      	cmp	r3, r2
 8000498:	d130      	bne.n	80004fc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800049a:	4b1b      	ldr	r3, [pc, #108]	; (8000508 <HAL_UART_MspInit+0x90>)
 800049c:	69db      	ldr	r3, [r3, #28]
 800049e:	4a1a      	ldr	r2, [pc, #104]	; (8000508 <HAL_UART_MspInit+0x90>)
 80004a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004a4:	61d3      	str	r3, [r2, #28]
 80004a6:	4b18      	ldr	r3, [pc, #96]	; (8000508 <HAL_UART_MspInit+0x90>)
 80004a8:	69db      	ldr	r3, [r3, #28]
 80004aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004ae:	613b      	str	r3, [r7, #16]
 80004b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b2:	4b15      	ldr	r3, [pc, #84]	; (8000508 <HAL_UART_MspInit+0x90>)
 80004b4:	695b      	ldr	r3, [r3, #20]
 80004b6:	4a14      	ldr	r2, [pc, #80]	; (8000508 <HAL_UART_MspInit+0x90>)
 80004b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004bc:	6153      	str	r3, [r2, #20]
 80004be:	4b12      	ldr	r3, [pc, #72]	; (8000508 <HAL_UART_MspInit+0x90>)
 80004c0:	695b      	ldr	r3, [r3, #20]
 80004c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004c6:	60fb      	str	r3, [r7, #12]
 80004c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80004ca:	230c      	movs	r3, #12
 80004cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004ce:	2302      	movs	r3, #2
 80004d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d2:	2300      	movs	r3, #0
 80004d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004d6:	2303      	movs	r3, #3
 80004d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80004da:	2307      	movs	r3, #7
 80004dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004de:	f107 0314 	add.w	r3, r7, #20
 80004e2:	4619      	mov	r1, r3
 80004e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004e8:	f000 fa98 	bl	8000a1c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80004ec:	2200      	movs	r2, #0
 80004ee:	2100      	movs	r1, #0
 80004f0:	2026      	movs	r0, #38	; 0x26
 80004f2:	f000 f9e0 	bl	80008b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80004f6:	2026      	movs	r0, #38	; 0x26
 80004f8:	f000 f9f9 	bl	80008ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80004fc:	bf00      	nop
 80004fe:	3728      	adds	r7, #40	; 0x28
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	40004400 	.word	0x40004400
 8000508:	40021000 	.word	0x40021000

0800050c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000510:	e7fe      	b.n	8000510 <NMI_Handler+0x4>

08000512 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000512:	b480      	push	{r7}
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000516:	e7fe      	b.n	8000516 <HardFault_Handler+0x4>

08000518 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800051c:	e7fe      	b.n	800051c <MemManage_Handler+0x4>

0800051e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800051e:	b480      	push	{r7}
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000522:	e7fe      	b.n	8000522 <BusFault_Handler+0x4>

08000524 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000528:	e7fe      	b.n	8000528 <UsageFault_Handler+0x4>

0800052a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800052a:	b480      	push	{r7}
 800052c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800052e:	bf00      	nop
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr

08000538 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800053c:	bf00      	nop
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr

08000546 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000546:	b480      	push	{r7}
 8000548:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800054a:	bf00      	nop
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr

08000554 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000558:	f000 f88e 	bl	8000678 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800055c:	bf00      	nop
 800055e:	bd80      	pop	{r7, pc}

08000560 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000564:	4802      	ldr	r0, [pc, #8]	; (8000570 <USART2_IRQHandler+0x10>)
 8000566:	f002 f8bf 	bl	80026e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800056a:	bf00      	nop
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	2000002c 	.word	0x2000002c

08000574 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000578:	4b06      	ldr	r3, [pc, #24]	; (8000594 <SystemInit+0x20>)
 800057a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800057e:	4a05      	ldr	r2, [pc, #20]	; (8000594 <SystemInit+0x20>)
 8000580:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000584:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000588:	bf00      	nop
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	e000ed00 	.word	0xe000ed00

08000598 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000598:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005d0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800059c:	f7ff ffea 	bl	8000574 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005a0:	480c      	ldr	r0, [pc, #48]	; (80005d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80005a2:	490d      	ldr	r1, [pc, #52]	; (80005d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005a4:	4a0d      	ldr	r2, [pc, #52]	; (80005dc <LoopForever+0xe>)
  movs r3, #0
 80005a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005a8:	e002      	b.n	80005b0 <LoopCopyDataInit>

080005aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ae:	3304      	adds	r3, #4

080005b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005b4:	d3f9      	bcc.n	80005aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005b6:	4a0a      	ldr	r2, [pc, #40]	; (80005e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005b8:	4c0a      	ldr	r4, [pc, #40]	; (80005e4 <LoopForever+0x16>)
  movs r3, #0
 80005ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005bc:	e001      	b.n	80005c2 <LoopFillZerobss>

080005be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005c0:	3204      	adds	r2, #4

080005c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005c4:	d3fb      	bcc.n	80005be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005c6:	f003 f889 	bl	80036dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005ca:	f7ff fe13 	bl	80001f4 <main>

080005ce <LoopForever>:

LoopForever:
    b LoopForever
 80005ce:	e7fe      	b.n	80005ce <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005d0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80005d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005d8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80005dc:	0800377c 	.word	0x0800377c
  ldr r2, =_sbss
 80005e0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80005e4:	200028c0 	.word	0x200028c0

080005e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005e8:	e7fe      	b.n	80005e8 <ADC1_2_IRQHandler>
	...

080005ec <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005f0:	4b08      	ldr	r3, [pc, #32]	; (8000614 <HAL_Init+0x28>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a07      	ldr	r2, [pc, #28]	; (8000614 <HAL_Init+0x28>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005fc:	2003      	movs	r0, #3
 80005fe:	f000 f94f 	bl	80008a0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000602:	200f      	movs	r0, #15
 8000604:	f000 f808 	bl	8000618 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000608:	f7ff ff12 	bl	8000430 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800060c:	2300      	movs	r3, #0
}
 800060e:	4618      	mov	r0, r3
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40022000 	.word	0x40022000

08000618 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000620:	4b12      	ldr	r3, [pc, #72]	; (800066c <HAL_InitTick+0x54>)
 8000622:	681a      	ldr	r2, [r3, #0]
 8000624:	4b12      	ldr	r3, [pc, #72]	; (8000670 <HAL_InitTick+0x58>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	4619      	mov	r1, r3
 800062a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800062e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000632:	fbb2 f3f3 	udiv	r3, r2, r3
 8000636:	4618      	mov	r0, r3
 8000638:	f000 f967 	bl	800090a <HAL_SYSTICK_Config>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000642:	2301      	movs	r3, #1
 8000644:	e00e      	b.n	8000664 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	2b0f      	cmp	r3, #15
 800064a:	d80a      	bhi.n	8000662 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800064c:	2200      	movs	r2, #0
 800064e:	6879      	ldr	r1, [r7, #4]
 8000650:	f04f 30ff 	mov.w	r0, #4294967295
 8000654:	f000 f92f 	bl	80008b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000658:	4a06      	ldr	r2, [pc, #24]	; (8000674 <HAL_InitTick+0x5c>)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800065e:	2300      	movs	r3, #0
 8000660:	e000      	b.n	8000664 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000662:	2301      	movs	r3, #1
}
 8000664:	4618      	mov	r0, r3
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000004 	.word	0x20000004
 8000670:	2000000c 	.word	0x2000000c
 8000674:	20000008 	.word	0x20000008

08000678 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <HAL_IncTick+0x20>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	461a      	mov	r2, r3
 8000682:	4b06      	ldr	r3, [pc, #24]	; (800069c <HAL_IncTick+0x24>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4413      	add	r3, r2
 8000688:	4a04      	ldr	r2, [pc, #16]	; (800069c <HAL_IncTick+0x24>)
 800068a:	6013      	str	r3, [r2, #0]
}
 800068c:	bf00      	nop
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	2000000c 	.word	0x2000000c
 800069c:	200028bc 	.word	0x200028bc

080006a0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  return uwTick;  
 80006a4:	4b03      	ldr	r3, [pc, #12]	; (80006b4 <HAL_GetTick+0x14>)
 80006a6:	681b      	ldr	r3, [r3, #0]
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	200028bc 	.word	0x200028bc

080006b8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006c0:	f7ff ffee 	bl	80006a0 <HAL_GetTick>
 80006c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006d0:	d005      	beq.n	80006de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006d2:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <HAL_Delay+0x44>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	461a      	mov	r2, r3
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	4413      	add	r3, r2
 80006dc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80006de:	bf00      	nop
 80006e0:	f7ff ffde 	bl	80006a0 <HAL_GetTick>
 80006e4:	4602      	mov	r2, r0
 80006e6:	68bb      	ldr	r3, [r7, #8]
 80006e8:	1ad3      	subs	r3, r2, r3
 80006ea:	68fa      	ldr	r2, [r7, #12]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d8f7      	bhi.n	80006e0 <HAL_Delay+0x28>
  {
  }
}
 80006f0:	bf00      	nop
 80006f2:	bf00      	nop
 80006f4:	3710      	adds	r7, #16
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	2000000c 	.word	0x2000000c

08000700 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000700:	b480      	push	{r7}
 8000702:	b085      	sub	sp, #20
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	f003 0307 	and.w	r3, r3, #7
 800070e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000710:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <__NVIC_SetPriorityGrouping+0x44>)
 8000712:	68db      	ldr	r3, [r3, #12]
 8000714:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000716:	68ba      	ldr	r2, [r7, #8]
 8000718:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800071c:	4013      	ands	r3, r2
 800071e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000728:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800072c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000730:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000732:	4a04      	ldr	r2, [pc, #16]	; (8000744 <__NVIC_SetPriorityGrouping+0x44>)
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	60d3      	str	r3, [r2, #12]
}
 8000738:	bf00      	nop
 800073a:	3714      	adds	r7, #20
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr
 8000744:	e000ed00 	.word	0xe000ed00

08000748 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800074c:	4b04      	ldr	r3, [pc, #16]	; (8000760 <__NVIC_GetPriorityGrouping+0x18>)
 800074e:	68db      	ldr	r3, [r3, #12]
 8000750:	0a1b      	lsrs	r3, r3, #8
 8000752:	f003 0307 	and.w	r3, r3, #7
}
 8000756:	4618      	mov	r0, r3
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr
 8000760:	e000ed00 	.word	0xe000ed00

08000764 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800076e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000772:	2b00      	cmp	r3, #0
 8000774:	db0b      	blt.n	800078e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	f003 021f 	and.w	r2, r3, #31
 800077c:	4907      	ldr	r1, [pc, #28]	; (800079c <__NVIC_EnableIRQ+0x38>)
 800077e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000782:	095b      	lsrs	r3, r3, #5
 8000784:	2001      	movs	r0, #1
 8000786:	fa00 f202 	lsl.w	r2, r0, r2
 800078a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800078e:	bf00      	nop
 8000790:	370c      	adds	r7, #12
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	e000e100 	.word	0xe000e100

080007a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	6039      	str	r1, [r7, #0]
 80007aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	db0a      	blt.n	80007ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	b2da      	uxtb	r2, r3
 80007b8:	490c      	ldr	r1, [pc, #48]	; (80007ec <__NVIC_SetPriority+0x4c>)
 80007ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007be:	0112      	lsls	r2, r2, #4
 80007c0:	b2d2      	uxtb	r2, r2
 80007c2:	440b      	add	r3, r1
 80007c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007c8:	e00a      	b.n	80007e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	b2da      	uxtb	r2, r3
 80007ce:	4908      	ldr	r1, [pc, #32]	; (80007f0 <__NVIC_SetPriority+0x50>)
 80007d0:	79fb      	ldrb	r3, [r7, #7]
 80007d2:	f003 030f 	and.w	r3, r3, #15
 80007d6:	3b04      	subs	r3, #4
 80007d8:	0112      	lsls	r2, r2, #4
 80007da:	b2d2      	uxtb	r2, r2
 80007dc:	440b      	add	r3, r1
 80007de:	761a      	strb	r2, [r3, #24]
}
 80007e0:	bf00      	nop
 80007e2:	370c      	adds	r7, #12
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr
 80007ec:	e000e100 	.word	0xe000e100
 80007f0:	e000ed00 	.word	0xe000ed00

080007f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b089      	sub	sp, #36	; 0x24
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	60f8      	str	r0, [r7, #12]
 80007fc:	60b9      	str	r1, [r7, #8]
 80007fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	f003 0307 	and.w	r3, r3, #7
 8000806:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000808:	69fb      	ldr	r3, [r7, #28]
 800080a:	f1c3 0307 	rsb	r3, r3, #7
 800080e:	2b04      	cmp	r3, #4
 8000810:	bf28      	it	cs
 8000812:	2304      	movcs	r3, #4
 8000814:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000816:	69fb      	ldr	r3, [r7, #28]
 8000818:	3304      	adds	r3, #4
 800081a:	2b06      	cmp	r3, #6
 800081c:	d902      	bls.n	8000824 <NVIC_EncodePriority+0x30>
 800081e:	69fb      	ldr	r3, [r7, #28]
 8000820:	3b03      	subs	r3, #3
 8000822:	e000      	b.n	8000826 <NVIC_EncodePriority+0x32>
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000828:	f04f 32ff 	mov.w	r2, #4294967295
 800082c:	69bb      	ldr	r3, [r7, #24]
 800082e:	fa02 f303 	lsl.w	r3, r2, r3
 8000832:	43da      	mvns	r2, r3
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	401a      	ands	r2, r3
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800083c:	f04f 31ff 	mov.w	r1, #4294967295
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	fa01 f303 	lsl.w	r3, r1, r3
 8000846:	43d9      	mvns	r1, r3
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800084c:	4313      	orrs	r3, r2
         );
}
 800084e:	4618      	mov	r0, r3
 8000850:	3724      	adds	r7, #36	; 0x24
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
	...

0800085c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	3b01      	subs	r3, #1
 8000868:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800086c:	d301      	bcc.n	8000872 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800086e:	2301      	movs	r3, #1
 8000870:	e00f      	b.n	8000892 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000872:	4a0a      	ldr	r2, [pc, #40]	; (800089c <SysTick_Config+0x40>)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	3b01      	subs	r3, #1
 8000878:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800087a:	210f      	movs	r1, #15
 800087c:	f04f 30ff 	mov.w	r0, #4294967295
 8000880:	f7ff ff8e 	bl	80007a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000884:	4b05      	ldr	r3, [pc, #20]	; (800089c <SysTick_Config+0x40>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800088a:	4b04      	ldr	r3, [pc, #16]	; (800089c <SysTick_Config+0x40>)
 800088c:	2207      	movs	r2, #7
 800088e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000890:	2300      	movs	r3, #0
}
 8000892:	4618      	mov	r0, r3
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	e000e010 	.word	0xe000e010

080008a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	f7ff ff29 	bl	8000700 <__NVIC_SetPriorityGrouping>
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b086      	sub	sp, #24
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	4603      	mov	r3, r0
 80008be:	60b9      	str	r1, [r7, #8]
 80008c0:	607a      	str	r2, [r7, #4]
 80008c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008c8:	f7ff ff3e 	bl	8000748 <__NVIC_GetPriorityGrouping>
 80008cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008ce:	687a      	ldr	r2, [r7, #4]
 80008d0:	68b9      	ldr	r1, [r7, #8]
 80008d2:	6978      	ldr	r0, [r7, #20]
 80008d4:	f7ff ff8e 	bl	80007f4 <NVIC_EncodePriority>
 80008d8:	4602      	mov	r2, r0
 80008da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008de:	4611      	mov	r1, r2
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff ff5d 	bl	80007a0 <__NVIC_SetPriority>
}
 80008e6:	bf00      	nop
 80008e8:	3718      	adds	r7, #24
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}

080008ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008ee:	b580      	push	{r7, lr}
 80008f0:	b082      	sub	sp, #8
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	4603      	mov	r3, r0
 80008f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff ff31 	bl	8000764 <__NVIC_EnableIRQ>
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}

0800090a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800090a:	b580      	push	{r7, lr}
 800090c:	b082      	sub	sp, #8
 800090e:	af00      	add	r7, sp, #0
 8000910:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000912:	6878      	ldr	r0, [r7, #4]
 8000914:	f7ff ffa2 	bl	800085c <SysTick_Config>
 8000918:	4603      	mov	r3, r0
}
 800091a:	4618      	mov	r0, r3
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000922:	b480      	push	{r7}
 8000924:	b083      	sub	sp, #12
 8000926:	af00      	add	r7, sp, #0
 8000928:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d101      	bne.n	8000934 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000930:	2301      	movs	r3, #1
 8000932:	e02e      	b.n	8000992 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800093a:	2b02      	cmp	r3, #2
 800093c:	d008      	beq.n	8000950 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	2204      	movs	r2, #4
 8000942:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2200      	movs	r2, #0
 8000948:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800094c:	2301      	movs	r3, #1
 800094e:	e020      	b.n	8000992 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	681a      	ldr	r2, [r3, #0]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	f022 020e 	bic.w	r2, r2, #14
 800095e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f022 0201 	bic.w	r2, r2, #1
 800096e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000978:	2101      	movs	r1, #1
 800097a:	fa01 f202 	lsl.w	r2, r1, r2
 800097e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2201      	movs	r2, #1
 8000984:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	2200      	movs	r2, #0
 800098c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000990:	2300      	movs	r3, #0
}
 8000992:	4618      	mov	r0, r3
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr

0800099e <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	b084      	sub	sp, #16
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009a6:	2300      	movs	r3, #0
 80009a8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80009b0:	2b02      	cmp	r3, #2
 80009b2:	d005      	beq.n	80009c0 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2204      	movs	r2, #4
 80009b8:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 80009ba:	2301      	movs	r3, #1
 80009bc:	73fb      	strb	r3, [r7, #15]
 80009be:	e027      	b.n	8000a10 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f022 020e 	bic.w	r2, r2, #14
 80009ce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f022 0201 	bic.w	r2, r2, #1
 80009de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009e8:	2101      	movs	r1, #1
 80009ea:	fa01 f202 	lsl.w	r2, r1, r2
 80009ee:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2201      	movs	r2, #1
 80009f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2200      	movs	r2, #0
 80009fc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d003      	beq.n	8000a10 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a0c:	6878      	ldr	r0, [r7, #4]
 8000a0e:	4798      	blx	r3
    }
  }
  return status;
 8000a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3710      	adds	r7, #16
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
	...

08000a1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b087      	sub	sp, #28
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a26:	2300      	movs	r3, #0
 8000a28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a2a:	e154      	b.n	8000cd6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	2101      	movs	r1, #1
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	fa01 f303 	lsl.w	r3, r1, r3
 8000a38:	4013      	ands	r3, r2
 8000a3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	f000 8146 	beq.w	8000cd0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	f003 0303 	and.w	r3, r3, #3
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d005      	beq.n	8000a5c <HAL_GPIO_Init+0x40>
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	f003 0303 	and.w	r3, r3, #3
 8000a58:	2b02      	cmp	r3, #2
 8000a5a:	d130      	bne.n	8000abe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	689b      	ldr	r3, [r3, #8]
 8000a60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	005b      	lsls	r3, r3, #1
 8000a66:	2203      	movs	r2, #3
 8000a68:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6c:	43db      	mvns	r3, r3
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	4013      	ands	r3, r2
 8000a72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	68da      	ldr	r2, [r3, #12]
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	005b      	lsls	r3, r3, #1
 8000a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a80:	693a      	ldr	r2, [r7, #16]
 8000a82:	4313      	orrs	r3, r2
 8000a84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	693a      	ldr	r2, [r7, #16]
 8000a8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a92:	2201      	movs	r2, #1
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9a:	43db      	mvns	r3, r3
 8000a9c:	693a      	ldr	r2, [r7, #16]
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	091b      	lsrs	r3, r3, #4
 8000aa8:	f003 0201 	and.w	r2, r3, #1
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab2:	693a      	ldr	r2, [r7, #16]
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	f003 0303 	and.w	r3, r3, #3
 8000ac6:	2b03      	cmp	r3, #3
 8000ac8:	d017      	beq.n	8000afa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	68db      	ldr	r3, [r3, #12]
 8000ace:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	005b      	lsls	r3, r3, #1
 8000ad4:	2203      	movs	r2, #3
 8000ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ada:	43db      	mvns	r3, r3
 8000adc:	693a      	ldr	r2, [r7, #16]
 8000ade:	4013      	ands	r3, r2
 8000ae0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	689a      	ldr	r2, [r3, #8]
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	005b      	lsls	r3, r3, #1
 8000aea:	fa02 f303 	lsl.w	r3, r2, r3
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	4313      	orrs	r3, r2
 8000af2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	f003 0303 	and.w	r3, r3, #3
 8000b02:	2b02      	cmp	r3, #2
 8000b04:	d123      	bne.n	8000b4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	08da      	lsrs	r2, r3, #3
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	3208      	adds	r2, #8
 8000b0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	f003 0307 	and.w	r3, r3, #7
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	220f      	movs	r2, #15
 8000b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b22:	43db      	mvns	r3, r3
 8000b24:	693a      	ldr	r2, [r7, #16]
 8000b26:	4013      	ands	r3, r2
 8000b28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	691a      	ldr	r2, [r3, #16]
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	f003 0307 	and.w	r3, r3, #7
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	08da      	lsrs	r2, r3, #3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	3208      	adds	r2, #8
 8000b48:	6939      	ldr	r1, [r7, #16]
 8000b4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	2203      	movs	r2, #3
 8000b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5e:	43db      	mvns	r3, r3
 8000b60:	693a      	ldr	r2, [r7, #16]
 8000b62:	4013      	ands	r3, r2
 8000b64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	f003 0203 	and.w	r2, r3, #3
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	fa02 f303 	lsl.w	r3, r2, r3
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	f000 80a0 	beq.w	8000cd0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b90:	4b58      	ldr	r3, [pc, #352]	; (8000cf4 <HAL_GPIO_Init+0x2d8>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	4a57      	ldr	r2, [pc, #348]	; (8000cf4 <HAL_GPIO_Init+0x2d8>)
 8000b96:	f043 0301 	orr.w	r3, r3, #1
 8000b9a:	6193      	str	r3, [r2, #24]
 8000b9c:	4b55      	ldr	r3, [pc, #340]	; (8000cf4 <HAL_GPIO_Init+0x2d8>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	f003 0301 	and.w	r3, r3, #1
 8000ba4:	60bb      	str	r3, [r7, #8]
 8000ba6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ba8:	4a53      	ldr	r2, [pc, #332]	; (8000cf8 <HAL_GPIO_Init+0x2dc>)
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	089b      	lsrs	r3, r3, #2
 8000bae:	3302      	adds	r3, #2
 8000bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	f003 0303 	and.w	r3, r3, #3
 8000bbc:	009b      	lsls	r3, r3, #2
 8000bbe:	220f      	movs	r2, #15
 8000bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc4:	43db      	mvns	r3, r3
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	4013      	ands	r3, r2
 8000bca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000bd2:	d019      	beq.n	8000c08 <HAL_GPIO_Init+0x1ec>
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4a49      	ldr	r2, [pc, #292]	; (8000cfc <HAL_GPIO_Init+0x2e0>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d013      	beq.n	8000c04 <HAL_GPIO_Init+0x1e8>
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4a48      	ldr	r2, [pc, #288]	; (8000d00 <HAL_GPIO_Init+0x2e4>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d00d      	beq.n	8000c00 <HAL_GPIO_Init+0x1e4>
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4a47      	ldr	r2, [pc, #284]	; (8000d04 <HAL_GPIO_Init+0x2e8>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d007      	beq.n	8000bfc <HAL_GPIO_Init+0x1e0>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4a46      	ldr	r2, [pc, #280]	; (8000d08 <HAL_GPIO_Init+0x2ec>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d101      	bne.n	8000bf8 <HAL_GPIO_Init+0x1dc>
 8000bf4:	2304      	movs	r3, #4
 8000bf6:	e008      	b.n	8000c0a <HAL_GPIO_Init+0x1ee>
 8000bf8:	2305      	movs	r3, #5
 8000bfa:	e006      	b.n	8000c0a <HAL_GPIO_Init+0x1ee>
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	e004      	b.n	8000c0a <HAL_GPIO_Init+0x1ee>
 8000c00:	2302      	movs	r3, #2
 8000c02:	e002      	b.n	8000c0a <HAL_GPIO_Init+0x1ee>
 8000c04:	2301      	movs	r3, #1
 8000c06:	e000      	b.n	8000c0a <HAL_GPIO_Init+0x1ee>
 8000c08:	2300      	movs	r3, #0
 8000c0a:	697a      	ldr	r2, [r7, #20]
 8000c0c:	f002 0203 	and.w	r2, r2, #3
 8000c10:	0092      	lsls	r2, r2, #2
 8000c12:	4093      	lsls	r3, r2
 8000c14:	693a      	ldr	r2, [r7, #16]
 8000c16:	4313      	orrs	r3, r2
 8000c18:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c1a:	4937      	ldr	r1, [pc, #220]	; (8000cf8 <HAL_GPIO_Init+0x2dc>)
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	089b      	lsrs	r3, r3, #2
 8000c20:	3302      	adds	r3, #2
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c28:	4b38      	ldr	r3, [pc, #224]	; (8000d0c <HAL_GPIO_Init+0x2f0>)
 8000c2a:	689b      	ldr	r3, [r3, #8]
 8000c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	43db      	mvns	r3, r3
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	4013      	ands	r3, r2
 8000c36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d003      	beq.n	8000c4c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000c44:	693a      	ldr	r2, [r7, #16]
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c4c:	4a2f      	ldr	r2, [pc, #188]	; (8000d0c <HAL_GPIO_Init+0x2f0>)
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c52:	4b2e      	ldr	r3, [pc, #184]	; (8000d0c <HAL_GPIO_Init+0x2f0>)
 8000c54:	68db      	ldr	r3, [r3, #12]
 8000c56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	43db      	mvns	r3, r3
 8000c5c:	693a      	ldr	r2, [r7, #16]
 8000c5e:	4013      	ands	r3, r2
 8000c60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d003      	beq.n	8000c76 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	4313      	orrs	r3, r2
 8000c74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c76:	4a25      	ldr	r2, [pc, #148]	; (8000d0c <HAL_GPIO_Init+0x2f0>)
 8000c78:	693b      	ldr	r3, [r7, #16]
 8000c7a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000c7c:	4b23      	ldr	r3, [pc, #140]	; (8000d0c <HAL_GPIO_Init+0x2f0>)
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	43db      	mvns	r3, r3
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d003      	beq.n	8000ca0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ca0:	4a1a      	ldr	r2, [pc, #104]	; (8000d0c <HAL_GPIO_Init+0x2f0>)
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ca6:	4b19      	ldr	r3, [pc, #100]	; (8000d0c <HAL_GPIO_Init+0x2f0>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	693a      	ldr	r2, [r7, #16]
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d003      	beq.n	8000cca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000cca:	4a10      	ldr	r2, [pc, #64]	; (8000d0c <HAL_GPIO_Init+0x2f0>)
 8000ccc:	693b      	ldr	r3, [r7, #16]
 8000cce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	f47f aea3 	bne.w	8000a2c <HAL_GPIO_Init+0x10>
  }
}
 8000ce6:	bf00      	nop
 8000ce8:	bf00      	nop
 8000cea:	371c      	adds	r7, #28
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	40010000 	.word	0x40010000
 8000cfc:	48000400 	.word	0x48000400
 8000d00:	48000800 	.word	0x48000800
 8000d04:	48000c00 	.word	0x48000c00
 8000d08:	48001000 	.word	0x48001000
 8000d0c:	40010400 	.word	0x40010400

08000d10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	460b      	mov	r3, r1
 8000d1a:	807b      	strh	r3, [r7, #2]
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d20:	787b      	ldrb	r3, [r7, #1]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d003      	beq.n	8000d2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d26:	887a      	ldrh	r2, [r7, #2]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d2c:	e002      	b.n	8000d34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d2e:	887a      	ldrh	r2, [r7, #2]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d34:	bf00      	nop
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	460b      	mov	r3, r1
 8000d4a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	695b      	ldr	r3, [r3, #20]
 8000d50:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d52:	887a      	ldrh	r2, [r7, #2]
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	4013      	ands	r3, r2
 8000d58:	041a      	lsls	r2, r3, #16
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	43d9      	mvns	r1, r3
 8000d5e:	887b      	ldrh	r3, [r7, #2]
 8000d60:	400b      	ands	r3, r1
 8000d62:	431a      	orrs	r2, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	619a      	str	r2, [r3, #24]
}
 8000d68:	bf00      	nop
 8000d6a:	3714      	adds	r7, #20
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d80:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d84:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d102      	bne.n	8000d9a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000d94:	2301      	movs	r3, #1
 8000d96:	f001 b823 	b.w	8001de0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	f000 817d 	beq.w	80010aa <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000db0:	4bbc      	ldr	r3, [pc, #752]	; (80010a4 <HAL_RCC_OscConfig+0x330>)
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f003 030c 	and.w	r3, r3, #12
 8000db8:	2b04      	cmp	r3, #4
 8000dba:	d00c      	beq.n	8000dd6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000dbc:	4bb9      	ldr	r3, [pc, #740]	; (80010a4 <HAL_RCC_OscConfig+0x330>)
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f003 030c 	and.w	r3, r3, #12
 8000dc4:	2b08      	cmp	r3, #8
 8000dc6:	d15c      	bne.n	8000e82 <HAL_RCC_OscConfig+0x10e>
 8000dc8:	4bb6      	ldr	r3, [pc, #728]	; (80010a4 <HAL_RCC_OscConfig+0x330>)
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dd4:	d155      	bne.n	8000e82 <HAL_RCC_OscConfig+0x10e>
 8000dd6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dda:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dde:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000de2:	fa93 f3a3 	rbit	r3, r3
 8000de6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000dea:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dee:	fab3 f383 	clz	r3, r3
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	095b      	lsrs	r3, r3, #5
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	f043 0301 	orr.w	r3, r3, #1
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d102      	bne.n	8000e08 <HAL_RCC_OscConfig+0x94>
 8000e02:	4ba8      	ldr	r3, [pc, #672]	; (80010a4 <HAL_RCC_OscConfig+0x330>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	e015      	b.n	8000e34 <HAL_RCC_OscConfig+0xc0>
 8000e08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e0c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e10:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000e14:	fa93 f3a3 	rbit	r3, r3
 8000e18:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000e1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e20:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000e24:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000e28:	fa93 f3a3 	rbit	r3, r3
 8000e2c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000e30:	4b9c      	ldr	r3, [pc, #624]	; (80010a4 <HAL_RCC_OscConfig+0x330>)
 8000e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e34:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e38:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000e3c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000e40:	fa92 f2a2 	rbit	r2, r2
 8000e44:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000e48:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000e4c:	fab2 f282 	clz	r2, r2
 8000e50:	b2d2      	uxtb	r2, r2
 8000e52:	f042 0220 	orr.w	r2, r2, #32
 8000e56:	b2d2      	uxtb	r2, r2
 8000e58:	f002 021f 	and.w	r2, r2, #31
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e62:	4013      	ands	r3, r2
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	f000 811f 	beq.w	80010a8 <HAL_RCC_OscConfig+0x334>
 8000e6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	f040 8116 	bne.w	80010a8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	f000 bfaf 	b.w	8001de0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e92:	d106      	bne.n	8000ea2 <HAL_RCC_OscConfig+0x12e>
 8000e94:	4b83      	ldr	r3, [pc, #524]	; (80010a4 <HAL_RCC_OscConfig+0x330>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a82      	ldr	r2, [pc, #520]	; (80010a4 <HAL_RCC_OscConfig+0x330>)
 8000e9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e9e:	6013      	str	r3, [r2, #0]
 8000ea0:	e036      	b.n	8000f10 <HAL_RCC_OscConfig+0x19c>
 8000ea2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ea6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d10c      	bne.n	8000ecc <HAL_RCC_OscConfig+0x158>
 8000eb2:	4b7c      	ldr	r3, [pc, #496]	; (80010a4 <HAL_RCC_OscConfig+0x330>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a7b      	ldr	r2, [pc, #492]	; (80010a4 <HAL_RCC_OscConfig+0x330>)
 8000eb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ebc:	6013      	str	r3, [r2, #0]
 8000ebe:	4b79      	ldr	r3, [pc, #484]	; (80010a4 <HAL_RCC_OscConfig+0x330>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a78      	ldr	r2, [pc, #480]	; (80010a4 <HAL_RCC_OscConfig+0x330>)
 8000ec4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ec8:	6013      	str	r3, [r2, #0]
 8000eca:	e021      	b.n	8000f10 <HAL_RCC_OscConfig+0x19c>
 8000ecc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ed0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000edc:	d10c      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x184>
 8000ede:	4b71      	ldr	r3, [pc, #452]	; (80010a4 <HAL_RCC_OscConfig+0x330>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a70      	ldr	r2, [pc, #448]	; (80010a4 <HAL_RCC_OscConfig+0x330>)
 8000ee4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ee8:	6013      	str	r3, [r2, #0]
 8000eea:	4b6e      	ldr	r3, [pc, #440]	; (80010a4 <HAL_RCC_OscConfig+0x330>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a6d      	ldr	r2, [pc, #436]	; (80010a4 <HAL_RCC_OscConfig+0x330>)
 8000ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ef4:	6013      	str	r3, [r2, #0]
 8000ef6:	e00b      	b.n	8000f10 <HAL_RCC_OscConfig+0x19c>
 8000ef8:	4b6a      	ldr	r3, [pc, #424]	; (80010a4 <HAL_RCC_OscConfig+0x330>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a69      	ldr	r2, [pc, #420]	; (80010a4 <HAL_RCC_OscConfig+0x330>)
 8000efe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f02:	6013      	str	r3, [r2, #0]
 8000f04:	4b67      	ldr	r3, [pc, #412]	; (80010a4 <HAL_RCC_OscConfig+0x330>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a66      	ldr	r2, [pc, #408]	; (80010a4 <HAL_RCC_OscConfig+0x330>)
 8000f0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f0e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f10:	4b64      	ldr	r3, [pc, #400]	; (80010a4 <HAL_RCC_OscConfig+0x330>)
 8000f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f14:	f023 020f 	bic.w	r2, r3, #15
 8000f18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f1c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	495f      	ldr	r1, [pc, #380]	; (80010a4 <HAL_RCC_OscConfig+0x330>)
 8000f26:	4313      	orrs	r3, r2
 8000f28:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d059      	beq.n	8000fee <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f3a:	f7ff fbb1 	bl	80006a0 <HAL_GetTick>
 8000f3e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f42:	e00a      	b.n	8000f5a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f44:	f7ff fbac 	bl	80006a0 <HAL_GetTick>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f4e:	1ad3      	subs	r3, r2, r3
 8000f50:	2b64      	cmp	r3, #100	; 0x64
 8000f52:	d902      	bls.n	8000f5a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000f54:	2303      	movs	r3, #3
 8000f56:	f000 bf43 	b.w	8001de0 <HAL_RCC_OscConfig+0x106c>
 8000f5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f5e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f62:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000f66:	fa93 f3a3 	rbit	r3, r3
 8000f6a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000f6e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f72:	fab3 f383 	clz	r3, r3
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	095b      	lsrs	r3, r3, #5
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	f043 0301 	orr.w	r3, r3, #1
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d102      	bne.n	8000f8c <HAL_RCC_OscConfig+0x218>
 8000f86:	4b47      	ldr	r3, [pc, #284]	; (80010a4 <HAL_RCC_OscConfig+0x330>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	e015      	b.n	8000fb8 <HAL_RCC_OscConfig+0x244>
 8000f8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f90:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f94:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000f98:	fa93 f3a3 	rbit	r3, r3
 8000f9c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000fa0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fa4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000fa8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000fac:	fa93 f3a3 	rbit	r3, r3
 8000fb0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000fb4:	4b3b      	ldr	r3, [pc, #236]	; (80010a4 <HAL_RCC_OscConfig+0x330>)
 8000fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fbc:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000fc0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000fc4:	fa92 f2a2 	rbit	r2, r2
 8000fc8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000fcc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000fd0:	fab2 f282 	clz	r2, r2
 8000fd4:	b2d2      	uxtb	r2, r2
 8000fd6:	f042 0220 	orr.w	r2, r2, #32
 8000fda:	b2d2      	uxtb	r2, r2
 8000fdc:	f002 021f 	and.w	r2, r2, #31
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	fa01 f202 	lsl.w	r2, r1, r2
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d0ab      	beq.n	8000f44 <HAL_RCC_OscConfig+0x1d0>
 8000fec:	e05d      	b.n	80010aa <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fee:	f7ff fb57 	bl	80006a0 <HAL_GetTick>
 8000ff2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ff6:	e00a      	b.n	800100e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ff8:	f7ff fb52 	bl	80006a0 <HAL_GetTick>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001002:	1ad3      	subs	r3, r2, r3
 8001004:	2b64      	cmp	r3, #100	; 0x64
 8001006:	d902      	bls.n	800100e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001008:	2303      	movs	r3, #3
 800100a:	f000 bee9 	b.w	8001de0 <HAL_RCC_OscConfig+0x106c>
 800100e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001012:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001016:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800101a:	fa93 f3a3 	rbit	r3, r3
 800101e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001022:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001026:	fab3 f383 	clz	r3, r3
 800102a:	b2db      	uxtb	r3, r3
 800102c:	095b      	lsrs	r3, r3, #5
 800102e:	b2db      	uxtb	r3, r3
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	b2db      	uxtb	r3, r3
 8001036:	2b01      	cmp	r3, #1
 8001038:	d102      	bne.n	8001040 <HAL_RCC_OscConfig+0x2cc>
 800103a:	4b1a      	ldr	r3, [pc, #104]	; (80010a4 <HAL_RCC_OscConfig+0x330>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	e015      	b.n	800106c <HAL_RCC_OscConfig+0x2f8>
 8001040:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001044:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001048:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800104c:	fa93 f3a3 	rbit	r3, r3
 8001050:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001054:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001058:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800105c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001060:	fa93 f3a3 	rbit	r3, r3
 8001064:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001068:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <HAL_RCC_OscConfig+0x330>)
 800106a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800106c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001070:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001074:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001078:	fa92 f2a2 	rbit	r2, r2
 800107c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001080:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001084:	fab2 f282 	clz	r2, r2
 8001088:	b2d2      	uxtb	r2, r2
 800108a:	f042 0220 	orr.w	r2, r2, #32
 800108e:	b2d2      	uxtb	r2, r2
 8001090:	f002 021f 	and.w	r2, r2, #31
 8001094:	2101      	movs	r1, #1
 8001096:	fa01 f202 	lsl.w	r2, r1, r2
 800109a:	4013      	ands	r3, r2
 800109c:	2b00      	cmp	r3, #0
 800109e:	d1ab      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x284>
 80010a0:	e003      	b.n	80010aa <HAL_RCC_OscConfig+0x336>
 80010a2:	bf00      	nop
 80010a4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 0302 	and.w	r3, r3, #2
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	f000 817d 	beq.w	80013ba <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80010c0:	4ba6      	ldr	r3, [pc, #664]	; (800135c <HAL_RCC_OscConfig+0x5e8>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f003 030c 	and.w	r3, r3, #12
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d00b      	beq.n	80010e4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80010cc:	4ba3      	ldr	r3, [pc, #652]	; (800135c <HAL_RCC_OscConfig+0x5e8>)
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f003 030c 	and.w	r3, r3, #12
 80010d4:	2b08      	cmp	r3, #8
 80010d6:	d172      	bne.n	80011be <HAL_RCC_OscConfig+0x44a>
 80010d8:	4ba0      	ldr	r3, [pc, #640]	; (800135c <HAL_RCC_OscConfig+0x5e8>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d16c      	bne.n	80011be <HAL_RCC_OscConfig+0x44a>
 80010e4:	2302      	movs	r3, #2
 80010e6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ea:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80010ee:	fa93 f3a3 	rbit	r3, r3
 80010f2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80010f6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010fa:	fab3 f383 	clz	r3, r3
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	095b      	lsrs	r3, r3, #5
 8001102:	b2db      	uxtb	r3, r3
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	b2db      	uxtb	r3, r3
 800110a:	2b01      	cmp	r3, #1
 800110c:	d102      	bne.n	8001114 <HAL_RCC_OscConfig+0x3a0>
 800110e:	4b93      	ldr	r3, [pc, #588]	; (800135c <HAL_RCC_OscConfig+0x5e8>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	e013      	b.n	800113c <HAL_RCC_OscConfig+0x3c8>
 8001114:	2302      	movs	r3, #2
 8001116:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800111a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800111e:	fa93 f3a3 	rbit	r3, r3
 8001122:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001126:	2302      	movs	r3, #2
 8001128:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800112c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001130:	fa93 f3a3 	rbit	r3, r3
 8001134:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001138:	4b88      	ldr	r3, [pc, #544]	; (800135c <HAL_RCC_OscConfig+0x5e8>)
 800113a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113c:	2202      	movs	r2, #2
 800113e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001142:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001146:	fa92 f2a2 	rbit	r2, r2
 800114a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800114e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001152:	fab2 f282 	clz	r2, r2
 8001156:	b2d2      	uxtb	r2, r2
 8001158:	f042 0220 	orr.w	r2, r2, #32
 800115c:	b2d2      	uxtb	r2, r2
 800115e:	f002 021f 	and.w	r2, r2, #31
 8001162:	2101      	movs	r1, #1
 8001164:	fa01 f202 	lsl.w	r2, r1, r2
 8001168:	4013      	ands	r3, r2
 800116a:	2b00      	cmp	r3, #0
 800116c:	d00a      	beq.n	8001184 <HAL_RCC_OscConfig+0x410>
 800116e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001172:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	691b      	ldr	r3, [r3, #16]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d002      	beq.n	8001184 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	f000 be2e 	b.w	8001de0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001184:	4b75      	ldr	r3, [pc, #468]	; (800135c <HAL_RCC_OscConfig+0x5e8>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800118c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001190:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	695b      	ldr	r3, [r3, #20]
 8001198:	21f8      	movs	r1, #248	; 0xf8
 800119a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800119e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80011a2:	fa91 f1a1 	rbit	r1, r1
 80011a6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80011aa:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80011ae:	fab1 f181 	clz	r1, r1
 80011b2:	b2c9      	uxtb	r1, r1
 80011b4:	408b      	lsls	r3, r1
 80011b6:	4969      	ldr	r1, [pc, #420]	; (800135c <HAL_RCC_OscConfig+0x5e8>)
 80011b8:	4313      	orrs	r3, r2
 80011ba:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011bc:	e0fd      	b.n	80013ba <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	691b      	ldr	r3, [r3, #16]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	f000 8088 	beq.w	80012e0 <HAL_RCC_OscConfig+0x56c>
 80011d0:	2301      	movs	r3, #1
 80011d2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80011da:	fa93 f3a3 	rbit	r3, r3
 80011de:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80011e2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011e6:	fab3 f383 	clz	r3, r3
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80011f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	461a      	mov	r2, r3
 80011f8:	2301      	movs	r3, #1
 80011fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011fc:	f7ff fa50 	bl	80006a0 <HAL_GetTick>
 8001200:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001204:	e00a      	b.n	800121c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001206:	f7ff fa4b 	bl	80006a0 <HAL_GetTick>
 800120a:	4602      	mov	r2, r0
 800120c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	2b02      	cmp	r3, #2
 8001214:	d902      	bls.n	800121c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001216:	2303      	movs	r3, #3
 8001218:	f000 bde2 	b.w	8001de0 <HAL_RCC_OscConfig+0x106c>
 800121c:	2302      	movs	r3, #2
 800121e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001222:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001226:	fa93 f3a3 	rbit	r3, r3
 800122a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800122e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001232:	fab3 f383 	clz	r3, r3
 8001236:	b2db      	uxtb	r3, r3
 8001238:	095b      	lsrs	r3, r3, #5
 800123a:	b2db      	uxtb	r3, r3
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	b2db      	uxtb	r3, r3
 8001242:	2b01      	cmp	r3, #1
 8001244:	d102      	bne.n	800124c <HAL_RCC_OscConfig+0x4d8>
 8001246:	4b45      	ldr	r3, [pc, #276]	; (800135c <HAL_RCC_OscConfig+0x5e8>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	e013      	b.n	8001274 <HAL_RCC_OscConfig+0x500>
 800124c:	2302      	movs	r3, #2
 800124e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001252:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001256:	fa93 f3a3 	rbit	r3, r3
 800125a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800125e:	2302      	movs	r3, #2
 8001260:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001264:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001268:	fa93 f3a3 	rbit	r3, r3
 800126c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001270:	4b3a      	ldr	r3, [pc, #232]	; (800135c <HAL_RCC_OscConfig+0x5e8>)
 8001272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001274:	2202      	movs	r2, #2
 8001276:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800127a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800127e:	fa92 f2a2 	rbit	r2, r2
 8001282:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001286:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800128a:	fab2 f282 	clz	r2, r2
 800128e:	b2d2      	uxtb	r2, r2
 8001290:	f042 0220 	orr.w	r2, r2, #32
 8001294:	b2d2      	uxtb	r2, r2
 8001296:	f002 021f 	and.w	r2, r2, #31
 800129a:	2101      	movs	r1, #1
 800129c:	fa01 f202 	lsl.w	r2, r1, r2
 80012a0:	4013      	ands	r3, r2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d0af      	beq.n	8001206 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a6:	4b2d      	ldr	r3, [pc, #180]	; (800135c <HAL_RCC_OscConfig+0x5e8>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	695b      	ldr	r3, [r3, #20]
 80012ba:	21f8      	movs	r1, #248	; 0xf8
 80012bc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80012c4:	fa91 f1a1 	rbit	r1, r1
 80012c8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80012cc:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80012d0:	fab1 f181 	clz	r1, r1
 80012d4:	b2c9      	uxtb	r1, r1
 80012d6:	408b      	lsls	r3, r1
 80012d8:	4920      	ldr	r1, [pc, #128]	; (800135c <HAL_RCC_OscConfig+0x5e8>)
 80012da:	4313      	orrs	r3, r2
 80012dc:	600b      	str	r3, [r1, #0]
 80012de:	e06c      	b.n	80013ba <HAL_RCC_OscConfig+0x646>
 80012e0:	2301      	movs	r3, #1
 80012e2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80012ea:	fa93 f3a3 	rbit	r3, r3
 80012ee:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80012f2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012f6:	fab3 f383 	clz	r3, r3
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001300:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	461a      	mov	r2, r3
 8001308:	2300      	movs	r3, #0
 800130a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800130c:	f7ff f9c8 	bl	80006a0 <HAL_GetTick>
 8001310:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001314:	e00a      	b.n	800132c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001316:	f7ff f9c3 	bl	80006a0 <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b02      	cmp	r3, #2
 8001324:	d902      	bls.n	800132c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	f000 bd5a 	b.w	8001de0 <HAL_RCC_OscConfig+0x106c>
 800132c:	2302      	movs	r3, #2
 800132e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001332:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001336:	fa93 f3a3 	rbit	r3, r3
 800133a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800133e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001342:	fab3 f383 	clz	r3, r3
 8001346:	b2db      	uxtb	r3, r3
 8001348:	095b      	lsrs	r3, r3, #5
 800134a:	b2db      	uxtb	r3, r3
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b01      	cmp	r3, #1
 8001354:	d104      	bne.n	8001360 <HAL_RCC_OscConfig+0x5ec>
 8001356:	4b01      	ldr	r3, [pc, #4]	; (800135c <HAL_RCC_OscConfig+0x5e8>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	e015      	b.n	8001388 <HAL_RCC_OscConfig+0x614>
 800135c:	40021000 	.word	0x40021000
 8001360:	2302      	movs	r3, #2
 8001362:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001366:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800136a:	fa93 f3a3 	rbit	r3, r3
 800136e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001372:	2302      	movs	r3, #2
 8001374:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001378:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800137c:	fa93 f3a3 	rbit	r3, r3
 8001380:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001384:	4bc8      	ldr	r3, [pc, #800]	; (80016a8 <HAL_RCC_OscConfig+0x934>)
 8001386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001388:	2202      	movs	r2, #2
 800138a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800138e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001392:	fa92 f2a2 	rbit	r2, r2
 8001396:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800139a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800139e:	fab2 f282 	clz	r2, r2
 80013a2:	b2d2      	uxtb	r2, r2
 80013a4:	f042 0220 	orr.w	r2, r2, #32
 80013a8:	b2d2      	uxtb	r2, r2
 80013aa:	f002 021f 	and.w	r2, r2, #31
 80013ae:	2101      	movs	r1, #1
 80013b0:	fa01 f202 	lsl.w	r2, r1, r2
 80013b4:	4013      	ands	r3, r2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1ad      	bne.n	8001316 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0308 	and.w	r3, r3, #8
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	f000 8110 	beq.w	80015f0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d079      	beq.n	80014d4 <HAL_RCC_OscConfig+0x760>
 80013e0:	2301      	movs	r3, #1
 80013e2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013e6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80013ea:	fa93 f3a3 	rbit	r3, r3
 80013ee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80013f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013f6:	fab3 f383 	clz	r3, r3
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	461a      	mov	r2, r3
 80013fe:	4bab      	ldr	r3, [pc, #684]	; (80016ac <HAL_RCC_OscConfig+0x938>)
 8001400:	4413      	add	r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	461a      	mov	r2, r3
 8001406:	2301      	movs	r3, #1
 8001408:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800140a:	f7ff f949 	bl	80006a0 <HAL_GetTick>
 800140e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001412:	e00a      	b.n	800142a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001414:	f7ff f944 	bl	80006a0 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	2b02      	cmp	r3, #2
 8001422:	d902      	bls.n	800142a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	f000 bcdb 	b.w	8001de0 <HAL_RCC_OscConfig+0x106c>
 800142a:	2302      	movs	r3, #2
 800142c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001430:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001434:	fa93 f3a3 	rbit	r3, r3
 8001438:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800143c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001440:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001444:	2202      	movs	r2, #2
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800144c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	fa93 f2a3 	rbit	r2, r3
 8001456:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800145a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001464:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001468:	2202      	movs	r2, #2
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001470:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	fa93 f2a3 	rbit	r2, r3
 800147a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800147e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001482:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001484:	4b88      	ldr	r3, [pc, #544]	; (80016a8 <HAL_RCC_OscConfig+0x934>)
 8001486:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001488:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800148c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001490:	2102      	movs	r1, #2
 8001492:	6019      	str	r1, [r3, #0]
 8001494:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001498:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	fa93 f1a3 	rbit	r1, r3
 80014a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014a6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80014aa:	6019      	str	r1, [r3, #0]
  return result;
 80014ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014b0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	fab3 f383 	clz	r3, r3
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	f003 031f 	and.w	r3, r3, #31
 80014c6:	2101      	movs	r1, #1
 80014c8:	fa01 f303 	lsl.w	r3, r1, r3
 80014cc:	4013      	ands	r3, r2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d0a0      	beq.n	8001414 <HAL_RCC_OscConfig+0x6a0>
 80014d2:	e08d      	b.n	80015f0 <HAL_RCC_OscConfig+0x87c>
 80014d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014d8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80014dc:	2201      	movs	r2, #1
 80014de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014e4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	fa93 f2a3 	rbit	r2, r3
 80014ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014f2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80014f6:	601a      	str	r2, [r3, #0]
  return result;
 80014f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014fc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001500:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001502:	fab3 f383 	clz	r3, r3
 8001506:	b2db      	uxtb	r3, r3
 8001508:	461a      	mov	r2, r3
 800150a:	4b68      	ldr	r3, [pc, #416]	; (80016ac <HAL_RCC_OscConfig+0x938>)
 800150c:	4413      	add	r3, r2
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	461a      	mov	r2, r3
 8001512:	2300      	movs	r3, #0
 8001514:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001516:	f7ff f8c3 	bl	80006a0 <HAL_GetTick>
 800151a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800151e:	e00a      	b.n	8001536 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001520:	f7ff f8be 	bl	80006a0 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	2b02      	cmp	r3, #2
 800152e:	d902      	bls.n	8001536 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	f000 bc55 	b.w	8001de0 <HAL_RCC_OscConfig+0x106c>
 8001536:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800153a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800153e:	2202      	movs	r2, #2
 8001540:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001542:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001546:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	fa93 f2a3 	rbit	r2, r3
 8001550:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001554:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800155e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001562:	2202      	movs	r2, #2
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800156a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	fa93 f2a3 	rbit	r2, r3
 8001574:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001578:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001582:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001586:	2202      	movs	r2, #2
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800158e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	fa93 f2a3 	rbit	r2, r3
 8001598:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800159c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80015a0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015a2:	4b41      	ldr	r3, [pc, #260]	; (80016a8 <HAL_RCC_OscConfig+0x934>)
 80015a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015aa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80015ae:	2102      	movs	r1, #2
 80015b0:	6019      	str	r1, [r3, #0]
 80015b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015b6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	fa93 f1a3 	rbit	r1, r3
 80015c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015c4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80015c8:	6019      	str	r1, [r3, #0]
  return result;
 80015ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ce:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	fab3 f383 	clz	r3, r3
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	f003 031f 	and.w	r3, r3, #31
 80015e4:	2101      	movs	r1, #1
 80015e6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ea:	4013      	ands	r3, r2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d197      	bne.n	8001520 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0304 	and.w	r3, r3, #4
 8001600:	2b00      	cmp	r3, #0
 8001602:	f000 81a1 	beq.w	8001948 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001606:	2300      	movs	r3, #0
 8001608:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800160c:	4b26      	ldr	r3, [pc, #152]	; (80016a8 <HAL_RCC_OscConfig+0x934>)
 800160e:	69db      	ldr	r3, [r3, #28]
 8001610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d116      	bne.n	8001646 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001618:	4b23      	ldr	r3, [pc, #140]	; (80016a8 <HAL_RCC_OscConfig+0x934>)
 800161a:	69db      	ldr	r3, [r3, #28]
 800161c:	4a22      	ldr	r2, [pc, #136]	; (80016a8 <HAL_RCC_OscConfig+0x934>)
 800161e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001622:	61d3      	str	r3, [r2, #28]
 8001624:	4b20      	ldr	r3, [pc, #128]	; (80016a8 <HAL_RCC_OscConfig+0x934>)
 8001626:	69db      	ldr	r3, [r3, #28]
 8001628:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800162c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001630:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800163a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800163e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001640:	2301      	movs	r3, #1
 8001642:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001646:	4b1a      	ldr	r3, [pc, #104]	; (80016b0 <HAL_RCC_OscConfig+0x93c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800164e:	2b00      	cmp	r3, #0
 8001650:	d11a      	bne.n	8001688 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001652:	4b17      	ldr	r3, [pc, #92]	; (80016b0 <HAL_RCC_OscConfig+0x93c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a16      	ldr	r2, [pc, #88]	; (80016b0 <HAL_RCC_OscConfig+0x93c>)
 8001658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800165c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800165e:	f7ff f81f 	bl	80006a0 <HAL_GetTick>
 8001662:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001666:	e009      	b.n	800167c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001668:	f7ff f81a 	bl	80006a0 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b64      	cmp	r3, #100	; 0x64
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e3b1      	b.n	8001de0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800167c:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <HAL_RCC_OscConfig+0x93c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001684:	2b00      	cmp	r3, #0
 8001686:	d0ef      	beq.n	8001668 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001688:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800168c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d10d      	bne.n	80016b4 <HAL_RCC_OscConfig+0x940>
 8001698:	4b03      	ldr	r3, [pc, #12]	; (80016a8 <HAL_RCC_OscConfig+0x934>)
 800169a:	6a1b      	ldr	r3, [r3, #32]
 800169c:	4a02      	ldr	r2, [pc, #8]	; (80016a8 <HAL_RCC_OscConfig+0x934>)
 800169e:	f043 0301 	orr.w	r3, r3, #1
 80016a2:	6213      	str	r3, [r2, #32]
 80016a4:	e03c      	b.n	8001720 <HAL_RCC_OscConfig+0x9ac>
 80016a6:	bf00      	nop
 80016a8:	40021000 	.word	0x40021000
 80016ac:	10908120 	.word	0x10908120
 80016b0:	40007000 	.word	0x40007000
 80016b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d10c      	bne.n	80016de <HAL_RCC_OscConfig+0x96a>
 80016c4:	4bc1      	ldr	r3, [pc, #772]	; (80019cc <HAL_RCC_OscConfig+0xc58>)
 80016c6:	6a1b      	ldr	r3, [r3, #32]
 80016c8:	4ac0      	ldr	r2, [pc, #768]	; (80019cc <HAL_RCC_OscConfig+0xc58>)
 80016ca:	f023 0301 	bic.w	r3, r3, #1
 80016ce:	6213      	str	r3, [r2, #32]
 80016d0:	4bbe      	ldr	r3, [pc, #760]	; (80019cc <HAL_RCC_OscConfig+0xc58>)
 80016d2:	6a1b      	ldr	r3, [r3, #32]
 80016d4:	4abd      	ldr	r2, [pc, #756]	; (80019cc <HAL_RCC_OscConfig+0xc58>)
 80016d6:	f023 0304 	bic.w	r3, r3, #4
 80016da:	6213      	str	r3, [r2, #32]
 80016dc:	e020      	b.n	8001720 <HAL_RCC_OscConfig+0x9ac>
 80016de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	2b05      	cmp	r3, #5
 80016ec:	d10c      	bne.n	8001708 <HAL_RCC_OscConfig+0x994>
 80016ee:	4bb7      	ldr	r3, [pc, #732]	; (80019cc <HAL_RCC_OscConfig+0xc58>)
 80016f0:	6a1b      	ldr	r3, [r3, #32]
 80016f2:	4ab6      	ldr	r2, [pc, #728]	; (80019cc <HAL_RCC_OscConfig+0xc58>)
 80016f4:	f043 0304 	orr.w	r3, r3, #4
 80016f8:	6213      	str	r3, [r2, #32]
 80016fa:	4bb4      	ldr	r3, [pc, #720]	; (80019cc <HAL_RCC_OscConfig+0xc58>)
 80016fc:	6a1b      	ldr	r3, [r3, #32]
 80016fe:	4ab3      	ldr	r2, [pc, #716]	; (80019cc <HAL_RCC_OscConfig+0xc58>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	6213      	str	r3, [r2, #32]
 8001706:	e00b      	b.n	8001720 <HAL_RCC_OscConfig+0x9ac>
 8001708:	4bb0      	ldr	r3, [pc, #704]	; (80019cc <HAL_RCC_OscConfig+0xc58>)
 800170a:	6a1b      	ldr	r3, [r3, #32]
 800170c:	4aaf      	ldr	r2, [pc, #700]	; (80019cc <HAL_RCC_OscConfig+0xc58>)
 800170e:	f023 0301 	bic.w	r3, r3, #1
 8001712:	6213      	str	r3, [r2, #32]
 8001714:	4bad      	ldr	r3, [pc, #692]	; (80019cc <HAL_RCC_OscConfig+0xc58>)
 8001716:	6a1b      	ldr	r3, [r3, #32]
 8001718:	4aac      	ldr	r2, [pc, #688]	; (80019cc <HAL_RCC_OscConfig+0xc58>)
 800171a:	f023 0304 	bic.w	r3, r3, #4
 800171e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001720:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001724:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	2b00      	cmp	r3, #0
 800172e:	f000 8081 	beq.w	8001834 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001732:	f7fe ffb5 	bl	80006a0 <HAL_GetTick>
 8001736:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800173a:	e00b      	b.n	8001754 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800173c:	f7fe ffb0 	bl	80006a0 <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	f241 3288 	movw	r2, #5000	; 0x1388
 800174c:	4293      	cmp	r3, r2
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e345      	b.n	8001de0 <HAL_RCC_OscConfig+0x106c>
 8001754:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001758:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800175c:	2202      	movs	r2, #2
 800175e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001760:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001764:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	fa93 f2a3 	rbit	r2, r3
 800176e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001772:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800177c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001780:	2202      	movs	r2, #2
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001788:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	fa93 f2a3 	rbit	r2, r3
 8001792:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001796:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800179a:	601a      	str	r2, [r3, #0]
  return result;
 800179c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017a0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80017a4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017a6:	fab3 f383 	clz	r3, r3
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	095b      	lsrs	r3, r3, #5
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	f043 0302 	orr.w	r3, r3, #2
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d102      	bne.n	80017c0 <HAL_RCC_OscConfig+0xa4c>
 80017ba:	4b84      	ldr	r3, [pc, #528]	; (80019cc <HAL_RCC_OscConfig+0xc58>)
 80017bc:	6a1b      	ldr	r3, [r3, #32]
 80017be:	e013      	b.n	80017e8 <HAL_RCC_OscConfig+0xa74>
 80017c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80017c8:	2202      	movs	r2, #2
 80017ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017d0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	fa93 f2a3 	rbit	r2, r3
 80017da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017de:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	4b79      	ldr	r3, [pc, #484]	; (80019cc <HAL_RCC_OscConfig+0xc58>)
 80017e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017ec:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80017f0:	2102      	movs	r1, #2
 80017f2:	6011      	str	r1, [r2, #0]
 80017f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017f8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80017fc:	6812      	ldr	r2, [r2, #0]
 80017fe:	fa92 f1a2 	rbit	r1, r2
 8001802:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001806:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800180a:	6011      	str	r1, [r2, #0]
  return result;
 800180c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001810:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001814:	6812      	ldr	r2, [r2, #0]
 8001816:	fab2 f282 	clz	r2, r2
 800181a:	b2d2      	uxtb	r2, r2
 800181c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001820:	b2d2      	uxtb	r2, r2
 8001822:	f002 021f 	and.w	r2, r2, #31
 8001826:	2101      	movs	r1, #1
 8001828:	fa01 f202 	lsl.w	r2, r1, r2
 800182c:	4013      	ands	r3, r2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d084      	beq.n	800173c <HAL_RCC_OscConfig+0x9c8>
 8001832:	e07f      	b.n	8001934 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001834:	f7fe ff34 	bl	80006a0 <HAL_GetTick>
 8001838:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800183c:	e00b      	b.n	8001856 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800183e:	f7fe ff2f 	bl	80006a0 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	f241 3288 	movw	r2, #5000	; 0x1388
 800184e:	4293      	cmp	r3, r2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e2c4      	b.n	8001de0 <HAL_RCC_OscConfig+0x106c>
 8001856:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800185a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800185e:	2202      	movs	r2, #2
 8001860:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001862:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001866:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	fa93 f2a3 	rbit	r2, r3
 8001870:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001874:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800187e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001882:	2202      	movs	r2, #2
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800188a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	fa93 f2a3 	rbit	r2, r3
 8001894:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001898:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800189c:	601a      	str	r2, [r3, #0]
  return result;
 800189e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018a2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80018a6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018a8:	fab3 f383 	clz	r3, r3
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	095b      	lsrs	r3, r3, #5
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	f043 0302 	orr.w	r3, r3, #2
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d102      	bne.n	80018c2 <HAL_RCC_OscConfig+0xb4e>
 80018bc:	4b43      	ldr	r3, [pc, #268]	; (80019cc <HAL_RCC_OscConfig+0xc58>)
 80018be:	6a1b      	ldr	r3, [r3, #32]
 80018c0:	e013      	b.n	80018ea <HAL_RCC_OscConfig+0xb76>
 80018c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018c6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80018ca:	2202      	movs	r2, #2
 80018cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018d2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	fa93 f2a3 	rbit	r2, r3
 80018dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	4b39      	ldr	r3, [pc, #228]	; (80019cc <HAL_RCC_OscConfig+0xc58>)
 80018e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018ee:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80018f2:	2102      	movs	r1, #2
 80018f4:	6011      	str	r1, [r2, #0]
 80018f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018fa:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80018fe:	6812      	ldr	r2, [r2, #0]
 8001900:	fa92 f1a2 	rbit	r1, r2
 8001904:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001908:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800190c:	6011      	str	r1, [r2, #0]
  return result;
 800190e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001912:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001916:	6812      	ldr	r2, [r2, #0]
 8001918:	fab2 f282 	clz	r2, r2
 800191c:	b2d2      	uxtb	r2, r2
 800191e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001922:	b2d2      	uxtb	r2, r2
 8001924:	f002 021f 	and.w	r2, r2, #31
 8001928:	2101      	movs	r1, #1
 800192a:	fa01 f202 	lsl.w	r2, r1, r2
 800192e:	4013      	ands	r3, r2
 8001930:	2b00      	cmp	r3, #0
 8001932:	d184      	bne.n	800183e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001934:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001938:	2b01      	cmp	r3, #1
 800193a:	d105      	bne.n	8001948 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800193c:	4b23      	ldr	r3, [pc, #140]	; (80019cc <HAL_RCC_OscConfig+0xc58>)
 800193e:	69db      	ldr	r3, [r3, #28]
 8001940:	4a22      	ldr	r2, [pc, #136]	; (80019cc <HAL_RCC_OscConfig+0xc58>)
 8001942:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001946:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001948:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800194c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	69db      	ldr	r3, [r3, #28]
 8001954:	2b00      	cmp	r3, #0
 8001956:	f000 8242 	beq.w	8001dde <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800195a:	4b1c      	ldr	r3, [pc, #112]	; (80019cc <HAL_RCC_OscConfig+0xc58>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f003 030c 	and.w	r3, r3, #12
 8001962:	2b08      	cmp	r3, #8
 8001964:	f000 8213 	beq.w	8001d8e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001968:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800196c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	69db      	ldr	r3, [r3, #28]
 8001974:	2b02      	cmp	r3, #2
 8001976:	f040 8162 	bne.w	8001c3e <HAL_RCC_OscConfig+0xeca>
 800197a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800197e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001982:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001986:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001988:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800198c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	fa93 f2a3 	rbit	r2, r3
 8001996:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800199a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800199e:	601a      	str	r2, [r3, #0]
  return result;
 80019a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80019a8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019aa:	fab3 f383 	clz	r3, r3
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	461a      	mov	r2, r3
 80019bc:	2300      	movs	r3, #0
 80019be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c0:	f7fe fe6e 	bl	80006a0 <HAL_GetTick>
 80019c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019c8:	e00c      	b.n	80019e4 <HAL_RCC_OscConfig+0xc70>
 80019ca:	bf00      	nop
 80019cc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019d0:	f7fe fe66 	bl	80006a0 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e1fd      	b.n	8001de0 <HAL_RCC_OscConfig+0x106c>
 80019e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019e8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80019ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	fa93 f2a3 	rbit	r2, r3
 8001a00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a04:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001a08:	601a      	str	r2, [r3, #0]
  return result;
 8001a0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a0e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001a12:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a14:	fab3 f383 	clz	r3, r3
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	095b      	lsrs	r3, r3, #5
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	f043 0301 	orr.w	r3, r3, #1
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d102      	bne.n	8001a2e <HAL_RCC_OscConfig+0xcba>
 8001a28:	4bb0      	ldr	r3, [pc, #704]	; (8001cec <HAL_RCC_OscConfig+0xf78>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	e027      	b.n	8001a7e <HAL_RCC_OscConfig+0xd0a>
 8001a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a32:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001a36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a40:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	fa93 f2a3 	rbit	r2, r3
 8001a4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a4e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a58:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001a5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a66:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	fa93 f2a3 	rbit	r2, r3
 8001a70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a74:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	4b9c      	ldr	r3, [pc, #624]	; (8001cec <HAL_RCC_OscConfig+0xf78>)
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a82:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001a86:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a8a:	6011      	str	r1, [r2, #0]
 8001a8c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a90:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001a94:	6812      	ldr	r2, [r2, #0]
 8001a96:	fa92 f1a2 	rbit	r1, r2
 8001a9a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a9e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001aa2:	6011      	str	r1, [r2, #0]
  return result;
 8001aa4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001aa8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001aac:	6812      	ldr	r2, [r2, #0]
 8001aae:	fab2 f282 	clz	r2, r2
 8001ab2:	b2d2      	uxtb	r2, r2
 8001ab4:	f042 0220 	orr.w	r2, r2, #32
 8001ab8:	b2d2      	uxtb	r2, r2
 8001aba:	f002 021f 	and.w	r2, r2, #31
 8001abe:	2101      	movs	r1, #1
 8001ac0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d182      	bne.n	80019d0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001aca:	4b88      	ldr	r3, [pc, #544]	; (8001cec <HAL_RCC_OscConfig+0xf78>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ad2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001ade:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6a1b      	ldr	r3, [r3, #32]
 8001aea:	430b      	orrs	r3, r1
 8001aec:	497f      	ldr	r1, [pc, #508]	; (8001cec <HAL_RCC_OscConfig+0xf78>)
 8001aee:	4313      	orrs	r3, r2
 8001af0:	604b      	str	r3, [r1, #4]
 8001af2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001afa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001afe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b04:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	fa93 f2a3 	rbit	r2, r3
 8001b0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b12:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001b16:	601a      	str	r2, [r3, #0]
  return result;
 8001b18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b1c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001b20:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b22:	fab3 f383 	clz	r3, r3
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b2c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	461a      	mov	r2, r3
 8001b34:	2301      	movs	r3, #1
 8001b36:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b38:	f7fe fdb2 	bl	80006a0 <HAL_GetTick>
 8001b3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b40:	e009      	b.n	8001b56 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b42:	f7fe fdad 	bl	80006a0 <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e144      	b.n	8001de0 <HAL_RCC_OscConfig+0x106c>
 8001b56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b5a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001b5e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b68:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	fa93 f2a3 	rbit	r2, r3
 8001b72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b76:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001b7a:	601a      	str	r2, [r3, #0]
  return result;
 8001b7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b80:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001b84:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b86:	fab3 f383 	clz	r3, r3
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	095b      	lsrs	r3, r3, #5
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d102      	bne.n	8001ba0 <HAL_RCC_OscConfig+0xe2c>
 8001b9a:	4b54      	ldr	r3, [pc, #336]	; (8001cec <HAL_RCC_OscConfig+0xf78>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	e027      	b.n	8001bf0 <HAL_RCC_OscConfig+0xe7c>
 8001ba0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001ba8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	fa93 f2a3 	rbit	r2, r3
 8001bbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bca:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001bce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	fa93 f2a3 	rbit	r2, r3
 8001be2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	4b3f      	ldr	r3, [pc, #252]	; (8001cec <HAL_RCC_OscConfig+0xf78>)
 8001bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bf4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001bf8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001bfc:	6011      	str	r1, [r2, #0]
 8001bfe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c02:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001c06:	6812      	ldr	r2, [r2, #0]
 8001c08:	fa92 f1a2 	rbit	r1, r2
 8001c0c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c10:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001c14:	6011      	str	r1, [r2, #0]
  return result;
 8001c16:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c1a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001c1e:	6812      	ldr	r2, [r2, #0]
 8001c20:	fab2 f282 	clz	r2, r2
 8001c24:	b2d2      	uxtb	r2, r2
 8001c26:	f042 0220 	orr.w	r2, r2, #32
 8001c2a:	b2d2      	uxtb	r2, r2
 8001c2c:	f002 021f 	and.w	r2, r2, #31
 8001c30:	2101      	movs	r1, #1
 8001c32:	fa01 f202 	lsl.w	r2, r1, r2
 8001c36:	4013      	ands	r3, r2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d082      	beq.n	8001b42 <HAL_RCC_OscConfig+0xdce>
 8001c3c:	e0cf      	b.n	8001dde <HAL_RCC_OscConfig+0x106a>
 8001c3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c42:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001c46:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c50:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	fa93 f2a3 	rbit	r2, r3
 8001c5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c5e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001c62:	601a      	str	r2, [r3, #0]
  return result;
 8001c64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c68:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001c6c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c6e:	fab3 f383 	clz	r3, r3
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c78:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	461a      	mov	r2, r3
 8001c80:	2300      	movs	r3, #0
 8001c82:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c84:	f7fe fd0c 	bl	80006a0 <HAL_GetTick>
 8001c88:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c8c:	e009      	b.n	8001ca2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c8e:	f7fe fd07 	bl	80006a0 <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e09e      	b.n	8001de0 <HAL_RCC_OscConfig+0x106c>
 8001ca2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001caa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	fa93 f2a3 	rbit	r2, r3
 8001cbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001cc6:	601a      	str	r2, [r3, #0]
  return result;
 8001cc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ccc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001cd0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cd2:	fab3 f383 	clz	r3, r3
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	095b      	lsrs	r3, r3, #5
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	f043 0301 	orr.w	r3, r3, #1
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d104      	bne.n	8001cf0 <HAL_RCC_OscConfig+0xf7c>
 8001ce6:	4b01      	ldr	r3, [pc, #4]	; (8001cec <HAL_RCC_OscConfig+0xf78>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	e029      	b.n	8001d40 <HAL_RCC_OscConfig+0xfcc>
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001cf8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d02:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	fa93 f2a3 	rbit	r2, r3
 8001d0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d10:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d1a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001d1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d28:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	fa93 f2a3 	rbit	r2, r3
 8001d32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d36:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	4b2b      	ldr	r3, [pc, #172]	; (8001dec <HAL_RCC_OscConfig+0x1078>)
 8001d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d40:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d44:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001d48:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d4c:	6011      	str	r1, [r2, #0]
 8001d4e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d52:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001d56:	6812      	ldr	r2, [r2, #0]
 8001d58:	fa92 f1a2 	rbit	r1, r2
 8001d5c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d60:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001d64:	6011      	str	r1, [r2, #0]
  return result;
 8001d66:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d6a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001d6e:	6812      	ldr	r2, [r2, #0]
 8001d70:	fab2 f282 	clz	r2, r2
 8001d74:	b2d2      	uxtb	r2, r2
 8001d76:	f042 0220 	orr.w	r2, r2, #32
 8001d7a:	b2d2      	uxtb	r2, r2
 8001d7c:	f002 021f 	and.w	r2, r2, #31
 8001d80:	2101      	movs	r1, #1
 8001d82:	fa01 f202 	lsl.w	r2, r1, r2
 8001d86:	4013      	ands	r3, r2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d180      	bne.n	8001c8e <HAL_RCC_OscConfig+0xf1a>
 8001d8c:	e027      	b.n	8001dde <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d101      	bne.n	8001da2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e01e      	b.n	8001de0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001da2:	4b12      	ldr	r3, [pc, #72]	; (8001dec <HAL_RCC_OscConfig+0x1078>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001daa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001dae:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001db2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001db6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	6a1b      	ldr	r3, [r3, #32]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d10b      	bne.n	8001dda <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001dc2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001dc6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001dca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d001      	beq.n	8001dde <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e000      	b.n	8001de0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40021000 	.word	0x40021000

08001df0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b09e      	sub	sp, #120	; 0x78
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d101      	bne.n	8001e08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e162      	b.n	80020ce <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e08:	4b90      	ldr	r3, [pc, #576]	; (800204c <HAL_RCC_ClockConfig+0x25c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0307 	and.w	r3, r3, #7
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d910      	bls.n	8001e38 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e16:	4b8d      	ldr	r3, [pc, #564]	; (800204c <HAL_RCC_ClockConfig+0x25c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f023 0207 	bic.w	r2, r3, #7
 8001e1e:	498b      	ldr	r1, [pc, #556]	; (800204c <HAL_RCC_ClockConfig+0x25c>)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e26:	4b89      	ldr	r3, [pc, #548]	; (800204c <HAL_RCC_ClockConfig+0x25c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	683a      	ldr	r2, [r7, #0]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d001      	beq.n	8001e38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e14a      	b.n	80020ce <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d008      	beq.n	8001e56 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e44:	4b82      	ldr	r3, [pc, #520]	; (8002050 <HAL_RCC_ClockConfig+0x260>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	497f      	ldr	r1, [pc, #508]	; (8002050 <HAL_RCC_ClockConfig+0x260>)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f000 80dc 	beq.w	800201c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d13c      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0xf6>
 8001e6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e70:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e74:	fa93 f3a3 	rbit	r3, r3
 8001e78:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001e7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e7c:	fab3 f383 	clz	r3, r3
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	095b      	lsrs	r3, r3, #5
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	f043 0301 	orr.w	r3, r3, #1
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d102      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xa6>
 8001e90:	4b6f      	ldr	r3, [pc, #444]	; (8002050 <HAL_RCC_ClockConfig+0x260>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	e00f      	b.n	8001eb6 <HAL_RCC_ClockConfig+0xc6>
 8001e96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e9a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e9e:	fa93 f3a3 	rbit	r3, r3
 8001ea2:	667b      	str	r3, [r7, #100]	; 0x64
 8001ea4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ea8:	663b      	str	r3, [r7, #96]	; 0x60
 8001eaa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001eac:	fa93 f3a3 	rbit	r3, r3
 8001eb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001eb2:	4b67      	ldr	r3, [pc, #412]	; (8002050 <HAL_RCC_ClockConfig+0x260>)
 8001eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001eba:	65ba      	str	r2, [r7, #88]	; 0x58
 8001ebc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001ebe:	fa92 f2a2 	rbit	r2, r2
 8001ec2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001ec4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001ec6:	fab2 f282 	clz	r2, r2
 8001eca:	b2d2      	uxtb	r2, r2
 8001ecc:	f042 0220 	orr.w	r2, r2, #32
 8001ed0:	b2d2      	uxtb	r2, r2
 8001ed2:	f002 021f 	and.w	r2, r2, #31
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	fa01 f202 	lsl.w	r2, r1, r2
 8001edc:	4013      	ands	r3, r2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d17b      	bne.n	8001fda <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e0f3      	b.n	80020ce <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d13c      	bne.n	8001f68 <HAL_RCC_ClockConfig+0x178>
 8001eee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ef2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ef6:	fa93 f3a3 	rbit	r3, r3
 8001efa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001efc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001efe:	fab3 f383 	clz	r3, r3
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	095b      	lsrs	r3, r3, #5
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	f043 0301 	orr.w	r3, r3, #1
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d102      	bne.n	8001f18 <HAL_RCC_ClockConfig+0x128>
 8001f12:	4b4f      	ldr	r3, [pc, #316]	; (8002050 <HAL_RCC_ClockConfig+0x260>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	e00f      	b.n	8001f38 <HAL_RCC_ClockConfig+0x148>
 8001f18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f1c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f20:	fa93 f3a3 	rbit	r3, r3
 8001f24:	647b      	str	r3, [r7, #68]	; 0x44
 8001f26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f2a:	643b      	str	r3, [r7, #64]	; 0x40
 8001f2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f2e:	fa93 f3a3 	rbit	r3, r3
 8001f32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f34:	4b46      	ldr	r3, [pc, #280]	; (8002050 <HAL_RCC_ClockConfig+0x260>)
 8001f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f3c:	63ba      	str	r2, [r7, #56]	; 0x38
 8001f3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f40:	fa92 f2a2 	rbit	r2, r2
 8001f44:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001f46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f48:	fab2 f282 	clz	r2, r2
 8001f4c:	b2d2      	uxtb	r2, r2
 8001f4e:	f042 0220 	orr.w	r2, r2, #32
 8001f52:	b2d2      	uxtb	r2, r2
 8001f54:	f002 021f 	and.w	r2, r2, #31
 8001f58:	2101      	movs	r1, #1
 8001f5a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f5e:	4013      	ands	r3, r2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d13a      	bne.n	8001fda <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e0b2      	b.n	80020ce <HAL_RCC_ClockConfig+0x2de>
 8001f68:	2302      	movs	r3, #2
 8001f6a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f6e:	fa93 f3a3 	rbit	r3, r3
 8001f72:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f76:	fab3 f383 	clz	r3, r3
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	095b      	lsrs	r3, r3, #5
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d102      	bne.n	8001f90 <HAL_RCC_ClockConfig+0x1a0>
 8001f8a:	4b31      	ldr	r3, [pc, #196]	; (8002050 <HAL_RCC_ClockConfig+0x260>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	e00d      	b.n	8001fac <HAL_RCC_ClockConfig+0x1bc>
 8001f90:	2302      	movs	r3, #2
 8001f92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f96:	fa93 f3a3 	rbit	r3, r3
 8001f9a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	623b      	str	r3, [r7, #32]
 8001fa0:	6a3b      	ldr	r3, [r7, #32]
 8001fa2:	fa93 f3a3 	rbit	r3, r3
 8001fa6:	61fb      	str	r3, [r7, #28]
 8001fa8:	4b29      	ldr	r3, [pc, #164]	; (8002050 <HAL_RCC_ClockConfig+0x260>)
 8001faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fac:	2202      	movs	r2, #2
 8001fae:	61ba      	str	r2, [r7, #24]
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	fa92 f2a2 	rbit	r2, r2
 8001fb6:	617a      	str	r2, [r7, #20]
  return result;
 8001fb8:	697a      	ldr	r2, [r7, #20]
 8001fba:	fab2 f282 	clz	r2, r2
 8001fbe:	b2d2      	uxtb	r2, r2
 8001fc0:	f042 0220 	orr.w	r2, r2, #32
 8001fc4:	b2d2      	uxtb	r2, r2
 8001fc6:	f002 021f 	and.w	r2, r2, #31
 8001fca:	2101      	movs	r1, #1
 8001fcc:	fa01 f202 	lsl.w	r2, r1, r2
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e079      	b.n	80020ce <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fda:	4b1d      	ldr	r3, [pc, #116]	; (8002050 <HAL_RCC_ClockConfig+0x260>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f023 0203 	bic.w	r2, r3, #3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	491a      	ldr	r1, [pc, #104]	; (8002050 <HAL_RCC_ClockConfig+0x260>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fec:	f7fe fb58 	bl	80006a0 <HAL_GetTick>
 8001ff0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ff2:	e00a      	b.n	800200a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ff4:	f7fe fb54 	bl	80006a0 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002002:	4293      	cmp	r3, r2
 8002004:	d901      	bls.n	800200a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e061      	b.n	80020ce <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800200a:	4b11      	ldr	r3, [pc, #68]	; (8002050 <HAL_RCC_ClockConfig+0x260>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f003 020c 	and.w	r2, r3, #12
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	429a      	cmp	r2, r3
 800201a:	d1eb      	bne.n	8001ff4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800201c:	4b0b      	ldr	r3, [pc, #44]	; (800204c <HAL_RCC_ClockConfig+0x25c>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0307 	and.w	r3, r3, #7
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	429a      	cmp	r2, r3
 8002028:	d214      	bcs.n	8002054 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800202a:	4b08      	ldr	r3, [pc, #32]	; (800204c <HAL_RCC_ClockConfig+0x25c>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f023 0207 	bic.w	r2, r3, #7
 8002032:	4906      	ldr	r1, [pc, #24]	; (800204c <HAL_RCC_ClockConfig+0x25c>)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	4313      	orrs	r3, r2
 8002038:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800203a:	4b04      	ldr	r3, [pc, #16]	; (800204c <HAL_RCC_ClockConfig+0x25c>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	429a      	cmp	r2, r3
 8002046:	d005      	beq.n	8002054 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e040      	b.n	80020ce <HAL_RCC_ClockConfig+0x2de>
 800204c:	40022000 	.word	0x40022000
 8002050:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	2b00      	cmp	r3, #0
 800205e:	d008      	beq.n	8002072 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002060:	4b1d      	ldr	r3, [pc, #116]	; (80020d8 <HAL_RCC_ClockConfig+0x2e8>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	491a      	ldr	r1, [pc, #104]	; (80020d8 <HAL_RCC_ClockConfig+0x2e8>)
 800206e:	4313      	orrs	r3, r2
 8002070:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0308 	and.w	r3, r3, #8
 800207a:	2b00      	cmp	r3, #0
 800207c:	d009      	beq.n	8002092 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800207e:	4b16      	ldr	r3, [pc, #88]	; (80020d8 <HAL_RCC_ClockConfig+0x2e8>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	4912      	ldr	r1, [pc, #72]	; (80020d8 <HAL_RCC_ClockConfig+0x2e8>)
 800208e:	4313      	orrs	r3, r2
 8002090:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002092:	f000 f829 	bl	80020e8 <HAL_RCC_GetSysClockFreq>
 8002096:	4601      	mov	r1, r0
 8002098:	4b0f      	ldr	r3, [pc, #60]	; (80020d8 <HAL_RCC_ClockConfig+0x2e8>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020a0:	22f0      	movs	r2, #240	; 0xf0
 80020a2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	fa92 f2a2 	rbit	r2, r2
 80020aa:	60fa      	str	r2, [r7, #12]
  return result;
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	fab2 f282 	clz	r2, r2
 80020b2:	b2d2      	uxtb	r2, r2
 80020b4:	40d3      	lsrs	r3, r2
 80020b6:	4a09      	ldr	r2, [pc, #36]	; (80020dc <HAL_RCC_ClockConfig+0x2ec>)
 80020b8:	5cd3      	ldrb	r3, [r2, r3]
 80020ba:	fa21 f303 	lsr.w	r3, r1, r3
 80020be:	4a08      	ldr	r2, [pc, #32]	; (80020e0 <HAL_RCC_ClockConfig+0x2f0>)
 80020c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80020c2:	4b08      	ldr	r3, [pc, #32]	; (80020e4 <HAL_RCC_ClockConfig+0x2f4>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7fe faa6 	bl	8000618 <HAL_InitTick>
  
  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3778      	adds	r7, #120	; 0x78
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40021000 	.word	0x40021000
 80020dc:	0800373c 	.word	0x0800373c
 80020e0:	20000004 	.word	0x20000004
 80020e4:	20000008 	.word	0x20000008

080020e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b087      	sub	sp, #28
 80020ec:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020ee:	2300      	movs	r3, #0
 80020f0:	60fb      	str	r3, [r7, #12]
 80020f2:	2300      	movs	r3, #0
 80020f4:	60bb      	str	r3, [r7, #8]
 80020f6:	2300      	movs	r3, #0
 80020f8:	617b      	str	r3, [r7, #20]
 80020fa:	2300      	movs	r3, #0
 80020fc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80020fe:	2300      	movs	r3, #0
 8002100:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002102:	4b1e      	ldr	r3, [pc, #120]	; (800217c <HAL_RCC_GetSysClockFreq+0x94>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f003 030c 	and.w	r3, r3, #12
 800210e:	2b04      	cmp	r3, #4
 8002110:	d002      	beq.n	8002118 <HAL_RCC_GetSysClockFreq+0x30>
 8002112:	2b08      	cmp	r3, #8
 8002114:	d003      	beq.n	800211e <HAL_RCC_GetSysClockFreq+0x36>
 8002116:	e026      	b.n	8002166 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002118:	4b19      	ldr	r3, [pc, #100]	; (8002180 <HAL_RCC_GetSysClockFreq+0x98>)
 800211a:	613b      	str	r3, [r7, #16]
      break;
 800211c:	e026      	b.n	800216c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	0c9b      	lsrs	r3, r3, #18
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	4a17      	ldr	r2, [pc, #92]	; (8002184 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002128:	5cd3      	ldrb	r3, [r2, r3]
 800212a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 800212c:	4b13      	ldr	r3, [pc, #76]	; (800217c <HAL_RCC_GetSysClockFreq+0x94>)
 800212e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002130:	f003 030f 	and.w	r3, r3, #15
 8002134:	4a14      	ldr	r2, [pc, #80]	; (8002188 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002136:	5cd3      	ldrb	r3, [r2, r3]
 8002138:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d008      	beq.n	8002156 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002144:	4a0e      	ldr	r2, [pc, #56]	; (8002180 <HAL_RCC_GetSysClockFreq+0x98>)
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	fbb2 f2f3 	udiv	r2, r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	fb02 f303 	mul.w	r3, r2, r3
 8002152:	617b      	str	r3, [r7, #20]
 8002154:	e004      	b.n	8002160 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a0c      	ldr	r2, [pc, #48]	; (800218c <HAL_RCC_GetSysClockFreq+0xa4>)
 800215a:	fb02 f303 	mul.w	r3, r2, r3
 800215e:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	613b      	str	r3, [r7, #16]
      break;
 8002164:	e002      	b.n	800216c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002166:	4b06      	ldr	r3, [pc, #24]	; (8002180 <HAL_RCC_GetSysClockFreq+0x98>)
 8002168:	613b      	str	r3, [r7, #16]
      break;
 800216a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800216c:	693b      	ldr	r3, [r7, #16]
}
 800216e:	4618      	mov	r0, r3
 8002170:	371c      	adds	r7, #28
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	40021000 	.word	0x40021000
 8002180:	007a1200 	.word	0x007a1200
 8002184:	08003754 	.word	0x08003754
 8002188:	08003764 	.word	0x08003764
 800218c:	003d0900 	.word	0x003d0900

08002190 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002194:	4b03      	ldr	r3, [pc, #12]	; (80021a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002196:	681b      	ldr	r3, [r3, #0]
}
 8002198:	4618      	mov	r0, r3
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	20000004 	.word	0x20000004

080021a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80021ae:	f7ff ffef 	bl	8002190 <HAL_RCC_GetHCLKFreq>
 80021b2:	4601      	mov	r1, r0
 80021b4:	4b0b      	ldr	r3, [pc, #44]	; (80021e4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80021bc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80021c0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	fa92 f2a2 	rbit	r2, r2
 80021c8:	603a      	str	r2, [r7, #0]
  return result;
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	fab2 f282 	clz	r2, r2
 80021d0:	b2d2      	uxtb	r2, r2
 80021d2:	40d3      	lsrs	r3, r2
 80021d4:	4a04      	ldr	r2, [pc, #16]	; (80021e8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80021d6:	5cd3      	ldrb	r3, [r2, r3]
 80021d8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80021dc:	4618      	mov	r0, r3
 80021de:	3708      	adds	r7, #8
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	40021000 	.word	0x40021000
 80021e8:	0800374c 	.word	0x0800374c

080021ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80021f2:	f7ff ffcd 	bl	8002190 <HAL_RCC_GetHCLKFreq>
 80021f6:	4601      	mov	r1, r0
 80021f8:	4b0b      	ldr	r3, [pc, #44]	; (8002228 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002200:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002204:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	fa92 f2a2 	rbit	r2, r2
 800220c:	603a      	str	r2, [r7, #0]
  return result;
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	fab2 f282 	clz	r2, r2
 8002214:	b2d2      	uxtb	r2, r2
 8002216:	40d3      	lsrs	r3, r2
 8002218:	4a04      	ldr	r2, [pc, #16]	; (800222c <HAL_RCC_GetPCLK2Freq+0x40>)
 800221a:	5cd3      	ldrb	r3, [r2, r3]
 800221c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002220:	4618      	mov	r0, r3
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	40021000 	.word	0x40021000
 800222c:	0800374c 	.word	0x0800374c

08002230 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b092      	sub	sp, #72	; 0x48
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002238:	2300      	movs	r3, #0
 800223a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800223c:	2300      	movs	r3, #0
 800223e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002240:	2300      	movs	r3, #0
 8002242:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800224e:	2b00      	cmp	r3, #0
 8002250:	f000 80d4 	beq.w	80023fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002254:	4b4e      	ldr	r3, [pc, #312]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002256:	69db      	ldr	r3, [r3, #28]
 8002258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d10e      	bne.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002260:	4b4b      	ldr	r3, [pc, #300]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002262:	69db      	ldr	r3, [r3, #28]
 8002264:	4a4a      	ldr	r2, [pc, #296]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800226a:	61d3      	str	r3, [r2, #28]
 800226c:	4b48      	ldr	r3, [pc, #288]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800226e:	69db      	ldr	r3, [r3, #28]
 8002270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002274:	60bb      	str	r3, [r7, #8]
 8002276:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002278:	2301      	movs	r3, #1
 800227a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800227e:	4b45      	ldr	r3, [pc, #276]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002286:	2b00      	cmp	r3, #0
 8002288:	d118      	bne.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800228a:	4b42      	ldr	r3, [pc, #264]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a41      	ldr	r2, [pc, #260]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002294:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002296:	f7fe fa03 	bl	80006a0 <HAL_GetTick>
 800229a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800229c:	e008      	b.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800229e:	f7fe f9ff 	bl	80006a0 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b64      	cmp	r3, #100	; 0x64
 80022aa:	d901      	bls.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e169      	b.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b0:	4b38      	ldr	r3, [pc, #224]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d0f0      	beq.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022bc:	4b34      	ldr	r3, [pc, #208]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022be:	6a1b      	ldr	r3, [r3, #32]
 80022c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f000 8084 	beq.w	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022d8:	429a      	cmp	r2, r3
 80022da:	d07c      	beq.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022dc:	4b2c      	ldr	r3, [pc, #176]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022de:	6a1b      	ldr	r3, [r3, #32]
 80022e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ee:	fa93 f3a3 	rbit	r3, r3
 80022f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80022f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022f6:	fab3 f383 	clz	r3, r3
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	461a      	mov	r2, r3
 80022fe:	4b26      	ldr	r3, [pc, #152]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002300:	4413      	add	r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	461a      	mov	r2, r3
 8002306:	2301      	movs	r3, #1
 8002308:	6013      	str	r3, [r2, #0]
 800230a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800230e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002312:	fa93 f3a3 	rbit	r3, r3
 8002316:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800231a:	fab3 f383 	clz	r3, r3
 800231e:	b2db      	uxtb	r3, r3
 8002320:	461a      	mov	r2, r3
 8002322:	4b1d      	ldr	r3, [pc, #116]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002324:	4413      	add	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	461a      	mov	r2, r3
 800232a:	2300      	movs	r3, #0
 800232c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800232e:	4a18      	ldr	r2, [pc, #96]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002332:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	2b00      	cmp	r3, #0
 800233c:	d04b      	beq.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233e:	f7fe f9af 	bl	80006a0 <HAL_GetTick>
 8002342:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002344:	e00a      	b.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002346:	f7fe f9ab 	bl	80006a0 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	f241 3288 	movw	r2, #5000	; 0x1388
 8002354:	4293      	cmp	r3, r2
 8002356:	d901      	bls.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e113      	b.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800235c:	2302      	movs	r3, #2
 800235e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002362:	fa93 f3a3 	rbit	r3, r3
 8002366:	627b      	str	r3, [r7, #36]	; 0x24
 8002368:	2302      	movs	r3, #2
 800236a:	623b      	str	r3, [r7, #32]
 800236c:	6a3b      	ldr	r3, [r7, #32]
 800236e:	fa93 f3a3 	rbit	r3, r3
 8002372:	61fb      	str	r3, [r7, #28]
  return result;
 8002374:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002376:	fab3 f383 	clz	r3, r3
 800237a:	b2db      	uxtb	r3, r3
 800237c:	095b      	lsrs	r3, r3, #5
 800237e:	b2db      	uxtb	r3, r3
 8002380:	f043 0302 	orr.w	r3, r3, #2
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d108      	bne.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800238a:	4b01      	ldr	r3, [pc, #4]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	e00d      	b.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002390:	40021000 	.word	0x40021000
 8002394:	40007000 	.word	0x40007000
 8002398:	10908100 	.word	0x10908100
 800239c:	2302      	movs	r3, #2
 800239e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	fa93 f3a3 	rbit	r3, r3
 80023a6:	617b      	str	r3, [r7, #20]
 80023a8:	4b78      	ldr	r3, [pc, #480]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ac:	2202      	movs	r2, #2
 80023ae:	613a      	str	r2, [r7, #16]
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	fa92 f2a2 	rbit	r2, r2
 80023b6:	60fa      	str	r2, [r7, #12]
  return result;
 80023b8:	68fa      	ldr	r2, [r7, #12]
 80023ba:	fab2 f282 	clz	r2, r2
 80023be:	b2d2      	uxtb	r2, r2
 80023c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023c4:	b2d2      	uxtb	r2, r2
 80023c6:	f002 021f 	and.w	r2, r2, #31
 80023ca:	2101      	movs	r1, #1
 80023cc:	fa01 f202 	lsl.w	r2, r1, r2
 80023d0:	4013      	ands	r3, r2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d0b7      	beq.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80023d6:	4b6d      	ldr	r3, [pc, #436]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	496a      	ldr	r1, [pc, #424]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023e8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d105      	bne.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023f0:	4b66      	ldr	r3, [pc, #408]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023f2:	69db      	ldr	r3, [r3, #28]
 80023f4:	4a65      	ldr	r2, [pc, #404]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023fa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	2b00      	cmp	r3, #0
 8002406:	d008      	beq.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002408:	4b60      	ldr	r3, [pc, #384]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800240a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240c:	f023 0203 	bic.w	r2, r3, #3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	495d      	ldr	r1, [pc, #372]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002416:	4313      	orrs	r3, r2
 8002418:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d008      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002426:	4b59      	ldr	r3, [pc, #356]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	4956      	ldr	r1, [pc, #344]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002434:	4313      	orrs	r3, r2
 8002436:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b00      	cmp	r3, #0
 8002442:	d008      	beq.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002444:	4b51      	ldr	r3, [pc, #324]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002448:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	494e      	ldr	r1, [pc, #312]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002452:	4313      	orrs	r3, r2
 8002454:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0320 	and.w	r3, r3, #32
 800245e:	2b00      	cmp	r3, #0
 8002460:	d008      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002462:	4b4a      	ldr	r3, [pc, #296]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	f023 0210 	bic.w	r2, r3, #16
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	4947      	ldr	r1, [pc, #284]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002470:	4313      	orrs	r3, r2
 8002472:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d008      	beq.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002480:	4b42      	ldr	r3, [pc, #264]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800248c:	493f      	ldr	r1, [pc, #252]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800248e:	4313      	orrs	r3, r2
 8002490:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800249a:	2b00      	cmp	r3, #0
 800249c:	d008      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800249e:	4b3b      	ldr	r3, [pc, #236]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	f023 0220 	bic.w	r2, r3, #32
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a1b      	ldr	r3, [r3, #32]
 80024aa:	4938      	ldr	r1, [pc, #224]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0308 	and.w	r3, r3, #8
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d008      	beq.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024bc:	4b33      	ldr	r3, [pc, #204]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	695b      	ldr	r3, [r3, #20]
 80024c8:	4930      	ldr	r1, [pc, #192]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0310 	and.w	r3, r3, #16
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d008      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024da:	4b2c      	ldr	r3, [pc, #176]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	4929      	ldr	r1, [pc, #164]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d008      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80024f8:	4b24      	ldr	r3, [pc, #144]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002504:	4921      	ldr	r1, [pc, #132]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002506:	4313      	orrs	r3, r2
 8002508:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002512:	2b00      	cmp	r3, #0
 8002514:	d008      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002516:	4b1d      	ldr	r3, [pc, #116]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002522:	491a      	ldr	r1, [pc, #104]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002524:	4313      	orrs	r3, r2
 8002526:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002530:	2b00      	cmp	r3, #0
 8002532:	d008      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002534:	4b15      	ldr	r3, [pc, #84]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002538:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002540:	4912      	ldr	r1, [pc, #72]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002542:	4313      	orrs	r3, r2
 8002544:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d008      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002552:	4b0e      	ldr	r3, [pc, #56]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002556:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	490b      	ldr	r1, [pc, #44]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002560:	4313      	orrs	r3, r2
 8002562:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d008      	beq.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002570:	4b06      	ldr	r3, [pc, #24]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002574:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800257c:	4903      	ldr	r1, [pc, #12]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800257e:	4313      	orrs	r3, r2
 8002580:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	3748      	adds	r7, #72	; 0x48
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	40021000 	.word	0x40021000

08002590 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e040      	b.n	8002624 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d106      	bne.n	80025b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f7fd ff60 	bl	8000478 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2224      	movs	r2, #36	; 0x24
 80025bc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f022 0201 	bic.w	r2, r2, #1
 80025cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d002      	beq.n	80025dc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 fd56 	bl	8003088 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f000 fb7f 	bl	8002ce0 <UART_SetConfig>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d101      	bne.n	80025ec <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e01b      	b.n	8002624 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	685a      	ldr	r2, [r3, #4]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	689a      	ldr	r2, [r3, #8]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800260a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f042 0201 	orr.w	r2, r2, #1
 800261a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f000 fdd5 	bl	80031cc <UART_CheckIdleState>
 8002622:	4603      	mov	r3, r0
}
 8002624:	4618      	mov	r0, r3
 8002626:	3708      	adds	r7, #8
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800262c:	b480      	push	{r7}
 800262e:	b08b      	sub	sp, #44	; 0x2c
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	4613      	mov	r3, r2
 8002638:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800263e:	2b20      	cmp	r3, #32
 8002640:	d147      	bne.n	80026d2 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d002      	beq.n	800264e <HAL_UART_Transmit_IT+0x22>
 8002648:	88fb      	ldrh	r3, [r7, #6]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e040      	b.n	80026d4 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	68ba      	ldr	r2, [r7, #8]
 8002656:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	88fa      	ldrh	r2, [r7, #6]
 800265c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	88fa      	ldrh	r2, [r7, #6]
 8002664:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2200      	movs	r2, #0
 800266c:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2200      	movs	r2, #0
 8002672:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2221      	movs	r2, #33	; 0x21
 800267a:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002684:	d107      	bne.n	8002696 <HAL_UART_Transmit_IT+0x6a>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d103      	bne.n	8002696 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	4a13      	ldr	r2, [pc, #76]	; (80026e0 <HAL_UART_Transmit_IT+0xb4>)
 8002692:	66da      	str	r2, [r3, #108]	; 0x6c
 8002694:	e002      	b.n	800269c <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	4a12      	ldr	r2, [pc, #72]	; (80026e4 <HAL_UART_Transmit_IT+0xb8>)
 800269a:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	e853 3f00 	ldrex	r3, [r3]
 80026a8:	613b      	str	r3, [r7, #16]
   return(result);
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026b0:	627b      	str	r3, [r7, #36]	; 0x24
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	461a      	mov	r2, r3
 80026b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ba:	623b      	str	r3, [r7, #32]
 80026bc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026be:	69f9      	ldr	r1, [r7, #28]
 80026c0:	6a3a      	ldr	r2, [r7, #32]
 80026c2:	e841 2300 	strex	r3, r2, [r1]
 80026c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1e6      	bne.n	800269c <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 80026ce:	2300      	movs	r3, #0
 80026d0:	e000      	b.n	80026d4 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80026d2:	2302      	movs	r3, #2
  }
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	372c      	adds	r7, #44	; 0x2c
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	080035a3 	.word	0x080035a3
 80026e4:	080034eb 	.word	0x080034eb

080026e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b0ba      	sub	sp, #232	; 0xe8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	69db      	ldr	r3, [r3, #28]
 80026f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800270e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002712:	f640 030f 	movw	r3, #2063	; 0x80f
 8002716:	4013      	ands	r3, r2
 8002718:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800271c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002720:	2b00      	cmp	r3, #0
 8002722:	d115      	bne.n	8002750 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002728:	f003 0320 	and.w	r3, r3, #32
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00f      	beq.n	8002750 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002734:	f003 0320 	and.w	r3, r3, #32
 8002738:	2b00      	cmp	r3, #0
 800273a:	d009      	beq.n	8002750 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002740:	2b00      	cmp	r3, #0
 8002742:	f000 82ab 	beq.w	8002c9c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	4798      	blx	r3
      }
      return;
 800274e:	e2a5      	b.n	8002c9c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002750:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002754:	2b00      	cmp	r3, #0
 8002756:	f000 8117 	beq.w	8002988 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800275a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b00      	cmp	r3, #0
 8002764:	d106      	bne.n	8002774 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002766:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800276a:	4b85      	ldr	r3, [pc, #532]	; (8002980 <HAL_UART_IRQHandler+0x298>)
 800276c:	4013      	ands	r3, r2
 800276e:	2b00      	cmp	r3, #0
 8002770:	f000 810a 	beq.w	8002988 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	2b00      	cmp	r3, #0
 800277e:	d011      	beq.n	80027a4 <HAL_UART_IRQHandler+0xbc>
 8002780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002788:	2b00      	cmp	r3, #0
 800278a:	d00b      	beq.n	80027a4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2201      	movs	r2, #1
 8002792:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800279a:	f043 0201 	orr.w	r2, r3, #1
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80027a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d011      	beq.n	80027d4 <HAL_UART_IRQHandler+0xec>
 80027b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d00b      	beq.n	80027d4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2202      	movs	r2, #2
 80027c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027ca:	f043 0204 	orr.w	r2, r3, #4
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80027d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027d8:	f003 0304 	and.w	r3, r3, #4
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d011      	beq.n	8002804 <HAL_UART_IRQHandler+0x11c>
 80027e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027e4:	f003 0301 	and.w	r3, r3, #1
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d00b      	beq.n	8002804 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2204      	movs	r2, #4
 80027f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027fa:	f043 0202 	orr.w	r2, r3, #2
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002804:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002808:	f003 0308 	and.w	r3, r3, #8
 800280c:	2b00      	cmp	r3, #0
 800280e:	d017      	beq.n	8002840 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002810:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002814:	f003 0320 	and.w	r3, r3, #32
 8002818:	2b00      	cmp	r3, #0
 800281a:	d105      	bne.n	8002828 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800281c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002820:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002824:	2b00      	cmp	r3, #0
 8002826:	d00b      	beq.n	8002840 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2208      	movs	r2, #8
 800282e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002836:	f043 0208 	orr.w	r2, r3, #8
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002844:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002848:	2b00      	cmp	r3, #0
 800284a:	d012      	beq.n	8002872 <HAL_UART_IRQHandler+0x18a>
 800284c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002850:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d00c      	beq.n	8002872 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002860:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002868:	f043 0220 	orr.w	r2, r3, #32
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002878:	2b00      	cmp	r3, #0
 800287a:	f000 8211 	beq.w	8002ca0 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800287e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002882:	f003 0320 	and.w	r3, r3, #32
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00d      	beq.n	80028a6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800288a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800288e:	f003 0320 	and.w	r3, r3, #32
 8002892:	2b00      	cmp	r3, #0
 8002894:	d007      	beq.n	80028a6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800289a:	2b00      	cmp	r3, #0
 800289c:	d003      	beq.n	80028a6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ba:	2b40      	cmp	r3, #64	; 0x40
 80028bc:	d005      	beq.n	80028ca <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80028be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80028c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d04f      	beq.n	800296a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 fd93 	bl	80033f6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028da:	2b40      	cmp	r3, #64	; 0x40
 80028dc:	d141      	bne.n	8002962 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	3308      	adds	r3, #8
 80028e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80028ec:	e853 3f00 	ldrex	r3, [r3]
 80028f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80028f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	3308      	adds	r3, #8
 8002906:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800290a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800290e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002912:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002916:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800291a:	e841 2300 	strex	r3, r2, [r1]
 800291e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002922:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1d9      	bne.n	80028de <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800292e:	2b00      	cmp	r3, #0
 8002930:	d013      	beq.n	800295a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002936:	4a13      	ldr	r2, [pc, #76]	; (8002984 <HAL_UART_IRQHandler+0x29c>)
 8002938:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800293e:	4618      	mov	r0, r3
 8002940:	f7fe f82d 	bl	800099e <HAL_DMA_Abort_IT>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d017      	beq.n	800297a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800294e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002954:	4610      	mov	r0, r2
 8002956:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002958:	e00f      	b.n	800297a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 f9aa 	bl	8002cb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002960:	e00b      	b.n	800297a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f000 f9a6 	bl	8002cb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002968:	e007      	b.n	800297a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 f9a2 	bl	8002cb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002978:	e192      	b.n	8002ca0 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800297a:	bf00      	nop
    return;
 800297c:	e190      	b.n	8002ca0 <HAL_UART_IRQHandler+0x5b8>
 800297e:	bf00      	nop
 8002980:	04000120 	.word	0x04000120
 8002984:	080034bf 	.word	0x080034bf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800298c:	2b01      	cmp	r3, #1
 800298e:	f040 814b 	bne.w	8002c28 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002996:	f003 0310 	and.w	r3, r3, #16
 800299a:	2b00      	cmp	r3, #0
 800299c:	f000 8144 	beq.w	8002c28 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80029a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029a4:	f003 0310 	and.w	r3, r3, #16
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f000 813d 	beq.w	8002c28 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2210      	movs	r2, #16
 80029b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c0:	2b40      	cmp	r3, #64	; 0x40
 80029c2:	f040 80b5 	bne.w	8002b30 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80029d2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f000 8164 	beq.w	8002ca4 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80029e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80029e6:	429a      	cmp	r2, r3
 80029e8:	f080 815c 	bcs.w	8002ca4 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80029f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	2b20      	cmp	r3, #32
 80029fe:	f000 8086 	beq.w	8002b0e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a0e:	e853 3f00 	ldrex	r3, [r3]
 8002a12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002a16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a1e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	461a      	mov	r2, r3
 8002a28:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002a2c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002a30:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a34:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002a38:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002a3c:	e841 2300 	strex	r3, r2, [r1]
 8002a40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002a44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1da      	bne.n	8002a02 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	3308      	adds	r3, #8
 8002a52:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a56:	e853 3f00 	ldrex	r3, [r3]
 8002a5a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002a5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a5e:	f023 0301 	bic.w	r3, r3, #1
 8002a62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	3308      	adds	r3, #8
 8002a6c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002a70:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002a74:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a76:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002a78:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002a7c:	e841 2300 	strex	r3, r2, [r1]
 8002a80:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002a82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1e1      	bne.n	8002a4c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	3308      	adds	r3, #8
 8002a8e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a92:	e853 3f00 	ldrex	r3, [r3]
 8002a96:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002a98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	3308      	adds	r3, #8
 8002aa8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002aac:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002aae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ab0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002ab2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002ab4:	e841 2300 	strex	r3, r2, [r1]
 8002ab8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002aba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1e3      	bne.n	8002a88 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2220      	movs	r2, #32
 8002ac4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ad4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ad6:	e853 3f00 	ldrex	r3, [r3]
 8002ada:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002adc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ade:	f023 0310 	bic.w	r3, r3, #16
 8002ae2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	461a      	mov	r2, r3
 8002aec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002af0:	65bb      	str	r3, [r7, #88]	; 0x58
 8002af2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002af4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002af6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002af8:	e841 2300 	strex	r3, r2, [r1]
 8002afc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002afe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d1e4      	bne.n	8002ace <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7fd ff0a 	bl	8000922 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2202      	movs	r2, #2
 8002b12:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	4619      	mov	r1, r3
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f000 f8cd 	bl	8002cc8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002b2e:	e0b9      	b.n	8002ca4 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f000 80ab 	beq.w	8002ca8 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8002b52:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f000 80a6 	beq.w	8002ca8 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b64:	e853 3f00 	ldrex	r3, [r3]
 8002b68:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002b70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	461a      	mov	r2, r3
 8002b7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b7e:	647b      	str	r3, [r7, #68]	; 0x44
 8002b80:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b82:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002b84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b86:	e841 2300 	strex	r3, r2, [r1]
 8002b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002b8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1e4      	bne.n	8002b5c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	3308      	adds	r3, #8
 8002b98:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9c:	e853 3f00 	ldrex	r3, [r3]
 8002ba0:	623b      	str	r3, [r7, #32]
   return(result);
 8002ba2:	6a3b      	ldr	r3, [r7, #32]
 8002ba4:	f023 0301 	bic.w	r3, r3, #1
 8002ba8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	3308      	adds	r3, #8
 8002bb2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002bb6:	633a      	str	r2, [r7, #48]	; 0x30
 8002bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002bbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bbe:	e841 2300 	strex	r3, r2, [r1]
 8002bc2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1e3      	bne.n	8002b92 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2220      	movs	r2, #32
 8002bce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	e853 3f00 	ldrex	r3, [r3]
 8002bea:	60fb      	str	r3, [r7, #12]
   return(result);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f023 0310 	bic.w	r3, r3, #16
 8002bf2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c00:	61fb      	str	r3, [r7, #28]
 8002c02:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c04:	69b9      	ldr	r1, [r7, #24]
 8002c06:	69fa      	ldr	r2, [r7, #28]
 8002c08:	e841 2300 	strex	r3, r2, [r1]
 8002c0c:	617b      	str	r3, [r7, #20]
   return(result);
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1e4      	bne.n	8002bde <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2202      	movs	r2, #2
 8002c18:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002c1e:	4619      	mov	r1, r3
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 f851 	bl	8002cc8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c26:	e03f      	b.n	8002ca8 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002c28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00e      	beq.n	8002c52 <HAL_UART_IRQHandler+0x56a>
 8002c34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d008      	beq.n	8002c52 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002c48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 fd33 	bl	80036b6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002c50:	e02d      	b.n	8002cae <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00e      	beq.n	8002c7c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002c5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d008      	beq.n	8002c7c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d01c      	beq.n	8002cac <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	4798      	blx	r3
    }
    return;
 8002c7a:	e017      	b.n	8002cac <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002c7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d012      	beq.n	8002cae <HAL_UART_IRQHandler+0x5c6>
 8002c88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00c      	beq.n	8002cae <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f000 fce4 	bl	8003662 <UART_EndTransmit_IT>
    return;
 8002c9a:	e008      	b.n	8002cae <HAL_UART_IRQHandler+0x5c6>
      return;
 8002c9c:	bf00      	nop
 8002c9e:	e006      	b.n	8002cae <HAL_UART_IRQHandler+0x5c6>
    return;
 8002ca0:	bf00      	nop
 8002ca2:	e004      	b.n	8002cae <HAL_UART_IRQHandler+0x5c6>
      return;
 8002ca4:	bf00      	nop
 8002ca6:	e002      	b.n	8002cae <HAL_UART_IRQHandler+0x5c6>
      return;
 8002ca8:	bf00      	nop
 8002caa:	e000      	b.n	8002cae <HAL_UART_IRQHandler+0x5c6>
    return;
 8002cac:	bf00      	nop
  }

}
 8002cae:	37e8      	adds	r7, #232	; 0xe8
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b088      	sub	sp, #32
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	431a      	orrs	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	431a      	orrs	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	69db      	ldr	r3, [r3, #28]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002d0e:	f023 030c 	bic.w	r3, r3, #12
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	6812      	ldr	r2, [r2, #0]
 8002d16:	6979      	ldr	r1, [r7, #20]
 8002d18:	430b      	orrs	r3, r1
 8002d1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68da      	ldr	r2, [r3, #12]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	697a      	ldr	r2, [r7, #20]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	430a      	orrs	r2, r1
 8002d54:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4aa7      	ldr	r2, [pc, #668]	; (8002ff8 <UART_SetConfig+0x318>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d120      	bne.n	8002da2 <UART_SetConfig+0xc2>
 8002d60:	4ba6      	ldr	r3, [pc, #664]	; (8002ffc <UART_SetConfig+0x31c>)
 8002d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d64:	f003 0303 	and.w	r3, r3, #3
 8002d68:	2b03      	cmp	r3, #3
 8002d6a:	d817      	bhi.n	8002d9c <UART_SetConfig+0xbc>
 8002d6c:	a201      	add	r2, pc, #4	; (adr r2, 8002d74 <UART_SetConfig+0x94>)
 8002d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d72:	bf00      	nop
 8002d74:	08002d85 	.word	0x08002d85
 8002d78:	08002d91 	.word	0x08002d91
 8002d7c:	08002d97 	.word	0x08002d97
 8002d80:	08002d8b 	.word	0x08002d8b
 8002d84:	2301      	movs	r3, #1
 8002d86:	77fb      	strb	r3, [r7, #31]
 8002d88:	e0b5      	b.n	8002ef6 <UART_SetConfig+0x216>
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	77fb      	strb	r3, [r7, #31]
 8002d8e:	e0b2      	b.n	8002ef6 <UART_SetConfig+0x216>
 8002d90:	2304      	movs	r3, #4
 8002d92:	77fb      	strb	r3, [r7, #31]
 8002d94:	e0af      	b.n	8002ef6 <UART_SetConfig+0x216>
 8002d96:	2308      	movs	r3, #8
 8002d98:	77fb      	strb	r3, [r7, #31]
 8002d9a:	e0ac      	b.n	8002ef6 <UART_SetConfig+0x216>
 8002d9c:	2310      	movs	r3, #16
 8002d9e:	77fb      	strb	r3, [r7, #31]
 8002da0:	e0a9      	b.n	8002ef6 <UART_SetConfig+0x216>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a96      	ldr	r2, [pc, #600]	; (8003000 <UART_SetConfig+0x320>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d124      	bne.n	8002df6 <UART_SetConfig+0x116>
 8002dac:	4b93      	ldr	r3, [pc, #588]	; (8002ffc <UART_SetConfig+0x31c>)
 8002dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002db4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002db8:	d011      	beq.n	8002dde <UART_SetConfig+0xfe>
 8002dba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002dbe:	d817      	bhi.n	8002df0 <UART_SetConfig+0x110>
 8002dc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002dc4:	d011      	beq.n	8002dea <UART_SetConfig+0x10a>
 8002dc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002dca:	d811      	bhi.n	8002df0 <UART_SetConfig+0x110>
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d003      	beq.n	8002dd8 <UART_SetConfig+0xf8>
 8002dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dd4:	d006      	beq.n	8002de4 <UART_SetConfig+0x104>
 8002dd6:	e00b      	b.n	8002df0 <UART_SetConfig+0x110>
 8002dd8:	2300      	movs	r3, #0
 8002dda:	77fb      	strb	r3, [r7, #31]
 8002ddc:	e08b      	b.n	8002ef6 <UART_SetConfig+0x216>
 8002dde:	2302      	movs	r3, #2
 8002de0:	77fb      	strb	r3, [r7, #31]
 8002de2:	e088      	b.n	8002ef6 <UART_SetConfig+0x216>
 8002de4:	2304      	movs	r3, #4
 8002de6:	77fb      	strb	r3, [r7, #31]
 8002de8:	e085      	b.n	8002ef6 <UART_SetConfig+0x216>
 8002dea:	2308      	movs	r3, #8
 8002dec:	77fb      	strb	r3, [r7, #31]
 8002dee:	e082      	b.n	8002ef6 <UART_SetConfig+0x216>
 8002df0:	2310      	movs	r3, #16
 8002df2:	77fb      	strb	r3, [r7, #31]
 8002df4:	e07f      	b.n	8002ef6 <UART_SetConfig+0x216>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a82      	ldr	r2, [pc, #520]	; (8003004 <UART_SetConfig+0x324>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d124      	bne.n	8002e4a <UART_SetConfig+0x16a>
 8002e00:	4b7e      	ldr	r3, [pc, #504]	; (8002ffc <UART_SetConfig+0x31c>)
 8002e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e04:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002e08:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002e0c:	d011      	beq.n	8002e32 <UART_SetConfig+0x152>
 8002e0e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002e12:	d817      	bhi.n	8002e44 <UART_SetConfig+0x164>
 8002e14:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e18:	d011      	beq.n	8002e3e <UART_SetConfig+0x15e>
 8002e1a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e1e:	d811      	bhi.n	8002e44 <UART_SetConfig+0x164>
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d003      	beq.n	8002e2c <UART_SetConfig+0x14c>
 8002e24:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e28:	d006      	beq.n	8002e38 <UART_SetConfig+0x158>
 8002e2a:	e00b      	b.n	8002e44 <UART_SetConfig+0x164>
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	77fb      	strb	r3, [r7, #31]
 8002e30:	e061      	b.n	8002ef6 <UART_SetConfig+0x216>
 8002e32:	2302      	movs	r3, #2
 8002e34:	77fb      	strb	r3, [r7, #31]
 8002e36:	e05e      	b.n	8002ef6 <UART_SetConfig+0x216>
 8002e38:	2304      	movs	r3, #4
 8002e3a:	77fb      	strb	r3, [r7, #31]
 8002e3c:	e05b      	b.n	8002ef6 <UART_SetConfig+0x216>
 8002e3e:	2308      	movs	r3, #8
 8002e40:	77fb      	strb	r3, [r7, #31]
 8002e42:	e058      	b.n	8002ef6 <UART_SetConfig+0x216>
 8002e44:	2310      	movs	r3, #16
 8002e46:	77fb      	strb	r3, [r7, #31]
 8002e48:	e055      	b.n	8002ef6 <UART_SetConfig+0x216>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a6e      	ldr	r2, [pc, #440]	; (8003008 <UART_SetConfig+0x328>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d124      	bne.n	8002e9e <UART_SetConfig+0x1be>
 8002e54:	4b69      	ldr	r3, [pc, #420]	; (8002ffc <UART_SetConfig+0x31c>)
 8002e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e58:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002e5c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002e60:	d011      	beq.n	8002e86 <UART_SetConfig+0x1a6>
 8002e62:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002e66:	d817      	bhi.n	8002e98 <UART_SetConfig+0x1b8>
 8002e68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e6c:	d011      	beq.n	8002e92 <UART_SetConfig+0x1b2>
 8002e6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e72:	d811      	bhi.n	8002e98 <UART_SetConfig+0x1b8>
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d003      	beq.n	8002e80 <UART_SetConfig+0x1a0>
 8002e78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e7c:	d006      	beq.n	8002e8c <UART_SetConfig+0x1ac>
 8002e7e:	e00b      	b.n	8002e98 <UART_SetConfig+0x1b8>
 8002e80:	2300      	movs	r3, #0
 8002e82:	77fb      	strb	r3, [r7, #31]
 8002e84:	e037      	b.n	8002ef6 <UART_SetConfig+0x216>
 8002e86:	2302      	movs	r3, #2
 8002e88:	77fb      	strb	r3, [r7, #31]
 8002e8a:	e034      	b.n	8002ef6 <UART_SetConfig+0x216>
 8002e8c:	2304      	movs	r3, #4
 8002e8e:	77fb      	strb	r3, [r7, #31]
 8002e90:	e031      	b.n	8002ef6 <UART_SetConfig+0x216>
 8002e92:	2308      	movs	r3, #8
 8002e94:	77fb      	strb	r3, [r7, #31]
 8002e96:	e02e      	b.n	8002ef6 <UART_SetConfig+0x216>
 8002e98:	2310      	movs	r3, #16
 8002e9a:	77fb      	strb	r3, [r7, #31]
 8002e9c:	e02b      	b.n	8002ef6 <UART_SetConfig+0x216>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a5a      	ldr	r2, [pc, #360]	; (800300c <UART_SetConfig+0x32c>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d124      	bne.n	8002ef2 <UART_SetConfig+0x212>
 8002ea8:	4b54      	ldr	r3, [pc, #336]	; (8002ffc <UART_SetConfig+0x31c>)
 8002eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eac:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002eb0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002eb4:	d011      	beq.n	8002eda <UART_SetConfig+0x1fa>
 8002eb6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002eba:	d817      	bhi.n	8002eec <UART_SetConfig+0x20c>
 8002ebc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ec0:	d011      	beq.n	8002ee6 <UART_SetConfig+0x206>
 8002ec2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ec6:	d811      	bhi.n	8002eec <UART_SetConfig+0x20c>
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d003      	beq.n	8002ed4 <UART_SetConfig+0x1f4>
 8002ecc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ed0:	d006      	beq.n	8002ee0 <UART_SetConfig+0x200>
 8002ed2:	e00b      	b.n	8002eec <UART_SetConfig+0x20c>
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	77fb      	strb	r3, [r7, #31]
 8002ed8:	e00d      	b.n	8002ef6 <UART_SetConfig+0x216>
 8002eda:	2302      	movs	r3, #2
 8002edc:	77fb      	strb	r3, [r7, #31]
 8002ede:	e00a      	b.n	8002ef6 <UART_SetConfig+0x216>
 8002ee0:	2304      	movs	r3, #4
 8002ee2:	77fb      	strb	r3, [r7, #31]
 8002ee4:	e007      	b.n	8002ef6 <UART_SetConfig+0x216>
 8002ee6:	2308      	movs	r3, #8
 8002ee8:	77fb      	strb	r3, [r7, #31]
 8002eea:	e004      	b.n	8002ef6 <UART_SetConfig+0x216>
 8002eec:	2310      	movs	r3, #16
 8002eee:	77fb      	strb	r3, [r7, #31]
 8002ef0:	e001      	b.n	8002ef6 <UART_SetConfig+0x216>
 8002ef2:	2310      	movs	r3, #16
 8002ef4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002efe:	d15b      	bne.n	8002fb8 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8002f00:	7ffb      	ldrb	r3, [r7, #31]
 8002f02:	2b08      	cmp	r3, #8
 8002f04:	d827      	bhi.n	8002f56 <UART_SetConfig+0x276>
 8002f06:	a201      	add	r2, pc, #4	; (adr r2, 8002f0c <UART_SetConfig+0x22c>)
 8002f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f0c:	08002f31 	.word	0x08002f31
 8002f10:	08002f39 	.word	0x08002f39
 8002f14:	08002f41 	.word	0x08002f41
 8002f18:	08002f57 	.word	0x08002f57
 8002f1c:	08002f47 	.word	0x08002f47
 8002f20:	08002f57 	.word	0x08002f57
 8002f24:	08002f57 	.word	0x08002f57
 8002f28:	08002f57 	.word	0x08002f57
 8002f2c:	08002f4f 	.word	0x08002f4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f30:	f7ff f93a 	bl	80021a8 <HAL_RCC_GetPCLK1Freq>
 8002f34:	61b8      	str	r0, [r7, #24]
        break;
 8002f36:	e013      	b.n	8002f60 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f38:	f7ff f958 	bl	80021ec <HAL_RCC_GetPCLK2Freq>
 8002f3c:	61b8      	str	r0, [r7, #24]
        break;
 8002f3e:	e00f      	b.n	8002f60 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f40:	4b33      	ldr	r3, [pc, #204]	; (8003010 <UART_SetConfig+0x330>)
 8002f42:	61bb      	str	r3, [r7, #24]
        break;
 8002f44:	e00c      	b.n	8002f60 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f46:	f7ff f8cf 	bl	80020e8 <HAL_RCC_GetSysClockFreq>
 8002f4a:	61b8      	str	r0, [r7, #24]
        break;
 8002f4c:	e008      	b.n	8002f60 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f52:	61bb      	str	r3, [r7, #24]
        break;
 8002f54:	e004      	b.n	8002f60 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8002f56:	2300      	movs	r3, #0
 8002f58:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	77bb      	strb	r3, [r7, #30]
        break;
 8002f5e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f000 8082 	beq.w	800306c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	005a      	lsls	r2, r3, #1
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	085b      	lsrs	r3, r3, #1
 8002f72:	441a      	add	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f7c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	2b0f      	cmp	r3, #15
 8002f82:	d916      	bls.n	8002fb2 <UART_SetConfig+0x2d2>
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f8a:	d212      	bcs.n	8002fb2 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	f023 030f 	bic.w	r3, r3, #15
 8002f94:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	085b      	lsrs	r3, r3, #1
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	f003 0307 	and.w	r3, r3, #7
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	89fb      	ldrh	r3, [r7, #14]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	89fa      	ldrh	r2, [r7, #14]
 8002fae:	60da      	str	r2, [r3, #12]
 8002fb0:	e05c      	b.n	800306c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	77bb      	strb	r3, [r7, #30]
 8002fb6:	e059      	b.n	800306c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002fb8:	7ffb      	ldrb	r3, [r7, #31]
 8002fba:	2b08      	cmp	r3, #8
 8002fbc:	d835      	bhi.n	800302a <UART_SetConfig+0x34a>
 8002fbe:	a201      	add	r2, pc, #4	; (adr r2, 8002fc4 <UART_SetConfig+0x2e4>)
 8002fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc4:	08002fe9 	.word	0x08002fe9
 8002fc8:	08002ff1 	.word	0x08002ff1
 8002fcc:	08003015 	.word	0x08003015
 8002fd0:	0800302b 	.word	0x0800302b
 8002fd4:	0800301b 	.word	0x0800301b
 8002fd8:	0800302b 	.word	0x0800302b
 8002fdc:	0800302b 	.word	0x0800302b
 8002fe0:	0800302b 	.word	0x0800302b
 8002fe4:	08003023 	.word	0x08003023
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fe8:	f7ff f8de 	bl	80021a8 <HAL_RCC_GetPCLK1Freq>
 8002fec:	61b8      	str	r0, [r7, #24]
        break;
 8002fee:	e021      	b.n	8003034 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ff0:	f7ff f8fc 	bl	80021ec <HAL_RCC_GetPCLK2Freq>
 8002ff4:	61b8      	str	r0, [r7, #24]
        break;
 8002ff6:	e01d      	b.n	8003034 <UART_SetConfig+0x354>
 8002ff8:	40013800 	.word	0x40013800
 8002ffc:	40021000 	.word	0x40021000
 8003000:	40004400 	.word	0x40004400
 8003004:	40004800 	.word	0x40004800
 8003008:	40004c00 	.word	0x40004c00
 800300c:	40005000 	.word	0x40005000
 8003010:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003014:	4b1b      	ldr	r3, [pc, #108]	; (8003084 <UART_SetConfig+0x3a4>)
 8003016:	61bb      	str	r3, [r7, #24]
        break;
 8003018:	e00c      	b.n	8003034 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800301a:	f7ff f865 	bl	80020e8 <HAL_RCC_GetSysClockFreq>
 800301e:	61b8      	str	r0, [r7, #24]
        break;
 8003020:	e008      	b.n	8003034 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003022:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003026:	61bb      	str	r3, [r7, #24]
        break;
 8003028:	e004      	b.n	8003034 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800302a:	2300      	movs	r3, #0
 800302c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	77bb      	strb	r3, [r7, #30]
        break;
 8003032:	bf00      	nop
    }

    if (pclk != 0U)
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d018      	beq.n	800306c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	085a      	lsrs	r2, r3, #1
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	441a      	add	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	fbb2 f3f3 	udiv	r3, r2, r3
 800304c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	2b0f      	cmp	r3, #15
 8003052:	d909      	bls.n	8003068 <UART_SetConfig+0x388>
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800305a:	d205      	bcs.n	8003068 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	b29a      	uxth	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	60da      	str	r2, [r3, #12]
 8003066:	e001      	b.n	800306c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003078:	7fbb      	ldrb	r3, [r7, #30]
}
 800307a:	4618      	mov	r0, r3
 800307c:	3720      	adds	r7, #32
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	007a1200 	.word	0x007a1200

08003088 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003094:	f003 0308 	and.w	r3, r3, #8
 8003098:	2b00      	cmp	r3, #0
 800309a:	d00a      	beq.n	80030b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00a      	beq.n	80030d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	430a      	orrs	r2, r1
 80030d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00a      	beq.n	80030f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	430a      	orrs	r2, r1
 80030f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fa:	f003 0304 	and.w	r3, r3, #4
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00a      	beq.n	8003118 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	430a      	orrs	r2, r1
 8003116:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311c:	f003 0310 	and.w	r3, r3, #16
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00a      	beq.n	800313a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	430a      	orrs	r2, r1
 8003138:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313e:	f003 0320 	and.w	r3, r3, #32
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00a      	beq.n	800315c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	430a      	orrs	r2, r1
 800315a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003164:	2b00      	cmp	r3, #0
 8003166:	d01a      	beq.n	800319e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	430a      	orrs	r2, r1
 800317c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003182:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003186:	d10a      	bne.n	800319e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	430a      	orrs	r2, r1
 800319c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00a      	beq.n	80031c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	430a      	orrs	r2, r1
 80031be:	605a      	str	r2, [r3, #4]
  }
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b098      	sub	sp, #96	; 0x60
 80031d0:	af02      	add	r7, sp, #8
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80031dc:	f7fd fa60 	bl	80006a0 <HAL_GetTick>
 80031e0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0308 	and.w	r3, r3, #8
 80031ec:	2b08      	cmp	r3, #8
 80031ee:	d12e      	bne.n	800324e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80031f4:	9300      	str	r3, [sp, #0]
 80031f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031f8:	2200      	movs	r2, #0
 80031fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 f88c 	bl	800331c <UART_WaitOnFlagUntilTimeout>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d021      	beq.n	800324e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003212:	e853 3f00 	ldrex	r3, [r3]
 8003216:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800321a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800321e:	653b      	str	r3, [r7, #80]	; 0x50
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	461a      	mov	r2, r3
 8003226:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003228:	647b      	str	r3, [r7, #68]	; 0x44
 800322a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800322c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800322e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003230:	e841 2300 	strex	r3, r2, [r1]
 8003234:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003238:	2b00      	cmp	r3, #0
 800323a:	d1e6      	bne.n	800320a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2220      	movs	r2, #32
 8003240:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e062      	b.n	8003314 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0304 	and.w	r3, r3, #4
 8003258:	2b04      	cmp	r3, #4
 800325a:	d149      	bne.n	80032f0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800325c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003264:	2200      	movs	r2, #0
 8003266:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 f856 	bl	800331c <UART_WaitOnFlagUntilTimeout>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d03c      	beq.n	80032f0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800327c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327e:	e853 3f00 	ldrex	r3, [r3]
 8003282:	623b      	str	r3, [r7, #32]
   return(result);
 8003284:	6a3b      	ldr	r3, [r7, #32]
 8003286:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800328a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	461a      	mov	r2, r3
 8003292:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003294:	633b      	str	r3, [r7, #48]	; 0x30
 8003296:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003298:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800329a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800329c:	e841 2300 	strex	r3, r2, [r1]
 80032a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80032a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1e6      	bne.n	8003276 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	3308      	adds	r3, #8
 80032ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	e853 3f00 	ldrex	r3, [r3]
 80032b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f023 0301 	bic.w	r3, r3, #1
 80032be:	64bb      	str	r3, [r7, #72]	; 0x48
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	3308      	adds	r3, #8
 80032c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032c8:	61fa      	str	r2, [r7, #28]
 80032ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032cc:	69b9      	ldr	r1, [r7, #24]
 80032ce:	69fa      	ldr	r2, [r7, #28]
 80032d0:	e841 2300 	strex	r3, r2, [r1]
 80032d4:	617b      	str	r3, [r7, #20]
   return(result);
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1e5      	bne.n	80032a8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2220      	movs	r2, #32
 80032e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e011      	b.n	8003314 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2220      	movs	r2, #32
 80032f4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2220      	movs	r2, #32
 80032fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3758      	adds	r7, #88	; 0x58
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	603b      	str	r3, [r7, #0]
 8003328:	4613      	mov	r3, r2
 800332a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800332c:	e04f      	b.n	80033ce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003334:	d04b      	beq.n	80033ce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003336:	f7fd f9b3 	bl	80006a0 <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	429a      	cmp	r2, r3
 8003344:	d302      	bcc.n	800334c <UART_WaitOnFlagUntilTimeout+0x30>
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d101      	bne.n	8003350 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e04e      	b.n	80033ee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0304 	and.w	r3, r3, #4
 800335a:	2b00      	cmp	r3, #0
 800335c:	d037      	beq.n	80033ce <UART_WaitOnFlagUntilTimeout+0xb2>
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	2b80      	cmp	r3, #128	; 0x80
 8003362:	d034      	beq.n	80033ce <UART_WaitOnFlagUntilTimeout+0xb2>
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	2b40      	cmp	r3, #64	; 0x40
 8003368:	d031      	beq.n	80033ce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	69db      	ldr	r3, [r3, #28]
 8003370:	f003 0308 	and.w	r3, r3, #8
 8003374:	2b08      	cmp	r3, #8
 8003376:	d110      	bne.n	800339a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2208      	movs	r2, #8
 800337e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	f000 f838 	bl	80033f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2208      	movs	r2, #8
 800338a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e029      	b.n	80033ee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	69db      	ldr	r3, [r3, #28]
 80033a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033a8:	d111      	bne.n	80033ce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80033b4:	68f8      	ldr	r0, [r7, #12]
 80033b6:	f000 f81e 	bl	80033f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2220      	movs	r2, #32
 80033be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e00f      	b.n	80033ee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	69da      	ldr	r2, [r3, #28]
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	4013      	ands	r3, r2
 80033d8:	68ba      	ldr	r2, [r7, #8]
 80033da:	429a      	cmp	r2, r3
 80033dc:	bf0c      	ite	eq
 80033de:	2301      	moveq	r3, #1
 80033e0:	2300      	movne	r3, #0
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	461a      	mov	r2, r3
 80033e6:	79fb      	ldrb	r3, [r7, #7]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d0a0      	beq.n	800332e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033f6:	b480      	push	{r7}
 80033f8:	b095      	sub	sp, #84	; 0x54
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003406:	e853 3f00 	ldrex	r3, [r3]
 800340a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800340c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800340e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003412:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	461a      	mov	r2, r3
 800341a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800341c:	643b      	str	r3, [r7, #64]	; 0x40
 800341e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003420:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003422:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003424:	e841 2300 	strex	r3, r2, [r1]
 8003428:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800342a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1e6      	bne.n	80033fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	3308      	adds	r3, #8
 8003436:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003438:	6a3b      	ldr	r3, [r7, #32]
 800343a:	e853 3f00 	ldrex	r3, [r3]
 800343e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	f023 0301 	bic.w	r3, r3, #1
 8003446:	64bb      	str	r3, [r7, #72]	; 0x48
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	3308      	adds	r3, #8
 800344e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003450:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003452:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003454:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003456:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003458:	e841 2300 	strex	r3, r2, [r1]
 800345c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1e5      	bne.n	8003430 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003468:	2b01      	cmp	r3, #1
 800346a:	d118      	bne.n	800349e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	e853 3f00 	ldrex	r3, [r3]
 8003478:	60bb      	str	r3, [r7, #8]
   return(result);
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	f023 0310 	bic.w	r3, r3, #16
 8003480:	647b      	str	r3, [r7, #68]	; 0x44
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	461a      	mov	r2, r3
 8003488:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800348a:	61bb      	str	r3, [r7, #24]
 800348c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800348e:	6979      	ldr	r1, [r7, #20]
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	e841 2300 	strex	r3, r2, [r1]
 8003496:	613b      	str	r3, [r7, #16]
   return(result);
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1e6      	bne.n	800346c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2220      	movs	r2, #32
 80034a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80034b2:	bf00      	nop
 80034b4:	3754      	adds	r7, #84	; 0x54
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr

080034be <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b084      	sub	sp, #16
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80034dc:	68f8      	ldr	r0, [r7, #12]
 80034de:	f7ff fbe9 	bl	8002cb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034e2:	bf00      	nop
 80034e4:	3710      	adds	r7, #16
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80034ea:	b480      	push	{r7}
 80034ec:	b08f      	sub	sp, #60	; 0x3c
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034f6:	2b21      	cmp	r3, #33	; 0x21
 80034f8:	d14d      	bne.n	8003596 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003500:	b29b      	uxth	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d132      	bne.n	800356c <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800350c:	6a3b      	ldr	r3, [r7, #32]
 800350e:	e853 3f00 	ldrex	r3, [r3]
 8003512:	61fb      	str	r3, [r7, #28]
   return(result);
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800351a:	637b      	str	r3, [r7, #52]	; 0x34
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	461a      	mov	r2, r3
 8003522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003524:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003526:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003528:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800352a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800352c:	e841 2300 	strex	r3, r2, [r1]
 8003530:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1e6      	bne.n	8003506 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	e853 3f00 	ldrex	r3, [r3]
 8003544:	60bb      	str	r3, [r7, #8]
   return(result);
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800354c:	633b      	str	r3, [r7, #48]	; 0x30
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	461a      	mov	r2, r3
 8003554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003556:	61bb      	str	r3, [r7, #24]
 8003558:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800355a:	6979      	ldr	r1, [r7, #20]
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	e841 2300 	strex	r3, r2, [r1]
 8003562:	613b      	str	r3, [r7, #16]
   return(result);
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1e6      	bne.n	8003538 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800356a:	e014      	b.n	8003596 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003570:	781a      	ldrb	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	b292      	uxth	r2, r2
 8003578:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800357e:	1c5a      	adds	r2, r3, #1
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800358a:	b29b      	uxth	r3, r3
 800358c:	3b01      	subs	r3, #1
 800358e:	b29a      	uxth	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003596:	bf00      	nop
 8003598:	373c      	adds	r7, #60	; 0x3c
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr

080035a2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80035a2:	b480      	push	{r7}
 80035a4:	b091      	sub	sp, #68	; 0x44
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035ae:	2b21      	cmp	r3, #33	; 0x21
 80035b0:	d151      	bne.n	8003656 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d132      	bne.n	8003624 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c6:	e853 3f00 	ldrex	r3, [r3]
 80035ca:	623b      	str	r3, [r7, #32]
   return(result);
 80035cc:	6a3b      	ldr	r3, [r7, #32]
 80035ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	461a      	mov	r2, r3
 80035da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035dc:	633b      	str	r3, [r7, #48]	; 0x30
 80035de:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035e4:	e841 2300 	strex	r3, r2, [r1]
 80035e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80035ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1e6      	bne.n	80035be <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	e853 3f00 	ldrex	r3, [r3]
 80035fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003604:	637b      	str	r3, [r7, #52]	; 0x34
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	461a      	mov	r2, r3
 800360c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800360e:	61fb      	str	r3, [r7, #28]
 8003610:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003612:	69b9      	ldr	r1, [r7, #24]
 8003614:	69fa      	ldr	r2, [r7, #28]
 8003616:	e841 2300 	strex	r3, r2, [r1]
 800361a:	617b      	str	r3, [r7, #20]
   return(result);
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d1e6      	bne.n	80035f0 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003622:	e018      	b.n	8003656 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003628:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800362a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800362c:	881a      	ldrh	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003636:	b292      	uxth	r2, r2
 8003638:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800363e:	1c9a      	adds	r2, r3, #2
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800364a:	b29b      	uxth	r3, r3
 800364c:	3b01      	subs	r3, #1
 800364e:	b29a      	uxth	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003656:	bf00      	nop
 8003658:	3744      	adds	r7, #68	; 0x44
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr

08003662 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003662:	b580      	push	{r7, lr}
 8003664:	b088      	sub	sp, #32
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	e853 3f00 	ldrex	r3, [r3]
 8003676:	60bb      	str	r3, [r7, #8]
   return(result);
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800367e:	61fb      	str	r3, [r7, #28]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	461a      	mov	r2, r3
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	61bb      	str	r3, [r7, #24]
 800368a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800368c:	6979      	ldr	r1, [r7, #20]
 800368e:	69ba      	ldr	r2, [r7, #24]
 8003690:	e841 2300 	strex	r3, r2, [r1]
 8003694:	613b      	str	r3, [r7, #16]
   return(result);
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1e6      	bne.n	800366a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2220      	movs	r2, #32
 80036a0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f7fc fd8d 	bl	80001c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036ae:	bf00      	nop
 80036b0:	3720      	adds	r7, #32
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80036b6:	b480      	push	{r7}
 80036b8:	b083      	sub	sp, #12
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80036be:	bf00      	nop
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr

080036ca <memset>:
 80036ca:	4402      	add	r2, r0
 80036cc:	4603      	mov	r3, r0
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d100      	bne.n	80036d4 <memset+0xa>
 80036d2:	4770      	bx	lr
 80036d4:	f803 1b01 	strb.w	r1, [r3], #1
 80036d8:	e7f9      	b.n	80036ce <memset+0x4>
	...

080036dc <__libc_init_array>:
 80036dc:	b570      	push	{r4, r5, r6, lr}
 80036de:	4d0d      	ldr	r5, [pc, #52]	; (8003714 <__libc_init_array+0x38>)
 80036e0:	4c0d      	ldr	r4, [pc, #52]	; (8003718 <__libc_init_array+0x3c>)
 80036e2:	1b64      	subs	r4, r4, r5
 80036e4:	10a4      	asrs	r4, r4, #2
 80036e6:	2600      	movs	r6, #0
 80036e8:	42a6      	cmp	r6, r4
 80036ea:	d109      	bne.n	8003700 <__libc_init_array+0x24>
 80036ec:	4d0b      	ldr	r5, [pc, #44]	; (800371c <__libc_init_array+0x40>)
 80036ee:	4c0c      	ldr	r4, [pc, #48]	; (8003720 <__libc_init_array+0x44>)
 80036f0:	f000 f818 	bl	8003724 <_init>
 80036f4:	1b64      	subs	r4, r4, r5
 80036f6:	10a4      	asrs	r4, r4, #2
 80036f8:	2600      	movs	r6, #0
 80036fa:	42a6      	cmp	r6, r4
 80036fc:	d105      	bne.n	800370a <__libc_init_array+0x2e>
 80036fe:	bd70      	pop	{r4, r5, r6, pc}
 8003700:	f855 3b04 	ldr.w	r3, [r5], #4
 8003704:	4798      	blx	r3
 8003706:	3601      	adds	r6, #1
 8003708:	e7ee      	b.n	80036e8 <__libc_init_array+0xc>
 800370a:	f855 3b04 	ldr.w	r3, [r5], #4
 800370e:	4798      	blx	r3
 8003710:	3601      	adds	r6, #1
 8003712:	e7f2      	b.n	80036fa <__libc_init_array+0x1e>
 8003714:	08003774 	.word	0x08003774
 8003718:	08003774 	.word	0x08003774
 800371c:	08003774 	.word	0x08003774
 8003720:	08003778 	.word	0x08003778

08003724 <_init>:
 8003724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003726:	bf00      	nop
 8003728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800372a:	bc08      	pop	{r3}
 800372c:	469e      	mov	lr, r3
 800372e:	4770      	bx	lr

08003730 <_fini>:
 8003730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003732:	bf00      	nop
 8003734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003736:	bc08      	pop	{r3}
 8003738:	469e      	mov	lr, r3
 800373a:	4770      	bx	lr
