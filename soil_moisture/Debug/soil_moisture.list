
soil_moisture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040c0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08004248  08004248  00014248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004294  08004294  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004294  08004294  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004294  08004294  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004294  08004294  00014294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004298  08004298  00014298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800429c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000204  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000274  20000274  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   000092b1  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001754  00000000  00000000  00029394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000748  00000000  00000000  0002aae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000586  00000000  00000000  0002b230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001d8f1  00000000  00000000  0002b7b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000a39b  00000000  00000000  000490a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000aed3a  00000000  00000000  00053442  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002394  00000000  00000000  0010217c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  00104510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004230 	.word	0x08004230

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08004230 	.word	0x08004230

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <RS485_SetMode>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Function to control RS485 transmit/receive
void RS485_SetMode(uint8_t mode) {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71fb      	strb	r3, [r7, #7]
    if (mode) {
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d005      	beq.n	8000a20 <RS485_SetMode+0x1c>
        HAL_GPIO_WritePin(RS485_DE_PORT, RS485_DE_PIN, GPIO_PIN_SET); // Transmit Mode
 8000a14:	2201      	movs	r2, #1
 8000a16:	2101      	movs	r1, #1
 8000a18:	4806      	ldr	r0, [pc, #24]	; (8000a34 <RS485_SetMode+0x30>)
 8000a1a:	f000 fdcd 	bl	80015b8 <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(RS485_DE_PORT, RS485_DE_PIN, GPIO_PIN_RESET); // Receive Mode
    }
}
 8000a1e:	e004      	b.n	8000a2a <RS485_SetMode+0x26>
        HAL_GPIO_WritePin(RS485_DE_PORT, RS485_DE_PIN, GPIO_PIN_RESET); // Receive Mode
 8000a20:	2200      	movs	r2, #0
 8000a22:	2101      	movs	r1, #1
 8000a24:	4803      	ldr	r0, [pc, #12]	; (8000a34 <RS485_SetMode+0x30>)
 8000a26:	f000 fdc7 	bl	80015b8 <HAL_GPIO_WritePin>
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	48000400 	.word	0x48000400

08000a38 <RS485_ReadSensor>:

// Function to send Modbus request and receive response
void RS485_ReadSensor() {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
    RS485_SetMode(1);  // Enable Transmit Mode
 8000a3c:	2001      	movs	r0, #1
 8000a3e:	f7ff ffe1 	bl	8000a04 <RS485_SetMode>
    HAL_UART_Transmit(RS485_UART, modbus_request, sizeof(modbus_request), HAL_MAX_DELAY);
 8000a42:	f04f 33ff 	mov.w	r3, #4294967295
 8000a46:	2208      	movs	r2, #8
 8000a48:	4908      	ldr	r1, [pc, #32]	; (8000a6c <RS485_ReadSensor+0x34>)
 8000a4a:	4809      	ldr	r0, [pc, #36]	; (8000a70 <RS485_ReadSensor+0x38>)
 8000a4c:	f002 fa28 	bl	8002ea0 <HAL_UART_Transmit>
    HAL_Delay(10);  // Wait for transmission to complete
 8000a50:	200a      	movs	r0, #10
 8000a52:	f000 fb2d 	bl	80010b0 <HAL_Delay>

    RS485_SetMode(0);  // Enable Receive Mode
 8000a56:	2000      	movs	r0, #0
 8000a58:	f7ff ffd4 	bl	8000a04 <RS485_SetMode>
    HAL_UART_Receive(RS485_UART, response, 9, 100);  // Receive sensor response
 8000a5c:	2364      	movs	r3, #100	; 0x64
 8000a5e:	2209      	movs	r2, #9
 8000a60:	4904      	ldr	r1, [pc, #16]	; (8000a74 <RS485_ReadSensor+0x3c>)
 8000a62:	4803      	ldr	r0, [pc, #12]	; (8000a70 <RS485_ReadSensor+0x38>)
 8000a64:	f002 faa6 	bl	8002fb4 <HAL_UART_Receive>
}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	20000000 	.word	0x20000000
 8000a70:	20000098 	.word	0x20000098
 8000a74:	2000008c 	.word	0x2000008c

08000a78 <ProcessSensorData>:

// Function to process sensor data
void ProcessSensorData() {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af00      	add	r7, sp, #0
    if (response[0] == 0x01 && response[1] == 0x03) {  // Valid Modbus response
 8000a7e:	4b2c      	ldr	r3, [pc, #176]	; (8000b30 <ProcessSensorData+0xb8>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d14b      	bne.n	8000b1e <ProcessSensorData+0xa6>
 8000a86:	4b2a      	ldr	r3, [pc, #168]	; (8000b30 <ProcessSensorData+0xb8>)
 8000a88:	785b      	ldrb	r3, [r3, #1]
 8000a8a:	2b03      	cmp	r3, #3
 8000a8c:	d147      	bne.n	8000b1e <ProcessSensorData+0xa6>
        uint16_t temp_raw = (response[3] << 8) | response[4];
 8000a8e:	4b28      	ldr	r3, [pc, #160]	; (8000b30 <ProcessSensorData+0xb8>)
 8000a90:	78db      	ldrb	r3, [r3, #3]
 8000a92:	021b      	lsls	r3, r3, #8
 8000a94:	b21a      	sxth	r2, r3
 8000a96:	4b26      	ldr	r3, [pc, #152]	; (8000b30 <ProcessSensorData+0xb8>)
 8000a98:	791b      	ldrb	r3, [r3, #4]
 8000a9a:	b21b      	sxth	r3, r3
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	b21b      	sxth	r3, r3
 8000aa0:	82fb      	strh	r3, [r7, #22]
        uint16_t hum_raw  = (response[5] << 8) | response[6];
 8000aa2:	4b23      	ldr	r3, [pc, #140]	; (8000b30 <ProcessSensorData+0xb8>)
 8000aa4:	795b      	ldrb	r3, [r3, #5]
 8000aa6:	021b      	lsls	r3, r3, #8
 8000aa8:	b21a      	sxth	r2, r3
 8000aaa:	4b21      	ldr	r3, [pc, #132]	; (8000b30 <ProcessSensorData+0xb8>)
 8000aac:	799b      	ldrb	r3, [r3, #6]
 8000aae:	b21b      	sxth	r3, r3
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	b21b      	sxth	r3, r3
 8000ab4:	82bb      	strh	r3, [r7, #20]
        uint16_t ec_raw   = (response[7] << 8) | response[8];
 8000ab6:	4b1e      	ldr	r3, [pc, #120]	; (8000b30 <ProcessSensorData+0xb8>)
 8000ab8:	79db      	ldrb	r3, [r3, #7]
 8000aba:	021b      	lsls	r3, r3, #8
 8000abc:	b21a      	sxth	r2, r3
 8000abe:	4b1c      	ldr	r3, [pc, #112]	; (8000b30 <ProcessSensorData+0xb8>)
 8000ac0:	7a1b      	ldrb	r3, [r3, #8]
 8000ac2:	b21b      	sxth	r3, r3
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	b21b      	sxth	r3, r3
 8000ac8:	827b      	strh	r3, [r7, #18]

        float temperature = temp_raw / 10.0;  // Convert to Celsius
 8000aca:	8afb      	ldrh	r3, [r7, #22]
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff fccd 	bl	800046c <__aeabi_i2d>
 8000ad2:	f04f 0200 	mov.w	r2, #0
 8000ad6:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <ProcessSensorData+0xbc>)
 8000ad8:	f7ff fe5c 	bl	8000794 <__aeabi_ddiv>
 8000adc:	4602      	mov	r2, r0
 8000ade:	460b      	mov	r3, r1
 8000ae0:	4610      	mov	r0, r2
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	f7ff ff3e 	bl	8000964 <__aeabi_d2f>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	60fb      	str	r3, [r7, #12]
        float humidity    = hum_raw / 10.0;   // Convert to %
 8000aec:	8abb      	ldrh	r3, [r7, #20]
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff fcbc 	bl	800046c <__aeabi_i2d>
 8000af4:	f04f 0200 	mov.w	r2, #0
 8000af8:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <ProcessSensorData+0xbc>)
 8000afa:	f7ff fe4b 	bl	8000794 <__aeabi_ddiv>
 8000afe:	4602      	mov	r2, r0
 8000b00:	460b      	mov	r3, r1
 8000b02:	4610      	mov	r0, r2
 8000b04:	4619      	mov	r1, r3
 8000b06:	f7ff ff2d 	bl	8000964 <__aeabi_d2f>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	60bb      	str	r3, [r7, #8]
        float ec          = ec_raw;           // EC in µS/cm
 8000b0e:	8a7b      	ldrh	r3, [r7, #18]
 8000b10:	ee07 3a90 	vmov	s15, r3
 8000b14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b18:	edc7 7a01 	vstr	s15, [r7, #4]
    if (response[0] == 0x01 && response[1] == 0x03) {  // Valid Modbus response
 8000b1c:	e003      	b.n	8000b26 <ProcessSensorData+0xae>

    } else {
        printf("Invalid response\n");
 8000b1e:	4806      	ldr	r0, [pc, #24]	; (8000b38 <ProcessSensorData+0xc0>)
 8000b20:	f002 fff2 	bl	8003b08 <puts>
    }
}
 8000b24:	bf00      	nop
 8000b26:	bf00      	nop
 8000b28:	3718      	adds	r7, #24
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	2000008c 	.word	0x2000008c
 8000b34:	40240000 	.word	0x40240000
 8000b38:	08004248 	.word	0x08004248

08000b3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b40:	f000 fa50 	bl	8000fe4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b44:	f000 f80d 	bl	8000b62 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b48:	f000 f88c 	bl	8000c64 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b4c:	f000 f85a 	bl	8000c04 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      RS485_ReadSensor();
 8000b50:	f7ff ff72 	bl	8000a38 <RS485_ReadSensor>
      ProcessSensorData();
 8000b54:	f7ff ff90 	bl	8000a78 <ProcessSensorData>
      HAL_Delay(2000);  // Read every 2 seconds
 8000b58:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b5c:	f000 faa8 	bl	80010b0 <HAL_Delay>
      RS485_ReadSensor();
 8000b60:	e7f6      	b.n	8000b50 <main+0x14>

08000b62 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b09e      	sub	sp, #120	; 0x78
 8000b66:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b68:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000b6c:	2228      	movs	r2, #40	; 0x28
 8000b6e:	2100      	movs	r1, #0
 8000b70:	4618      	mov	r0, r3
 8000b72:	f003 f8a9 	bl	8003cc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b76:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]
 8000b80:	609a      	str	r2, [r3, #8]
 8000b82:	60da      	str	r2, [r3, #12]
 8000b84:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b86:	463b      	mov	r3, r7
 8000b88:	223c      	movs	r2, #60	; 0x3c
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f003 f89b 	bl	8003cc8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b92:	2302      	movs	r3, #2
 8000b94:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b96:	2301      	movs	r3, #1
 8000b98:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b9a:	2310      	movs	r3, #16
 8000b9c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f000 fd1e 	bl	80015e8 <HAL_RCC_OscConfig>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000bb2:	f000 f8a1 	bl	8000cf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb6:	230f      	movs	r3, #15
 8000bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000bce:	2100      	movs	r1, #0
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f001 fd47 	bl	8002664 <HAL_RCC_ClockConfig>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000bdc:	f000 f88c 	bl	8000cf8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000be0:	2302      	movs	r3, #2
 8000be2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000be4:	2300      	movs	r3, #0
 8000be6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000be8:	463b      	mov	r3, r7
 8000bea:	4618      	mov	r0, r3
 8000bec:	f001 ff5a 	bl	8002aa4 <HAL_RCCEx_PeriphCLKConfig>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000bf6:	f000 f87f 	bl	8000cf8 <Error_Handler>
  }
}
 8000bfa:	bf00      	nop
 8000bfc:	3778      	adds	r7, #120	; 0x78
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
	...

08000c04 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c08:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <MX_USART2_UART_Init+0x58>)
 8000c0a:	4a15      	ldr	r2, [pc, #84]	; (8000c60 <MX_USART2_UART_Init+0x5c>)
 8000c0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000c0e:	4b13      	ldr	r3, [pc, #76]	; (8000c5c <MX_USART2_UART_Init+0x58>)
 8000c10:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c16:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <MX_USART2_UART_Init+0x58>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c1c:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <MX_USART2_UART_Init+0x58>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c22:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <MX_USART2_UART_Init+0x58>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c28:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <MX_USART2_UART_Init+0x58>)
 8000c2a:	220c      	movs	r2, #12
 8000c2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <MX_USART2_UART_Init+0x58>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c34:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <MX_USART2_UART_Init+0x58>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c3a:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <MX_USART2_UART_Init+0x58>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c40:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <MX_USART2_UART_Init+0x58>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c46:	4805      	ldr	r0, [pc, #20]	; (8000c5c <MX_USART2_UART_Init+0x58>)
 8000c48:	f002 f8dc 	bl	8002e04 <HAL_UART_Init>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c52:	f000 f851 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000098 	.word	0x20000098
 8000c60:	40004400 	.word	0x40004400

08000c64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b088      	sub	sp, #32
 8000c68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6a:	f107 030c 	add.w	r3, r7, #12
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]
 8000c74:	609a      	str	r2, [r3, #8]
 8000c76:	60da      	str	r2, [r3, #12]
 8000c78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c7a:	4b1d      	ldr	r3, [pc, #116]	; (8000cf0 <MX_GPIO_Init+0x8c>)
 8000c7c:	695b      	ldr	r3, [r3, #20]
 8000c7e:	4a1c      	ldr	r2, [pc, #112]	; (8000cf0 <MX_GPIO_Init+0x8c>)
 8000c80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c84:	6153      	str	r3, [r2, #20]
 8000c86:	4b1a      	ldr	r3, [pc, #104]	; (8000cf0 <MX_GPIO_Init+0x8c>)
 8000c88:	695b      	ldr	r3, [r3, #20]
 8000c8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c8e:	60bb      	str	r3, [r7, #8]
 8000c90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c92:	4b17      	ldr	r3, [pc, #92]	; (8000cf0 <MX_GPIO_Init+0x8c>)
 8000c94:	695b      	ldr	r3, [r3, #20]
 8000c96:	4a16      	ldr	r2, [pc, #88]	; (8000cf0 <MX_GPIO_Init+0x8c>)
 8000c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c9c:	6153      	str	r3, [r2, #20]
 8000c9e:	4b14      	ldr	r3, [pc, #80]	; (8000cf0 <MX_GPIO_Init+0x8c>)
 8000ca0:	695b      	ldr	r3, [r3, #20]
 8000ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000caa:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <MX_GPIO_Init+0x8c>)
 8000cac:	695b      	ldr	r3, [r3, #20]
 8000cae:	4a10      	ldr	r2, [pc, #64]	; (8000cf0 <MX_GPIO_Init+0x8c>)
 8000cb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cb4:	6153      	str	r3, [r2, #20]
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <MX_GPIO_Init+0x8c>)
 8000cb8:	695b      	ldr	r3, [r3, #20]
 8000cba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cbe:	603b      	str	r3, [r7, #0]
 8000cc0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	480b      	ldr	r0, [pc, #44]	; (8000cf4 <MX_GPIO_Init+0x90>)
 8000cc8:	f000 fc76 	bl	80015b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cdc:	f107 030c 	add.w	r3, r7, #12
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4804      	ldr	r0, [pc, #16]	; (8000cf4 <MX_GPIO_Init+0x90>)
 8000ce4:	f000 faee 	bl	80012c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ce8:	bf00      	nop
 8000cea:	3720      	adds	r7, #32
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40021000 	.word	0x40021000
 8000cf4:	48000400 	.word	0x48000400

08000cf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cfc:	b672      	cpsid	i
}
 8000cfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d00:	e7fe      	b.n	8000d00 <Error_Handler+0x8>
	...

08000d04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0a:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <HAL_MspInit+0x44>)
 8000d0c:	699b      	ldr	r3, [r3, #24]
 8000d0e:	4a0e      	ldr	r2, [pc, #56]	; (8000d48 <HAL_MspInit+0x44>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	6193      	str	r3, [r2, #24]
 8000d16:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <HAL_MspInit+0x44>)
 8000d18:	699b      	ldr	r3, [r3, #24]
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d22:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <HAL_MspInit+0x44>)
 8000d24:	69db      	ldr	r3, [r3, #28]
 8000d26:	4a08      	ldr	r2, [pc, #32]	; (8000d48 <HAL_MspInit+0x44>)
 8000d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d2c:	61d3      	str	r3, [r2, #28]
 8000d2e:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <HAL_MspInit+0x44>)
 8000d30:	69db      	ldr	r3, [r3, #28]
 8000d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d36:	603b      	str	r3, [r7, #0]
 8000d38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	40021000 	.word	0x40021000

08000d4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08a      	sub	sp, #40	; 0x28
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a17      	ldr	r2, [pc, #92]	; (8000dc8 <HAL_UART_MspInit+0x7c>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d128      	bne.n	8000dc0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d6e:	4b17      	ldr	r3, [pc, #92]	; (8000dcc <HAL_UART_MspInit+0x80>)
 8000d70:	69db      	ldr	r3, [r3, #28]
 8000d72:	4a16      	ldr	r2, [pc, #88]	; (8000dcc <HAL_UART_MspInit+0x80>)
 8000d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d78:	61d3      	str	r3, [r2, #28]
 8000d7a:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <HAL_UART_MspInit+0x80>)
 8000d7c:	69db      	ldr	r3, [r3, #28]
 8000d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d82:	613b      	str	r3, [r7, #16]
 8000d84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d86:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <HAL_UART_MspInit+0x80>)
 8000d88:	695b      	ldr	r3, [r3, #20]
 8000d8a:	4a10      	ldr	r2, [pc, #64]	; (8000dcc <HAL_UART_MspInit+0x80>)
 8000d8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d90:	6153      	str	r3, [r2, #20]
 8000d92:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <HAL_UART_MspInit+0x80>)
 8000d94:	695b      	ldr	r3, [r3, #20]
 8000d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d9e:	230c      	movs	r3, #12
 8000da0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da2:	2302      	movs	r3, #2
 8000da4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000daa:	2303      	movs	r3, #3
 8000dac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dae:	2307      	movs	r3, #7
 8000db0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db2:	f107 0314 	add.w	r3, r7, #20
 8000db6:	4619      	mov	r1, r3
 8000db8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dbc:	f000 fa82 	bl	80012c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dc0:	bf00      	nop
 8000dc2:	3728      	adds	r7, #40	; 0x28
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40004400 	.word	0x40004400
 8000dcc:	40021000 	.word	0x40021000

08000dd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dd4:	e7fe      	b.n	8000dd4 <NMI_Handler+0x4>

08000dd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dda:	e7fe      	b.n	8000dda <HardFault_Handler+0x4>

08000ddc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <MemManage_Handler+0x4>

08000de2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de6:	e7fe      	b.n	8000de6 <BusFault_Handler+0x4>

08000de8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dec:	e7fe      	b.n	8000dec <UsageFault_Handler+0x4>

08000dee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr

08000e0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e1c:	f000 f928 	bl	8001070 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]
 8000e34:	e00a      	b.n	8000e4c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e36:	f3af 8000 	nop.w
 8000e3a:	4601      	mov	r1, r0
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	1c5a      	adds	r2, r3, #1
 8000e40:	60ba      	str	r2, [r7, #8]
 8000e42:	b2ca      	uxtb	r2, r1
 8000e44:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	617b      	str	r3, [r7, #20]
 8000e4c:	697a      	ldr	r2, [r7, #20]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	dbf0      	blt.n	8000e36 <_read+0x12>
  }

  return len;
 8000e54:	687b      	ldr	r3, [r7, #4]
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3718      	adds	r7, #24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b086      	sub	sp, #24
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	60f8      	str	r0, [r7, #12]
 8000e66:	60b9      	str	r1, [r7, #8]
 8000e68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	617b      	str	r3, [r7, #20]
 8000e6e:	e009      	b.n	8000e84 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	1c5a      	adds	r2, r3, #1
 8000e74:	60ba      	str	r2, [r7, #8]
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	3301      	adds	r3, #1
 8000e82:	617b      	str	r3, [r7, #20]
 8000e84:	697a      	ldr	r2, [r7, #20]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	dbf1      	blt.n	8000e70 <_write+0x12>
  }
  return len;
 8000e8c:	687b      	ldr	r3, [r7, #4]
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3718      	adds	r7, #24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <_close>:

int _close(int file)
{
 8000e96:	b480      	push	{r7}
 8000e98:	b083      	sub	sp, #12
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b083      	sub	sp, #12
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
 8000eb6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ebe:	605a      	str	r2, [r3, #4]
  return 0;
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <_isatty>:

int _isatty(int file)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	b083      	sub	sp, #12
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ed6:	2301      	movs	r3, #1
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3714      	adds	r7, #20
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
	...

08000f00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f08:	4a14      	ldr	r2, [pc, #80]	; (8000f5c <_sbrk+0x5c>)
 8000f0a:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <_sbrk+0x60>)
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f14:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <_sbrk+0x64>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d102      	bne.n	8000f22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f1c:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <_sbrk+0x64>)
 8000f1e:	4a12      	ldr	r2, [pc, #72]	; (8000f68 <_sbrk+0x68>)
 8000f20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f22:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <_sbrk+0x64>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4413      	add	r3, r2
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d207      	bcs.n	8000f40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f30:	f002 ff18 	bl	8003d64 <__errno>
 8000f34:	4603      	mov	r3, r0
 8000f36:	220c      	movs	r2, #12
 8000f38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3e:	e009      	b.n	8000f54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f40:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <_sbrk+0x64>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f46:	4b07      	ldr	r3, [pc, #28]	; (8000f64 <_sbrk+0x64>)
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	4a05      	ldr	r2, [pc, #20]	; (8000f64 <_sbrk+0x64>)
 8000f50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f52:	68fb      	ldr	r3, [r7, #12]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3718      	adds	r7, #24
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	2000a000 	.word	0x2000a000
 8000f60:	00000400 	.word	0x00000400
 8000f64:	20000120 	.word	0x20000120
 8000f68:	20000278 	.word	0x20000278

08000f6c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <SystemInit+0x20>)
 8000f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f76:	4a05      	ldr	r2, [pc, #20]	; (8000f8c <SystemInit+0x20>)
 8000f78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fc8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f94:	f7ff ffea 	bl	8000f6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f98:	480c      	ldr	r0, [pc, #48]	; (8000fcc <LoopForever+0x6>)
  ldr r1, =_edata
 8000f9a:	490d      	ldr	r1, [pc, #52]	; (8000fd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f9c:	4a0d      	ldr	r2, [pc, #52]	; (8000fd4 <LoopForever+0xe>)
  movs r3, #0
 8000f9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa0:	e002      	b.n	8000fa8 <LoopCopyDataInit>

08000fa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fa6:	3304      	adds	r3, #4

08000fa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000faa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fac:	d3f9      	bcc.n	8000fa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fae:	4a0a      	ldr	r2, [pc, #40]	; (8000fd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fb0:	4c0a      	ldr	r4, [pc, #40]	; (8000fdc <LoopForever+0x16>)
  movs r3, #0
 8000fb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb4:	e001      	b.n	8000fba <LoopFillZerobss>

08000fb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb8:	3204      	adds	r2, #4

08000fba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fbc:	d3fb      	bcc.n	8000fb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fbe:	f002 fed7 	bl	8003d70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fc2:	f7ff fdbb 	bl	8000b3c <main>

08000fc6 <LoopForever>:

LoopForever:
    b LoopForever
 8000fc6:	e7fe      	b.n	8000fc6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000fc8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000fcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000fd4:	0800429c 	.word	0x0800429c
  ldr r2, =_sbss
 8000fd8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000fdc:	20000274 	.word	0x20000274

08000fe0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fe0:	e7fe      	b.n	8000fe0 <ADC1_2_IRQHandler>
	...

08000fe4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fe8:	4b08      	ldr	r3, [pc, #32]	; (800100c <HAL_Init+0x28>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a07      	ldr	r2, [pc, #28]	; (800100c <HAL_Init+0x28>)
 8000fee:	f043 0310 	orr.w	r3, r3, #16
 8000ff2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff4:	2003      	movs	r0, #3
 8000ff6:	f000 f931 	bl	800125c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ffa:	200f      	movs	r0, #15
 8000ffc:	f000 f808 	bl	8001010 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001000:	f7ff fe80 	bl	8000d04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001004:	2300      	movs	r3, #0
}
 8001006:	4618      	mov	r0, r3
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40022000 	.word	0x40022000

08001010 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001018:	4b12      	ldr	r3, [pc, #72]	; (8001064 <HAL_InitTick+0x54>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4b12      	ldr	r3, [pc, #72]	; (8001068 <HAL_InitTick+0x58>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	4619      	mov	r1, r3
 8001022:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001026:	fbb3 f3f1 	udiv	r3, r3, r1
 800102a:	fbb2 f3f3 	udiv	r3, r2, r3
 800102e:	4618      	mov	r0, r3
 8001030:	f000 f93b 	bl	80012aa <HAL_SYSTICK_Config>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e00e      	b.n	800105c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2b0f      	cmp	r3, #15
 8001042:	d80a      	bhi.n	800105a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001044:	2200      	movs	r2, #0
 8001046:	6879      	ldr	r1, [r7, #4]
 8001048:	f04f 30ff 	mov.w	r0, #4294967295
 800104c:	f000 f911 	bl	8001272 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001050:	4a06      	ldr	r2, [pc, #24]	; (800106c <HAL_InitTick+0x5c>)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001056:	2300      	movs	r3, #0
 8001058:	e000      	b.n	800105c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
}
 800105c:	4618      	mov	r0, r3
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20000008 	.word	0x20000008
 8001068:	20000010 	.word	0x20000010
 800106c:	2000000c 	.word	0x2000000c

08001070 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <HAL_IncTick+0x20>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	461a      	mov	r2, r3
 800107a:	4b06      	ldr	r3, [pc, #24]	; (8001094 <HAL_IncTick+0x24>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4413      	add	r3, r2
 8001080:	4a04      	ldr	r2, [pc, #16]	; (8001094 <HAL_IncTick+0x24>)
 8001082:	6013      	str	r3, [r2, #0]
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	20000010 	.word	0x20000010
 8001094:	20000124 	.word	0x20000124

08001098 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return uwTick;  
 800109c:	4b03      	ldr	r3, [pc, #12]	; (80010ac <HAL_GetTick+0x14>)
 800109e:	681b      	ldr	r3, [r3, #0]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	20000124 	.word	0x20000124

080010b0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010b8:	f7ff ffee 	bl	8001098 <HAL_GetTick>
 80010bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010c8:	d005      	beq.n	80010d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ca:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <HAL_Delay+0x44>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	461a      	mov	r2, r3
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	4413      	add	r3, r2
 80010d4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80010d6:	bf00      	nop
 80010d8:	f7ff ffde 	bl	8001098 <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	68fa      	ldr	r2, [r7, #12]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d8f7      	bhi.n	80010d8 <HAL_Delay+0x28>
  {
  }
}
 80010e8:	bf00      	nop
 80010ea:	bf00      	nop
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000010 	.word	0x20000010

080010f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001108:	4b0c      	ldr	r3, [pc, #48]	; (800113c <__NVIC_SetPriorityGrouping+0x44>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800110e:	68ba      	ldr	r2, [r7, #8]
 8001110:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001114:	4013      	ands	r3, r2
 8001116:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001120:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001128:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800112a:	4a04      	ldr	r2, [pc, #16]	; (800113c <__NVIC_SetPriorityGrouping+0x44>)
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	60d3      	str	r3, [r2, #12]
}
 8001130:	bf00      	nop
 8001132:	3714      	adds	r7, #20
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001144:	4b04      	ldr	r3, [pc, #16]	; (8001158 <__NVIC_GetPriorityGrouping+0x18>)
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	0a1b      	lsrs	r3, r3, #8
 800114a:	f003 0307 	and.w	r3, r3, #7
}
 800114e:	4618      	mov	r0, r3
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	6039      	str	r1, [r7, #0]
 8001166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116c:	2b00      	cmp	r3, #0
 800116e:	db0a      	blt.n	8001186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	b2da      	uxtb	r2, r3
 8001174:	490c      	ldr	r1, [pc, #48]	; (80011a8 <__NVIC_SetPriority+0x4c>)
 8001176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117a:	0112      	lsls	r2, r2, #4
 800117c:	b2d2      	uxtb	r2, r2
 800117e:	440b      	add	r3, r1
 8001180:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001184:	e00a      	b.n	800119c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	b2da      	uxtb	r2, r3
 800118a:	4908      	ldr	r1, [pc, #32]	; (80011ac <__NVIC_SetPriority+0x50>)
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	f003 030f 	and.w	r3, r3, #15
 8001192:	3b04      	subs	r3, #4
 8001194:	0112      	lsls	r2, r2, #4
 8001196:	b2d2      	uxtb	r2, r2
 8001198:	440b      	add	r3, r1
 800119a:	761a      	strb	r2, [r3, #24]
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000e100 	.word	0xe000e100
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b089      	sub	sp, #36	; 0x24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	f1c3 0307 	rsb	r3, r3, #7
 80011ca:	2b04      	cmp	r3, #4
 80011cc:	bf28      	it	cs
 80011ce:	2304      	movcs	r3, #4
 80011d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3304      	adds	r3, #4
 80011d6:	2b06      	cmp	r3, #6
 80011d8:	d902      	bls.n	80011e0 <NVIC_EncodePriority+0x30>
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3b03      	subs	r3, #3
 80011de:	e000      	b.n	80011e2 <NVIC_EncodePriority+0x32>
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e4:	f04f 32ff 	mov.w	r2, #4294967295
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43da      	mvns	r2, r3
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	401a      	ands	r2, r3
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f8:	f04f 31ff 	mov.w	r1, #4294967295
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001202:	43d9      	mvns	r1, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001208:	4313      	orrs	r3, r2
         );
}
 800120a:	4618      	mov	r0, r3
 800120c:	3724      	adds	r7, #36	; 0x24
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
	...

08001218 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3b01      	subs	r3, #1
 8001224:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001228:	d301      	bcc.n	800122e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800122a:	2301      	movs	r3, #1
 800122c:	e00f      	b.n	800124e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800122e:	4a0a      	ldr	r2, [pc, #40]	; (8001258 <SysTick_Config+0x40>)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3b01      	subs	r3, #1
 8001234:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001236:	210f      	movs	r1, #15
 8001238:	f04f 30ff 	mov.w	r0, #4294967295
 800123c:	f7ff ff8e 	bl	800115c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001240:	4b05      	ldr	r3, [pc, #20]	; (8001258 <SysTick_Config+0x40>)
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001246:	4b04      	ldr	r3, [pc, #16]	; (8001258 <SysTick_Config+0x40>)
 8001248:	2207      	movs	r2, #7
 800124a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	e000e010 	.word	0xe000e010

0800125c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff ff47 	bl	80010f8 <__NVIC_SetPriorityGrouping>
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b086      	sub	sp, #24
 8001276:	af00      	add	r7, sp, #0
 8001278:	4603      	mov	r3, r0
 800127a:	60b9      	str	r1, [r7, #8]
 800127c:	607a      	str	r2, [r7, #4]
 800127e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001284:	f7ff ff5c 	bl	8001140 <__NVIC_GetPriorityGrouping>
 8001288:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	68b9      	ldr	r1, [r7, #8]
 800128e:	6978      	ldr	r0, [r7, #20]
 8001290:	f7ff ff8e 	bl	80011b0 <NVIC_EncodePriority>
 8001294:	4602      	mov	r2, r0
 8001296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800129a:	4611      	mov	r1, r2
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ff5d 	bl	800115c <__NVIC_SetPriority>
}
 80012a2:	bf00      	nop
 80012a4:	3718      	adds	r7, #24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f7ff ffb0 	bl	8001218 <SysTick_Config>
 80012b8:	4603      	mov	r3, r0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
	...

080012c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b087      	sub	sp, #28
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012ce:	2300      	movs	r3, #0
 80012d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012d2:	e154      	b.n	800157e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	2101      	movs	r1, #1
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	fa01 f303 	lsl.w	r3, r1, r3
 80012e0:	4013      	ands	r3, r2
 80012e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	f000 8146 	beq.w	8001578 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f003 0303 	and.w	r3, r3, #3
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d005      	beq.n	8001304 <HAL_GPIO_Init+0x40>
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f003 0303 	and.w	r3, r3, #3
 8001300:	2b02      	cmp	r3, #2
 8001302:	d130      	bne.n	8001366 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	2203      	movs	r2, #3
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	43db      	mvns	r3, r3
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	4013      	ands	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	68da      	ldr	r2, [r3, #12]
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	4313      	orrs	r3, r2
 800132c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800133a:	2201      	movs	r2, #1
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43db      	mvns	r3, r3
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	4013      	ands	r3, r2
 8001348:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	091b      	lsrs	r3, r3, #4
 8001350:	f003 0201 	and.w	r2, r3, #1
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	4313      	orrs	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f003 0303 	and.w	r3, r3, #3
 800136e:	2b03      	cmp	r3, #3
 8001370:	d017      	beq.n	80013a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	68db      	ldr	r3, [r3, #12]
 8001376:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	2203      	movs	r2, #3
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43db      	mvns	r3, r3
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	4013      	ands	r3, r2
 8001388:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	689a      	ldr	r2, [r3, #8]
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	4313      	orrs	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f003 0303 	and.w	r3, r3, #3
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d123      	bne.n	80013f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	08da      	lsrs	r2, r3, #3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	3208      	adds	r2, #8
 80013b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	220f      	movs	r2, #15
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43db      	mvns	r3, r3
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	4013      	ands	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	691a      	ldr	r2, [r3, #16]
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	f003 0307 	and.w	r3, r3, #7
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	08da      	lsrs	r2, r3, #3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	3208      	adds	r2, #8
 80013f0:	6939      	ldr	r1, [r7, #16]
 80013f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	2203      	movs	r2, #3
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43db      	mvns	r3, r3
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	4013      	ands	r3, r2
 800140c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f003 0203 	and.w	r2, r3, #3
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	4313      	orrs	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001432:	2b00      	cmp	r3, #0
 8001434:	f000 80a0 	beq.w	8001578 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001438:	4b58      	ldr	r3, [pc, #352]	; (800159c <HAL_GPIO_Init+0x2d8>)
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	4a57      	ldr	r2, [pc, #348]	; (800159c <HAL_GPIO_Init+0x2d8>)
 800143e:	f043 0301 	orr.w	r3, r3, #1
 8001442:	6193      	str	r3, [r2, #24]
 8001444:	4b55      	ldr	r3, [pc, #340]	; (800159c <HAL_GPIO_Init+0x2d8>)
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	f003 0301 	and.w	r3, r3, #1
 800144c:	60bb      	str	r3, [r7, #8]
 800144e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001450:	4a53      	ldr	r2, [pc, #332]	; (80015a0 <HAL_GPIO_Init+0x2dc>)
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	089b      	lsrs	r3, r3, #2
 8001456:	3302      	adds	r3, #2
 8001458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800145c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	f003 0303 	and.w	r3, r3, #3
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	220f      	movs	r2, #15
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	43db      	mvns	r3, r3
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	4013      	ands	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800147a:	d019      	beq.n	80014b0 <HAL_GPIO_Init+0x1ec>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4a49      	ldr	r2, [pc, #292]	; (80015a4 <HAL_GPIO_Init+0x2e0>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d013      	beq.n	80014ac <HAL_GPIO_Init+0x1e8>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	4a48      	ldr	r2, [pc, #288]	; (80015a8 <HAL_GPIO_Init+0x2e4>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d00d      	beq.n	80014a8 <HAL_GPIO_Init+0x1e4>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4a47      	ldr	r2, [pc, #284]	; (80015ac <HAL_GPIO_Init+0x2e8>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d007      	beq.n	80014a4 <HAL_GPIO_Init+0x1e0>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4a46      	ldr	r2, [pc, #280]	; (80015b0 <HAL_GPIO_Init+0x2ec>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d101      	bne.n	80014a0 <HAL_GPIO_Init+0x1dc>
 800149c:	2304      	movs	r3, #4
 800149e:	e008      	b.n	80014b2 <HAL_GPIO_Init+0x1ee>
 80014a0:	2305      	movs	r3, #5
 80014a2:	e006      	b.n	80014b2 <HAL_GPIO_Init+0x1ee>
 80014a4:	2303      	movs	r3, #3
 80014a6:	e004      	b.n	80014b2 <HAL_GPIO_Init+0x1ee>
 80014a8:	2302      	movs	r3, #2
 80014aa:	e002      	b.n	80014b2 <HAL_GPIO_Init+0x1ee>
 80014ac:	2301      	movs	r3, #1
 80014ae:	e000      	b.n	80014b2 <HAL_GPIO_Init+0x1ee>
 80014b0:	2300      	movs	r3, #0
 80014b2:	697a      	ldr	r2, [r7, #20]
 80014b4:	f002 0203 	and.w	r2, r2, #3
 80014b8:	0092      	lsls	r2, r2, #2
 80014ba:	4093      	lsls	r3, r2
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	4313      	orrs	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014c2:	4937      	ldr	r1, [pc, #220]	; (80015a0 <HAL_GPIO_Init+0x2dc>)
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	089b      	lsrs	r3, r3, #2
 80014c8:	3302      	adds	r3, #2
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014d0:	4b38      	ldr	r3, [pc, #224]	; (80015b4 <HAL_GPIO_Init+0x2f0>)
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	43db      	mvns	r3, r3
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	4013      	ands	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d003      	beq.n	80014f4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80014f4:	4a2f      	ldr	r2, [pc, #188]	; (80015b4 <HAL_GPIO_Init+0x2f0>)
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014fa:	4b2e      	ldr	r3, [pc, #184]	; (80015b4 <HAL_GPIO_Init+0x2f0>)
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	43db      	mvns	r3, r3
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	4013      	ands	r3, r2
 8001508:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d003      	beq.n	800151e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	4313      	orrs	r3, r2
 800151c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800151e:	4a25      	ldr	r2, [pc, #148]	; (80015b4 <HAL_GPIO_Init+0x2f0>)
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001524:	4b23      	ldr	r3, [pc, #140]	; (80015b4 <HAL_GPIO_Init+0x2f0>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	43db      	mvns	r3, r3
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	4013      	ands	r3, r2
 8001532:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153c:	2b00      	cmp	r3, #0
 800153e:	d003      	beq.n	8001548 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	4313      	orrs	r3, r2
 8001546:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001548:	4a1a      	ldr	r2, [pc, #104]	; (80015b4 <HAL_GPIO_Init+0x2f0>)
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800154e:	4b19      	ldr	r3, [pc, #100]	; (80015b4 <HAL_GPIO_Init+0x2f0>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	43db      	mvns	r3, r3
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	4013      	ands	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d003      	beq.n	8001572 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	4313      	orrs	r3, r2
 8001570:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001572:	4a10      	ldr	r2, [pc, #64]	; (80015b4 <HAL_GPIO_Init+0x2f0>)
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	3301      	adds	r3, #1
 800157c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	fa22 f303 	lsr.w	r3, r2, r3
 8001588:	2b00      	cmp	r3, #0
 800158a:	f47f aea3 	bne.w	80012d4 <HAL_GPIO_Init+0x10>
  }
}
 800158e:	bf00      	nop
 8001590:	bf00      	nop
 8001592:	371c      	adds	r7, #28
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	40021000 	.word	0x40021000
 80015a0:	40010000 	.word	0x40010000
 80015a4:	48000400 	.word	0x48000400
 80015a8:	48000800 	.word	0x48000800
 80015ac:	48000c00 	.word	0x48000c00
 80015b0:	48001000 	.word	0x48001000
 80015b4:	40010400 	.word	0x40010400

080015b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	460b      	mov	r3, r1
 80015c2:	807b      	strh	r3, [r7, #2]
 80015c4:	4613      	mov	r3, r2
 80015c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015c8:	787b      	ldrb	r3, [r7, #1]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d003      	beq.n	80015d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015ce:	887a      	ldrh	r2, [r7, #2]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015d4:	e002      	b.n	80015dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015d6:	887a      	ldrh	r2, [r7, #2]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015dc:	bf00      	nop
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015f8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d102      	bne.n	800160e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	f001 b823 	b.w	8002654 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800160e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001612:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	2b00      	cmp	r3, #0
 8001620:	f000 817d 	beq.w	800191e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001624:	4bbc      	ldr	r3, [pc, #752]	; (8001918 <HAL_RCC_OscConfig+0x330>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f003 030c 	and.w	r3, r3, #12
 800162c:	2b04      	cmp	r3, #4
 800162e:	d00c      	beq.n	800164a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001630:	4bb9      	ldr	r3, [pc, #740]	; (8001918 <HAL_RCC_OscConfig+0x330>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f003 030c 	and.w	r3, r3, #12
 8001638:	2b08      	cmp	r3, #8
 800163a:	d15c      	bne.n	80016f6 <HAL_RCC_OscConfig+0x10e>
 800163c:	4bb6      	ldr	r3, [pc, #728]	; (8001918 <HAL_RCC_OscConfig+0x330>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001648:	d155      	bne.n	80016f6 <HAL_RCC_OscConfig+0x10e>
 800164a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800164e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001652:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001656:	fa93 f3a3 	rbit	r3, r3
 800165a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800165e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001662:	fab3 f383 	clz	r3, r3
 8001666:	b2db      	uxtb	r3, r3
 8001668:	095b      	lsrs	r3, r3, #5
 800166a:	b2db      	uxtb	r3, r3
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	b2db      	uxtb	r3, r3
 8001672:	2b01      	cmp	r3, #1
 8001674:	d102      	bne.n	800167c <HAL_RCC_OscConfig+0x94>
 8001676:	4ba8      	ldr	r3, [pc, #672]	; (8001918 <HAL_RCC_OscConfig+0x330>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	e015      	b.n	80016a8 <HAL_RCC_OscConfig+0xc0>
 800167c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001680:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001684:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001688:	fa93 f3a3 	rbit	r3, r3
 800168c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001690:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001694:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001698:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800169c:	fa93 f3a3 	rbit	r3, r3
 80016a0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80016a4:	4b9c      	ldr	r3, [pc, #624]	; (8001918 <HAL_RCC_OscConfig+0x330>)
 80016a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016ac:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80016b0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80016b4:	fa92 f2a2 	rbit	r2, r2
 80016b8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80016bc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80016c0:	fab2 f282 	clz	r2, r2
 80016c4:	b2d2      	uxtb	r2, r2
 80016c6:	f042 0220 	orr.w	r2, r2, #32
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	f002 021f 	and.w	r2, r2, #31
 80016d0:	2101      	movs	r1, #1
 80016d2:	fa01 f202 	lsl.w	r2, r1, r2
 80016d6:	4013      	ands	r3, r2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	f000 811f 	beq.w	800191c <HAL_RCC_OscConfig+0x334>
 80016de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f040 8116 	bne.w	800191c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	f000 bfaf 	b.w	8002654 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001706:	d106      	bne.n	8001716 <HAL_RCC_OscConfig+0x12e>
 8001708:	4b83      	ldr	r3, [pc, #524]	; (8001918 <HAL_RCC_OscConfig+0x330>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a82      	ldr	r2, [pc, #520]	; (8001918 <HAL_RCC_OscConfig+0x330>)
 800170e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001712:	6013      	str	r3, [r2, #0]
 8001714:	e036      	b.n	8001784 <HAL_RCC_OscConfig+0x19c>
 8001716:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800171a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d10c      	bne.n	8001740 <HAL_RCC_OscConfig+0x158>
 8001726:	4b7c      	ldr	r3, [pc, #496]	; (8001918 <HAL_RCC_OscConfig+0x330>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a7b      	ldr	r2, [pc, #492]	; (8001918 <HAL_RCC_OscConfig+0x330>)
 800172c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001730:	6013      	str	r3, [r2, #0]
 8001732:	4b79      	ldr	r3, [pc, #484]	; (8001918 <HAL_RCC_OscConfig+0x330>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a78      	ldr	r2, [pc, #480]	; (8001918 <HAL_RCC_OscConfig+0x330>)
 8001738:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800173c:	6013      	str	r3, [r2, #0]
 800173e:	e021      	b.n	8001784 <HAL_RCC_OscConfig+0x19c>
 8001740:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001744:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001750:	d10c      	bne.n	800176c <HAL_RCC_OscConfig+0x184>
 8001752:	4b71      	ldr	r3, [pc, #452]	; (8001918 <HAL_RCC_OscConfig+0x330>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a70      	ldr	r2, [pc, #448]	; (8001918 <HAL_RCC_OscConfig+0x330>)
 8001758:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800175c:	6013      	str	r3, [r2, #0]
 800175e:	4b6e      	ldr	r3, [pc, #440]	; (8001918 <HAL_RCC_OscConfig+0x330>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a6d      	ldr	r2, [pc, #436]	; (8001918 <HAL_RCC_OscConfig+0x330>)
 8001764:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001768:	6013      	str	r3, [r2, #0]
 800176a:	e00b      	b.n	8001784 <HAL_RCC_OscConfig+0x19c>
 800176c:	4b6a      	ldr	r3, [pc, #424]	; (8001918 <HAL_RCC_OscConfig+0x330>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a69      	ldr	r2, [pc, #420]	; (8001918 <HAL_RCC_OscConfig+0x330>)
 8001772:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001776:	6013      	str	r3, [r2, #0]
 8001778:	4b67      	ldr	r3, [pc, #412]	; (8001918 <HAL_RCC_OscConfig+0x330>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a66      	ldr	r2, [pc, #408]	; (8001918 <HAL_RCC_OscConfig+0x330>)
 800177e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001782:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001784:	4b64      	ldr	r3, [pc, #400]	; (8001918 <HAL_RCC_OscConfig+0x330>)
 8001786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001788:	f023 020f 	bic.w	r2, r3, #15
 800178c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001790:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	495f      	ldr	r1, [pc, #380]	; (8001918 <HAL_RCC_OscConfig+0x330>)
 800179a:	4313      	orrs	r3, r2
 800179c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800179e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d059      	beq.n	8001862 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ae:	f7ff fc73 	bl	8001098 <HAL_GetTick>
 80017b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017b6:	e00a      	b.n	80017ce <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017b8:	f7ff fc6e 	bl	8001098 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b64      	cmp	r3, #100	; 0x64
 80017c6:	d902      	bls.n	80017ce <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	f000 bf43 	b.w	8002654 <HAL_RCC_OscConfig+0x106c>
 80017ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017d2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80017da:	fa93 f3a3 	rbit	r3, r3
 80017de:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80017e2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e6:	fab3 f383 	clz	r3, r3
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	095b      	lsrs	r3, r3, #5
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d102      	bne.n	8001800 <HAL_RCC_OscConfig+0x218>
 80017fa:	4b47      	ldr	r3, [pc, #284]	; (8001918 <HAL_RCC_OscConfig+0x330>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	e015      	b.n	800182c <HAL_RCC_OscConfig+0x244>
 8001800:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001804:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001808:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800180c:	fa93 f3a3 	rbit	r3, r3
 8001810:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001814:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001818:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800181c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001820:	fa93 f3a3 	rbit	r3, r3
 8001824:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001828:	4b3b      	ldr	r3, [pc, #236]	; (8001918 <HAL_RCC_OscConfig+0x330>)
 800182a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001830:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001834:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001838:	fa92 f2a2 	rbit	r2, r2
 800183c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001840:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001844:	fab2 f282 	clz	r2, r2
 8001848:	b2d2      	uxtb	r2, r2
 800184a:	f042 0220 	orr.w	r2, r2, #32
 800184e:	b2d2      	uxtb	r2, r2
 8001850:	f002 021f 	and.w	r2, r2, #31
 8001854:	2101      	movs	r1, #1
 8001856:	fa01 f202 	lsl.w	r2, r1, r2
 800185a:	4013      	ands	r3, r2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d0ab      	beq.n	80017b8 <HAL_RCC_OscConfig+0x1d0>
 8001860:	e05d      	b.n	800191e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001862:	f7ff fc19 	bl	8001098 <HAL_GetTick>
 8001866:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800186a:	e00a      	b.n	8001882 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800186c:	f7ff fc14 	bl	8001098 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b64      	cmp	r3, #100	; 0x64
 800187a:	d902      	bls.n	8001882 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	f000 bee9 	b.w	8002654 <HAL_RCC_OscConfig+0x106c>
 8001882:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001886:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800188e:	fa93 f3a3 	rbit	r3, r3
 8001892:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001896:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800189a:	fab3 f383 	clz	r3, r3
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	095b      	lsrs	r3, r3, #5
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d102      	bne.n	80018b4 <HAL_RCC_OscConfig+0x2cc>
 80018ae:	4b1a      	ldr	r3, [pc, #104]	; (8001918 <HAL_RCC_OscConfig+0x330>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	e015      	b.n	80018e0 <HAL_RCC_OscConfig+0x2f8>
 80018b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018b8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018bc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80018c0:	fa93 f3a3 	rbit	r3, r3
 80018c4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80018c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018cc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80018d0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80018d4:	fa93 f3a3 	rbit	r3, r3
 80018d8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80018dc:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <HAL_RCC_OscConfig+0x330>)
 80018de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018e4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80018e8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80018ec:	fa92 f2a2 	rbit	r2, r2
 80018f0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80018f4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80018f8:	fab2 f282 	clz	r2, r2
 80018fc:	b2d2      	uxtb	r2, r2
 80018fe:	f042 0220 	orr.w	r2, r2, #32
 8001902:	b2d2      	uxtb	r2, r2
 8001904:	f002 021f 	and.w	r2, r2, #31
 8001908:	2101      	movs	r1, #1
 800190a:	fa01 f202 	lsl.w	r2, r1, r2
 800190e:	4013      	ands	r3, r2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d1ab      	bne.n	800186c <HAL_RCC_OscConfig+0x284>
 8001914:	e003      	b.n	800191e <HAL_RCC_OscConfig+0x336>
 8001916:	bf00      	nop
 8001918:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800191c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800191e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001922:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	f000 817d 	beq.w	8001c2e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001934:	4ba6      	ldr	r3, [pc, #664]	; (8001bd0 <HAL_RCC_OscConfig+0x5e8>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 030c 	and.w	r3, r3, #12
 800193c:	2b00      	cmp	r3, #0
 800193e:	d00b      	beq.n	8001958 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001940:	4ba3      	ldr	r3, [pc, #652]	; (8001bd0 <HAL_RCC_OscConfig+0x5e8>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f003 030c 	and.w	r3, r3, #12
 8001948:	2b08      	cmp	r3, #8
 800194a:	d172      	bne.n	8001a32 <HAL_RCC_OscConfig+0x44a>
 800194c:	4ba0      	ldr	r3, [pc, #640]	; (8001bd0 <HAL_RCC_OscConfig+0x5e8>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d16c      	bne.n	8001a32 <HAL_RCC_OscConfig+0x44a>
 8001958:	2302      	movs	r3, #2
 800195a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001962:	fa93 f3a3 	rbit	r3, r3
 8001966:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800196a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800196e:	fab3 f383 	clz	r3, r3
 8001972:	b2db      	uxtb	r3, r3
 8001974:	095b      	lsrs	r3, r3, #5
 8001976:	b2db      	uxtb	r3, r3
 8001978:	f043 0301 	orr.w	r3, r3, #1
 800197c:	b2db      	uxtb	r3, r3
 800197e:	2b01      	cmp	r3, #1
 8001980:	d102      	bne.n	8001988 <HAL_RCC_OscConfig+0x3a0>
 8001982:	4b93      	ldr	r3, [pc, #588]	; (8001bd0 <HAL_RCC_OscConfig+0x5e8>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	e013      	b.n	80019b0 <HAL_RCC_OscConfig+0x3c8>
 8001988:	2302      	movs	r3, #2
 800198a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001992:	fa93 f3a3 	rbit	r3, r3
 8001996:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800199a:	2302      	movs	r3, #2
 800199c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80019a0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80019a4:	fa93 f3a3 	rbit	r3, r3
 80019a8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80019ac:	4b88      	ldr	r3, [pc, #544]	; (8001bd0 <HAL_RCC_OscConfig+0x5e8>)
 80019ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b0:	2202      	movs	r2, #2
 80019b2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80019b6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80019ba:	fa92 f2a2 	rbit	r2, r2
 80019be:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80019c2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80019c6:	fab2 f282 	clz	r2, r2
 80019ca:	b2d2      	uxtb	r2, r2
 80019cc:	f042 0220 	orr.w	r2, r2, #32
 80019d0:	b2d2      	uxtb	r2, r2
 80019d2:	f002 021f 	and.w	r2, r2, #31
 80019d6:	2101      	movs	r1, #1
 80019d8:	fa01 f202 	lsl.w	r2, r1, r2
 80019dc:	4013      	ands	r3, r2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d00a      	beq.n	80019f8 <HAL_RCC_OscConfig+0x410>
 80019e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d002      	beq.n	80019f8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	f000 be2e 	b.w	8002654 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f8:	4b75      	ldr	r3, [pc, #468]	; (8001bd0 <HAL_RCC_OscConfig+0x5e8>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a04:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	695b      	ldr	r3, [r3, #20]
 8001a0c:	21f8      	movs	r1, #248	; 0xf8
 8001a0e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a12:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001a16:	fa91 f1a1 	rbit	r1, r1
 8001a1a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001a1e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001a22:	fab1 f181 	clz	r1, r1
 8001a26:	b2c9      	uxtb	r1, r1
 8001a28:	408b      	lsls	r3, r1
 8001a2a:	4969      	ldr	r1, [pc, #420]	; (8001bd0 <HAL_RCC_OscConfig+0x5e8>)
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a30:	e0fd      	b.n	8001c2e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	f000 8088 	beq.w	8001b54 <HAL_RCC_OscConfig+0x56c>
 8001a44:	2301      	movs	r3, #1
 8001a46:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001a4e:	fa93 f3a3 	rbit	r3, r3
 8001a52:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001a56:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a5a:	fab3 f383 	clz	r3, r3
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a64:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a70:	f7ff fb12 	bl	8001098 <HAL_GetTick>
 8001a74:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a78:	e00a      	b.n	8001a90 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a7a:	f7ff fb0d 	bl	8001098 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d902      	bls.n	8001a90 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	f000 bde2 	b.w	8002654 <HAL_RCC_OscConfig+0x106c>
 8001a90:	2302      	movs	r3, #2
 8001a92:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a96:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001a9a:	fa93 f3a3 	rbit	r3, r3
 8001a9e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001aa2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aa6:	fab3 f383 	clz	r3, r3
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	095b      	lsrs	r3, r3, #5
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	f043 0301 	orr.w	r3, r3, #1
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d102      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x4d8>
 8001aba:	4b45      	ldr	r3, [pc, #276]	; (8001bd0 <HAL_RCC_OscConfig+0x5e8>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	e013      	b.n	8001ae8 <HAL_RCC_OscConfig+0x500>
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001aca:	fa93 f3a3 	rbit	r3, r3
 8001ace:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001ad8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001adc:	fa93 f3a3 	rbit	r3, r3
 8001ae0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001ae4:	4b3a      	ldr	r3, [pc, #232]	; (8001bd0 <HAL_RCC_OscConfig+0x5e8>)
 8001ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae8:	2202      	movs	r2, #2
 8001aea:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001aee:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001af2:	fa92 f2a2 	rbit	r2, r2
 8001af6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001afa:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001afe:	fab2 f282 	clz	r2, r2
 8001b02:	b2d2      	uxtb	r2, r2
 8001b04:	f042 0220 	orr.w	r2, r2, #32
 8001b08:	b2d2      	uxtb	r2, r2
 8001b0a:	f002 021f 	and.w	r2, r2, #31
 8001b0e:	2101      	movs	r1, #1
 8001b10:	fa01 f202 	lsl.w	r2, r1, r2
 8001b14:	4013      	ands	r3, r2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d0af      	beq.n	8001a7a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b1a:	4b2d      	ldr	r3, [pc, #180]	; (8001bd0 <HAL_RCC_OscConfig+0x5e8>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	695b      	ldr	r3, [r3, #20]
 8001b2e:	21f8      	movs	r1, #248	; 0xf8
 8001b30:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b34:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001b38:	fa91 f1a1 	rbit	r1, r1
 8001b3c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001b40:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001b44:	fab1 f181 	clz	r1, r1
 8001b48:	b2c9      	uxtb	r1, r1
 8001b4a:	408b      	lsls	r3, r1
 8001b4c:	4920      	ldr	r1, [pc, #128]	; (8001bd0 <HAL_RCC_OscConfig+0x5e8>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	600b      	str	r3, [r1, #0]
 8001b52:	e06c      	b.n	8001c2e <HAL_RCC_OscConfig+0x646>
 8001b54:	2301      	movs	r3, #1
 8001b56:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001b5e:	fa93 f3a3 	rbit	r3, r3
 8001b62:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001b66:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b6a:	fab3 f383 	clz	r3, r3
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b74:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b80:	f7ff fa8a 	bl	8001098 <HAL_GetTick>
 8001b84:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b88:	e00a      	b.n	8001ba0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b8a:	f7ff fa85 	bl	8001098 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d902      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	f000 bd5a 	b.w	8002654 <HAL_RCC_OscConfig+0x106c>
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001baa:	fa93 f3a3 	rbit	r3, r3
 8001bae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001bb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bb6:	fab3 f383 	clz	r3, r3
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	095b      	lsrs	r3, r3, #5
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d104      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x5ec>
 8001bca:	4b01      	ldr	r3, [pc, #4]	; (8001bd0 <HAL_RCC_OscConfig+0x5e8>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	e015      	b.n	8001bfc <HAL_RCC_OscConfig+0x614>
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bda:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001bde:	fa93 f3a3 	rbit	r3, r3
 8001be2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001be6:	2302      	movs	r3, #2
 8001be8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001bec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001bf0:	fa93 f3a3 	rbit	r3, r3
 8001bf4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001bf8:	4bc8      	ldr	r3, [pc, #800]	; (8001f1c <HAL_RCC_OscConfig+0x934>)
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfc:	2202      	movs	r2, #2
 8001bfe:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001c02:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001c06:	fa92 f2a2 	rbit	r2, r2
 8001c0a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001c0e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001c12:	fab2 f282 	clz	r2, r2
 8001c16:	b2d2      	uxtb	r2, r2
 8001c18:	f042 0220 	orr.w	r2, r2, #32
 8001c1c:	b2d2      	uxtb	r2, r2
 8001c1e:	f002 021f 	and.w	r2, r2, #31
 8001c22:	2101      	movs	r1, #1
 8001c24:	fa01 f202 	lsl.w	r2, r1, r2
 8001c28:	4013      	ands	r3, r2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1ad      	bne.n	8001b8a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0308 	and.w	r3, r3, #8
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	f000 8110 	beq.w	8001e64 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c48:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d079      	beq.n	8001d48 <HAL_RCC_OscConfig+0x760>
 8001c54:	2301      	movs	r3, #1
 8001c56:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001c5e:	fa93 f3a3 	rbit	r3, r3
 8001c62:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001c66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c6a:	fab3 f383 	clz	r3, r3
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	461a      	mov	r2, r3
 8001c72:	4bab      	ldr	r3, [pc, #684]	; (8001f20 <HAL_RCC_OscConfig+0x938>)
 8001c74:	4413      	add	r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	461a      	mov	r2, r3
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c7e:	f7ff fa0b 	bl	8001098 <HAL_GetTick>
 8001c82:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c86:	e00a      	b.n	8001c9e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c88:	f7ff fa06 	bl	8001098 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d902      	bls.n	8001c9e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	f000 bcdb 	b.w	8002654 <HAL_RCC_OscConfig+0x106c>
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001ca8:	fa93 f3a3 	rbit	r3, r3
 8001cac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001cb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001cb8:	2202      	movs	r2, #2
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	fa93 f2a3 	rbit	r2, r3
 8001cca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001cdc:	2202      	movs	r2, #2
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	fa93 f2a3 	rbit	r2, r3
 8001cee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001cf6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cf8:	4b88      	ldr	r3, [pc, #544]	; (8001f1c <HAL_RCC_OscConfig+0x934>)
 8001cfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d00:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d04:	2102      	movs	r1, #2
 8001d06:	6019      	str	r1, [r3, #0]
 8001d08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d0c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	fa93 f1a3 	rbit	r1, r3
 8001d16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d1a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001d1e:	6019      	str	r1, [r3, #0]
  return result;
 8001d20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d24:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	fab3 f383 	clz	r3, r3
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	f003 031f 	and.w	r3, r3, #31
 8001d3a:	2101      	movs	r1, #1
 8001d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d40:	4013      	ands	r3, r2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d0a0      	beq.n	8001c88 <HAL_RCC_OscConfig+0x6a0>
 8001d46:	e08d      	b.n	8001e64 <HAL_RCC_OscConfig+0x87c>
 8001d48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d4c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001d50:	2201      	movs	r2, #1
 8001d52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d58:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	fa93 f2a3 	rbit	r2, r3
 8001d62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d66:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001d6a:	601a      	str	r2, [r3, #0]
  return result;
 8001d6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d70:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001d74:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d76:	fab3 f383 	clz	r3, r3
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	4b68      	ldr	r3, [pc, #416]	; (8001f20 <HAL_RCC_OscConfig+0x938>)
 8001d80:	4413      	add	r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	461a      	mov	r2, r3
 8001d86:	2300      	movs	r3, #0
 8001d88:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d8a:	f7ff f985 	bl	8001098 <HAL_GetTick>
 8001d8e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d92:	e00a      	b.n	8001daa <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d94:	f7ff f980 	bl	8001098 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d902      	bls.n	8001daa <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	f000 bc55 	b.w	8002654 <HAL_RCC_OscConfig+0x106c>
 8001daa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dae:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001db2:	2202      	movs	r2, #2
 8001db4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dba:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	fa93 f2a3 	rbit	r2, r3
 8001dc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dc8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dd2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001dd6:	2202      	movs	r2, #2
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dde:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	fa93 f2a3 	rbit	r2, r3
 8001de8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001df6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	fa93 f2a3 	rbit	r2, r3
 8001e0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e10:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001e14:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e16:	4b41      	ldr	r3, [pc, #260]	; (8001f1c <HAL_RCC_OscConfig+0x934>)
 8001e18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e1e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001e22:	2102      	movs	r1, #2
 8001e24:	6019      	str	r1, [r3, #0]
 8001e26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e2a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	fa93 f1a3 	rbit	r1, r3
 8001e34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e38:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001e3c:	6019      	str	r1, [r3, #0]
  return result;
 8001e3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e42:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	fab3 f383 	clz	r3, r3
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	f003 031f 	and.w	r3, r3, #31
 8001e58:	2101      	movs	r1, #1
 8001e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5e:	4013      	ands	r3, r2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d197      	bne.n	8001d94 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e68:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0304 	and.w	r3, r3, #4
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	f000 81a1 	beq.w	80021bc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e80:	4b26      	ldr	r3, [pc, #152]	; (8001f1c <HAL_RCC_OscConfig+0x934>)
 8001e82:	69db      	ldr	r3, [r3, #28]
 8001e84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d116      	bne.n	8001eba <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e8c:	4b23      	ldr	r3, [pc, #140]	; (8001f1c <HAL_RCC_OscConfig+0x934>)
 8001e8e:	69db      	ldr	r3, [r3, #28]
 8001e90:	4a22      	ldr	r2, [pc, #136]	; (8001f1c <HAL_RCC_OscConfig+0x934>)
 8001e92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e96:	61d3      	str	r3, [r2, #28]
 8001e98:	4b20      	ldr	r3, [pc, #128]	; (8001f1c <HAL_RCC_OscConfig+0x934>)
 8001e9a:	69db      	ldr	r3, [r3, #28]
 8001e9c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001ea0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eae:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001eb2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eba:	4b1a      	ldr	r3, [pc, #104]	; (8001f24 <HAL_RCC_OscConfig+0x93c>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d11a      	bne.n	8001efc <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ec6:	4b17      	ldr	r3, [pc, #92]	; (8001f24 <HAL_RCC_OscConfig+0x93c>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a16      	ldr	r2, [pc, #88]	; (8001f24 <HAL_RCC_OscConfig+0x93c>)
 8001ecc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ed2:	f7ff f8e1 	bl	8001098 <HAL_GetTick>
 8001ed6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eda:	e009      	b.n	8001ef0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001edc:	f7ff f8dc 	bl	8001098 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b64      	cmp	r3, #100	; 0x64
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e3b1      	b.n	8002654 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef0:	4b0c      	ldr	r3, [pc, #48]	; (8001f24 <HAL_RCC_OscConfig+0x93c>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d0ef      	beq.n	8001edc <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001efc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f00:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d10d      	bne.n	8001f28 <HAL_RCC_OscConfig+0x940>
 8001f0c:	4b03      	ldr	r3, [pc, #12]	; (8001f1c <HAL_RCC_OscConfig+0x934>)
 8001f0e:	6a1b      	ldr	r3, [r3, #32]
 8001f10:	4a02      	ldr	r2, [pc, #8]	; (8001f1c <HAL_RCC_OscConfig+0x934>)
 8001f12:	f043 0301 	orr.w	r3, r3, #1
 8001f16:	6213      	str	r3, [r2, #32]
 8001f18:	e03c      	b.n	8001f94 <HAL_RCC_OscConfig+0x9ac>
 8001f1a:	bf00      	nop
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	10908120 	.word	0x10908120
 8001f24:	40007000 	.word	0x40007000
 8001f28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f2c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d10c      	bne.n	8001f52 <HAL_RCC_OscConfig+0x96a>
 8001f38:	4bc1      	ldr	r3, [pc, #772]	; (8002240 <HAL_RCC_OscConfig+0xc58>)
 8001f3a:	6a1b      	ldr	r3, [r3, #32]
 8001f3c:	4ac0      	ldr	r2, [pc, #768]	; (8002240 <HAL_RCC_OscConfig+0xc58>)
 8001f3e:	f023 0301 	bic.w	r3, r3, #1
 8001f42:	6213      	str	r3, [r2, #32]
 8001f44:	4bbe      	ldr	r3, [pc, #760]	; (8002240 <HAL_RCC_OscConfig+0xc58>)
 8001f46:	6a1b      	ldr	r3, [r3, #32]
 8001f48:	4abd      	ldr	r2, [pc, #756]	; (8002240 <HAL_RCC_OscConfig+0xc58>)
 8001f4a:	f023 0304 	bic.w	r3, r3, #4
 8001f4e:	6213      	str	r3, [r2, #32]
 8001f50:	e020      	b.n	8001f94 <HAL_RCC_OscConfig+0x9ac>
 8001f52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	2b05      	cmp	r3, #5
 8001f60:	d10c      	bne.n	8001f7c <HAL_RCC_OscConfig+0x994>
 8001f62:	4bb7      	ldr	r3, [pc, #732]	; (8002240 <HAL_RCC_OscConfig+0xc58>)
 8001f64:	6a1b      	ldr	r3, [r3, #32]
 8001f66:	4ab6      	ldr	r2, [pc, #728]	; (8002240 <HAL_RCC_OscConfig+0xc58>)
 8001f68:	f043 0304 	orr.w	r3, r3, #4
 8001f6c:	6213      	str	r3, [r2, #32]
 8001f6e:	4bb4      	ldr	r3, [pc, #720]	; (8002240 <HAL_RCC_OscConfig+0xc58>)
 8001f70:	6a1b      	ldr	r3, [r3, #32]
 8001f72:	4ab3      	ldr	r2, [pc, #716]	; (8002240 <HAL_RCC_OscConfig+0xc58>)
 8001f74:	f043 0301 	orr.w	r3, r3, #1
 8001f78:	6213      	str	r3, [r2, #32]
 8001f7a:	e00b      	b.n	8001f94 <HAL_RCC_OscConfig+0x9ac>
 8001f7c:	4bb0      	ldr	r3, [pc, #704]	; (8002240 <HAL_RCC_OscConfig+0xc58>)
 8001f7e:	6a1b      	ldr	r3, [r3, #32]
 8001f80:	4aaf      	ldr	r2, [pc, #700]	; (8002240 <HAL_RCC_OscConfig+0xc58>)
 8001f82:	f023 0301 	bic.w	r3, r3, #1
 8001f86:	6213      	str	r3, [r2, #32]
 8001f88:	4bad      	ldr	r3, [pc, #692]	; (8002240 <HAL_RCC_OscConfig+0xc58>)
 8001f8a:	6a1b      	ldr	r3, [r3, #32]
 8001f8c:	4aac      	ldr	r2, [pc, #688]	; (8002240 <HAL_RCC_OscConfig+0xc58>)
 8001f8e:	f023 0304 	bic.w	r3, r3, #4
 8001f92:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f98:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	f000 8081 	beq.w	80020a8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa6:	f7ff f877 	bl	8001098 <HAL_GetTick>
 8001faa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fae:	e00b      	b.n	8001fc8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fb0:	f7ff f872 	bl	8001098 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d901      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e345      	b.n	8002654 <HAL_RCC_OscConfig+0x106c>
 8001fc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fcc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001fd0:	2202      	movs	r2, #2
 8001fd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fd8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	fa93 f2a3 	rbit	r2, r3
 8001fe2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fe6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ff0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001ff4:	2202      	movs	r2, #2
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ffc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	fa93 f2a3 	rbit	r2, r3
 8002006:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800200a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800200e:	601a      	str	r2, [r3, #0]
  return result;
 8002010:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002014:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002018:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800201a:	fab3 f383 	clz	r3, r3
 800201e:	b2db      	uxtb	r3, r3
 8002020:	095b      	lsrs	r3, r3, #5
 8002022:	b2db      	uxtb	r3, r3
 8002024:	f043 0302 	orr.w	r3, r3, #2
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d102      	bne.n	8002034 <HAL_RCC_OscConfig+0xa4c>
 800202e:	4b84      	ldr	r3, [pc, #528]	; (8002240 <HAL_RCC_OscConfig+0xc58>)
 8002030:	6a1b      	ldr	r3, [r3, #32]
 8002032:	e013      	b.n	800205c <HAL_RCC_OscConfig+0xa74>
 8002034:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002038:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800203c:	2202      	movs	r2, #2
 800203e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002040:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002044:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	fa93 f2a3 	rbit	r2, r3
 800204e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002052:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	4b79      	ldr	r3, [pc, #484]	; (8002240 <HAL_RCC_OscConfig+0xc58>)
 800205a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002060:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002064:	2102      	movs	r1, #2
 8002066:	6011      	str	r1, [r2, #0]
 8002068:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800206c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002070:	6812      	ldr	r2, [r2, #0]
 8002072:	fa92 f1a2 	rbit	r1, r2
 8002076:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800207a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800207e:	6011      	str	r1, [r2, #0]
  return result;
 8002080:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002084:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002088:	6812      	ldr	r2, [r2, #0]
 800208a:	fab2 f282 	clz	r2, r2
 800208e:	b2d2      	uxtb	r2, r2
 8002090:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002094:	b2d2      	uxtb	r2, r2
 8002096:	f002 021f 	and.w	r2, r2, #31
 800209a:	2101      	movs	r1, #1
 800209c:	fa01 f202 	lsl.w	r2, r1, r2
 80020a0:	4013      	ands	r3, r2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d084      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x9c8>
 80020a6:	e07f      	b.n	80021a8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a8:	f7fe fff6 	bl	8001098 <HAL_GetTick>
 80020ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020b0:	e00b      	b.n	80020ca <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020b2:	f7fe fff1 	bl	8001098 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e2c4      	b.n	8002654 <HAL_RCC_OscConfig+0x106c>
 80020ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ce:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80020d2:	2202      	movs	r2, #2
 80020d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020da:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	fa93 f2a3 	rbit	r2, r3
 80020e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020e8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020f2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80020f6:	2202      	movs	r2, #2
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020fe:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	fa93 f2a3 	rbit	r2, r3
 8002108:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800210c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002110:	601a      	str	r2, [r3, #0]
  return result;
 8002112:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002116:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800211a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800211c:	fab3 f383 	clz	r3, r3
 8002120:	b2db      	uxtb	r3, r3
 8002122:	095b      	lsrs	r3, r3, #5
 8002124:	b2db      	uxtb	r3, r3
 8002126:	f043 0302 	orr.w	r3, r3, #2
 800212a:	b2db      	uxtb	r3, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d102      	bne.n	8002136 <HAL_RCC_OscConfig+0xb4e>
 8002130:	4b43      	ldr	r3, [pc, #268]	; (8002240 <HAL_RCC_OscConfig+0xc58>)
 8002132:	6a1b      	ldr	r3, [r3, #32]
 8002134:	e013      	b.n	800215e <HAL_RCC_OscConfig+0xb76>
 8002136:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800213a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800213e:	2202      	movs	r2, #2
 8002140:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002142:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002146:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	fa93 f2a3 	rbit	r2, r3
 8002150:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002154:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	4b39      	ldr	r3, [pc, #228]	; (8002240 <HAL_RCC_OscConfig+0xc58>)
 800215c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002162:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002166:	2102      	movs	r1, #2
 8002168:	6011      	str	r1, [r2, #0]
 800216a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800216e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002172:	6812      	ldr	r2, [r2, #0]
 8002174:	fa92 f1a2 	rbit	r1, r2
 8002178:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800217c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002180:	6011      	str	r1, [r2, #0]
  return result;
 8002182:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002186:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800218a:	6812      	ldr	r2, [r2, #0]
 800218c:	fab2 f282 	clz	r2, r2
 8002190:	b2d2      	uxtb	r2, r2
 8002192:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002196:	b2d2      	uxtb	r2, r2
 8002198:	f002 021f 	and.w	r2, r2, #31
 800219c:	2101      	movs	r1, #1
 800219e:	fa01 f202 	lsl.w	r2, r1, r2
 80021a2:	4013      	ands	r3, r2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d184      	bne.n	80020b2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021a8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d105      	bne.n	80021bc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021b0:	4b23      	ldr	r3, [pc, #140]	; (8002240 <HAL_RCC_OscConfig+0xc58>)
 80021b2:	69db      	ldr	r3, [r3, #28]
 80021b4:	4a22      	ldr	r2, [pc, #136]	; (8002240 <HAL_RCC_OscConfig+0xc58>)
 80021b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021ba:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	69db      	ldr	r3, [r3, #28]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f000 8242 	beq.w	8002652 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021ce:	4b1c      	ldr	r3, [pc, #112]	; (8002240 <HAL_RCC_OscConfig+0xc58>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f003 030c 	and.w	r3, r3, #12
 80021d6:	2b08      	cmp	r3, #8
 80021d8:	f000 8213 	beq.w	8002602 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	69db      	ldr	r3, [r3, #28]
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	f040 8162 	bne.w	80024b2 <HAL_RCC_OscConfig+0xeca>
 80021ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021f2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80021f6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80021fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002200:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	fa93 f2a3 	rbit	r2, r3
 800220a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800220e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002212:	601a      	str	r2, [r3, #0]
  return result;
 8002214:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002218:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800221c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800221e:	fab3 f383 	clz	r3, r3
 8002222:	b2db      	uxtb	r3, r3
 8002224:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002228:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	461a      	mov	r2, r3
 8002230:	2300      	movs	r3, #0
 8002232:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002234:	f7fe ff30 	bl	8001098 <HAL_GetTick>
 8002238:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800223c:	e00c      	b.n	8002258 <HAL_RCC_OscConfig+0xc70>
 800223e:	bf00      	nop
 8002240:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002244:	f7fe ff28 	bl	8001098 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e1fd      	b.n	8002654 <HAL_RCC_OscConfig+0x106c>
 8002258:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800225c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002260:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002264:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002266:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800226a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	fa93 f2a3 	rbit	r2, r3
 8002274:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002278:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800227c:	601a      	str	r2, [r3, #0]
  return result;
 800227e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002282:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002286:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002288:	fab3 f383 	clz	r3, r3
 800228c:	b2db      	uxtb	r3, r3
 800228e:	095b      	lsrs	r3, r3, #5
 8002290:	b2db      	uxtb	r3, r3
 8002292:	f043 0301 	orr.w	r3, r3, #1
 8002296:	b2db      	uxtb	r3, r3
 8002298:	2b01      	cmp	r3, #1
 800229a:	d102      	bne.n	80022a2 <HAL_RCC_OscConfig+0xcba>
 800229c:	4bb0      	ldr	r3, [pc, #704]	; (8002560 <HAL_RCC_OscConfig+0xf78>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	e027      	b.n	80022f2 <HAL_RCC_OscConfig+0xd0a>
 80022a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80022aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	fa93 f2a3 	rbit	r2, r3
 80022be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022cc:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80022d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022da:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	fa93 f2a3 	rbit	r2, r3
 80022e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022e8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80022ec:	601a      	str	r2, [r3, #0]
 80022ee:	4b9c      	ldr	r3, [pc, #624]	; (8002560 <HAL_RCC_OscConfig+0xf78>)
 80022f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022f6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80022fa:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80022fe:	6011      	str	r1, [r2, #0]
 8002300:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002304:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002308:	6812      	ldr	r2, [r2, #0]
 800230a:	fa92 f1a2 	rbit	r1, r2
 800230e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002312:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002316:	6011      	str	r1, [r2, #0]
  return result;
 8002318:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800231c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002320:	6812      	ldr	r2, [r2, #0]
 8002322:	fab2 f282 	clz	r2, r2
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	f042 0220 	orr.w	r2, r2, #32
 800232c:	b2d2      	uxtb	r2, r2
 800232e:	f002 021f 	and.w	r2, r2, #31
 8002332:	2101      	movs	r1, #1
 8002334:	fa01 f202 	lsl.w	r2, r1, r2
 8002338:	4013      	ands	r3, r2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d182      	bne.n	8002244 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800233e:	4b88      	ldr	r3, [pc, #544]	; (8002560 <HAL_RCC_OscConfig+0xf78>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002346:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800234a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002352:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002356:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6a1b      	ldr	r3, [r3, #32]
 800235e:	430b      	orrs	r3, r1
 8002360:	497f      	ldr	r1, [pc, #508]	; (8002560 <HAL_RCC_OscConfig+0xf78>)
 8002362:	4313      	orrs	r3, r2
 8002364:	604b      	str	r3, [r1, #4]
 8002366:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800236a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800236e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002372:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002374:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002378:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	fa93 f2a3 	rbit	r2, r3
 8002382:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002386:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800238a:	601a      	str	r2, [r3, #0]
  return result;
 800238c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002390:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002394:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002396:	fab3 f383 	clz	r3, r3
 800239a:	b2db      	uxtb	r3, r3
 800239c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023a0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	461a      	mov	r2, r3
 80023a8:	2301      	movs	r3, #1
 80023aa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ac:	f7fe fe74 	bl	8001098 <HAL_GetTick>
 80023b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023b4:	e009      	b.n	80023ca <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023b6:	f7fe fe6f 	bl	8001098 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e144      	b.n	8002654 <HAL_RCC_OscConfig+0x106c>
 80023ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ce:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80023d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023dc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	fa93 f2a3 	rbit	r2, r3
 80023e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ea:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80023ee:	601a      	str	r2, [r3, #0]
  return result;
 80023f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023f4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80023f8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023fa:	fab3 f383 	clz	r3, r3
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	095b      	lsrs	r3, r3, #5
 8002402:	b2db      	uxtb	r3, r3
 8002404:	f043 0301 	orr.w	r3, r3, #1
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b01      	cmp	r3, #1
 800240c:	d102      	bne.n	8002414 <HAL_RCC_OscConfig+0xe2c>
 800240e:	4b54      	ldr	r3, [pc, #336]	; (8002560 <HAL_RCC_OscConfig+0xf78>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	e027      	b.n	8002464 <HAL_RCC_OscConfig+0xe7c>
 8002414:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002418:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800241c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002420:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002422:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002426:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	fa93 f2a3 	rbit	r2, r3
 8002430:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002434:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002438:	601a      	str	r2, [r3, #0]
 800243a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800243e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002442:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800244c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	fa93 f2a3 	rbit	r2, r3
 8002456:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800245a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	4b3f      	ldr	r3, [pc, #252]	; (8002560 <HAL_RCC_OscConfig+0xf78>)
 8002462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002464:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002468:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800246c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002470:	6011      	str	r1, [r2, #0]
 8002472:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002476:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800247a:	6812      	ldr	r2, [r2, #0]
 800247c:	fa92 f1a2 	rbit	r1, r2
 8002480:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002484:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002488:	6011      	str	r1, [r2, #0]
  return result;
 800248a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800248e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002492:	6812      	ldr	r2, [r2, #0]
 8002494:	fab2 f282 	clz	r2, r2
 8002498:	b2d2      	uxtb	r2, r2
 800249a:	f042 0220 	orr.w	r2, r2, #32
 800249e:	b2d2      	uxtb	r2, r2
 80024a0:	f002 021f 	and.w	r2, r2, #31
 80024a4:	2101      	movs	r1, #1
 80024a6:	fa01 f202 	lsl.w	r2, r1, r2
 80024aa:	4013      	ands	r3, r2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d082      	beq.n	80023b6 <HAL_RCC_OscConfig+0xdce>
 80024b0:	e0cf      	b.n	8002652 <HAL_RCC_OscConfig+0x106a>
 80024b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80024ba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80024be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	fa93 f2a3 	rbit	r2, r3
 80024ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80024d6:	601a      	str	r2, [r3, #0]
  return result;
 80024d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024dc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80024e0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024e2:	fab3 f383 	clz	r3, r3
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	461a      	mov	r2, r3
 80024f4:	2300      	movs	r3, #0
 80024f6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f8:	f7fe fdce 	bl	8001098 <HAL_GetTick>
 80024fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002500:	e009      	b.n	8002516 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002502:	f7fe fdc9 	bl	8001098 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e09e      	b.n	8002654 <HAL_RCC_OscConfig+0x106c>
 8002516:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800251a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800251e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002522:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002524:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002528:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	fa93 f2a3 	rbit	r2, r3
 8002532:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002536:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800253a:	601a      	str	r2, [r3, #0]
  return result;
 800253c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002540:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002544:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002546:	fab3 f383 	clz	r3, r3
 800254a:	b2db      	uxtb	r3, r3
 800254c:	095b      	lsrs	r3, r3, #5
 800254e:	b2db      	uxtb	r3, r3
 8002550:	f043 0301 	orr.w	r3, r3, #1
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b01      	cmp	r3, #1
 8002558:	d104      	bne.n	8002564 <HAL_RCC_OscConfig+0xf7c>
 800255a:	4b01      	ldr	r3, [pc, #4]	; (8002560 <HAL_RCC_OscConfig+0xf78>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	e029      	b.n	80025b4 <HAL_RCC_OscConfig+0xfcc>
 8002560:	40021000 	.word	0x40021000
 8002564:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002568:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800256c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002570:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002572:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002576:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	fa93 f2a3 	rbit	r2, r3
 8002580:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002584:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002588:	601a      	str	r2, [r3, #0]
 800258a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800258e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002592:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800259c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	fa93 f2a3 	rbit	r2, r3
 80025a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025aa:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	4b2b      	ldr	r3, [pc, #172]	; (8002660 <HAL_RCC_OscConfig+0x1078>)
 80025b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025b8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80025bc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80025c0:	6011      	str	r1, [r2, #0]
 80025c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025c6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80025ca:	6812      	ldr	r2, [r2, #0]
 80025cc:	fa92 f1a2 	rbit	r1, r2
 80025d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025d4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80025d8:	6011      	str	r1, [r2, #0]
  return result;
 80025da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025de:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80025e2:	6812      	ldr	r2, [r2, #0]
 80025e4:	fab2 f282 	clz	r2, r2
 80025e8:	b2d2      	uxtb	r2, r2
 80025ea:	f042 0220 	orr.w	r2, r2, #32
 80025ee:	b2d2      	uxtb	r2, r2
 80025f0:	f002 021f 	and.w	r2, r2, #31
 80025f4:	2101      	movs	r1, #1
 80025f6:	fa01 f202 	lsl.w	r2, r1, r2
 80025fa:	4013      	ands	r3, r2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d180      	bne.n	8002502 <HAL_RCC_OscConfig+0xf1a>
 8002600:	e027      	b.n	8002652 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002602:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002606:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d101      	bne.n	8002616 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e01e      	b.n	8002654 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002616:	4b12      	ldr	r3, [pc, #72]	; (8002660 <HAL_RCC_OscConfig+0x1078>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800261e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002622:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002626:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800262a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	429a      	cmp	r2, r3
 8002634:	d10b      	bne.n	800264e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002636:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800263a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800263e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002642:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800264a:	429a      	cmp	r2, r3
 800264c:	d001      	beq.n	8002652 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e000      	b.n	8002654 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	40021000 	.word	0x40021000

08002664 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b09e      	sub	sp, #120	; 0x78
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800266e:	2300      	movs	r3, #0
 8002670:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d101      	bne.n	800267c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e162      	b.n	8002942 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800267c:	4b90      	ldr	r3, [pc, #576]	; (80028c0 <HAL_RCC_ClockConfig+0x25c>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0307 	and.w	r3, r3, #7
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	429a      	cmp	r2, r3
 8002688:	d910      	bls.n	80026ac <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800268a:	4b8d      	ldr	r3, [pc, #564]	; (80028c0 <HAL_RCC_ClockConfig+0x25c>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f023 0207 	bic.w	r2, r3, #7
 8002692:	498b      	ldr	r1, [pc, #556]	; (80028c0 <HAL_RCC_ClockConfig+0x25c>)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	4313      	orrs	r3, r2
 8002698:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800269a:	4b89      	ldr	r3, [pc, #548]	; (80028c0 <HAL_RCC_ClockConfig+0x25c>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d001      	beq.n	80026ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e14a      	b.n	8002942 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d008      	beq.n	80026ca <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026b8:	4b82      	ldr	r3, [pc, #520]	; (80028c4 <HAL_RCC_ClockConfig+0x260>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	497f      	ldr	r1, [pc, #508]	; (80028c4 <HAL_RCC_ClockConfig+0x260>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	f000 80dc 	beq.w	8002890 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d13c      	bne.n	800275a <HAL_RCC_ClockConfig+0xf6>
 80026e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026e4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026e8:	fa93 f3a3 	rbit	r3, r3
 80026ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80026ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026f0:	fab3 f383 	clz	r3, r3
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	095b      	lsrs	r3, r3, #5
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	f043 0301 	orr.w	r3, r3, #1
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	2b01      	cmp	r3, #1
 8002702:	d102      	bne.n	800270a <HAL_RCC_ClockConfig+0xa6>
 8002704:	4b6f      	ldr	r3, [pc, #444]	; (80028c4 <HAL_RCC_ClockConfig+0x260>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	e00f      	b.n	800272a <HAL_RCC_ClockConfig+0xc6>
 800270a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800270e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002710:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002712:	fa93 f3a3 	rbit	r3, r3
 8002716:	667b      	str	r3, [r7, #100]	; 0x64
 8002718:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800271c:	663b      	str	r3, [r7, #96]	; 0x60
 800271e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002720:	fa93 f3a3 	rbit	r3, r3
 8002724:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002726:	4b67      	ldr	r3, [pc, #412]	; (80028c4 <HAL_RCC_ClockConfig+0x260>)
 8002728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800272e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002730:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002732:	fa92 f2a2 	rbit	r2, r2
 8002736:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002738:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800273a:	fab2 f282 	clz	r2, r2
 800273e:	b2d2      	uxtb	r2, r2
 8002740:	f042 0220 	orr.w	r2, r2, #32
 8002744:	b2d2      	uxtb	r2, r2
 8002746:	f002 021f 	and.w	r2, r2, #31
 800274a:	2101      	movs	r1, #1
 800274c:	fa01 f202 	lsl.w	r2, r1, r2
 8002750:	4013      	ands	r3, r2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d17b      	bne.n	800284e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e0f3      	b.n	8002942 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b02      	cmp	r3, #2
 8002760:	d13c      	bne.n	80027dc <HAL_RCC_ClockConfig+0x178>
 8002762:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002766:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002768:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800276a:	fa93 f3a3 	rbit	r3, r3
 800276e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002770:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002772:	fab3 f383 	clz	r3, r3
 8002776:	b2db      	uxtb	r3, r3
 8002778:	095b      	lsrs	r3, r3, #5
 800277a:	b2db      	uxtb	r3, r3
 800277c:	f043 0301 	orr.w	r3, r3, #1
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b01      	cmp	r3, #1
 8002784:	d102      	bne.n	800278c <HAL_RCC_ClockConfig+0x128>
 8002786:	4b4f      	ldr	r3, [pc, #316]	; (80028c4 <HAL_RCC_ClockConfig+0x260>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	e00f      	b.n	80027ac <HAL_RCC_ClockConfig+0x148>
 800278c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002790:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002792:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002794:	fa93 f3a3 	rbit	r3, r3
 8002798:	647b      	str	r3, [r7, #68]	; 0x44
 800279a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800279e:	643b      	str	r3, [r7, #64]	; 0x40
 80027a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027a2:	fa93 f3a3 	rbit	r3, r3
 80027a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027a8:	4b46      	ldr	r3, [pc, #280]	; (80028c4 <HAL_RCC_ClockConfig+0x260>)
 80027aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027b0:	63ba      	str	r2, [r7, #56]	; 0x38
 80027b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027b4:	fa92 f2a2 	rbit	r2, r2
 80027b8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80027ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027bc:	fab2 f282 	clz	r2, r2
 80027c0:	b2d2      	uxtb	r2, r2
 80027c2:	f042 0220 	orr.w	r2, r2, #32
 80027c6:	b2d2      	uxtb	r2, r2
 80027c8:	f002 021f 	and.w	r2, r2, #31
 80027cc:	2101      	movs	r1, #1
 80027ce:	fa01 f202 	lsl.w	r2, r1, r2
 80027d2:	4013      	ands	r3, r2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d13a      	bne.n	800284e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e0b2      	b.n	8002942 <HAL_RCC_ClockConfig+0x2de>
 80027dc:	2302      	movs	r3, #2
 80027de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027e2:	fa93 f3a3 	rbit	r3, r3
 80027e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80027e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ea:	fab3 f383 	clz	r3, r3
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	095b      	lsrs	r3, r3, #5
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	f043 0301 	orr.w	r3, r3, #1
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d102      	bne.n	8002804 <HAL_RCC_ClockConfig+0x1a0>
 80027fe:	4b31      	ldr	r3, [pc, #196]	; (80028c4 <HAL_RCC_ClockConfig+0x260>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	e00d      	b.n	8002820 <HAL_RCC_ClockConfig+0x1bc>
 8002804:	2302      	movs	r3, #2
 8002806:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800280a:	fa93 f3a3 	rbit	r3, r3
 800280e:	627b      	str	r3, [r7, #36]	; 0x24
 8002810:	2302      	movs	r3, #2
 8002812:	623b      	str	r3, [r7, #32]
 8002814:	6a3b      	ldr	r3, [r7, #32]
 8002816:	fa93 f3a3 	rbit	r3, r3
 800281a:	61fb      	str	r3, [r7, #28]
 800281c:	4b29      	ldr	r3, [pc, #164]	; (80028c4 <HAL_RCC_ClockConfig+0x260>)
 800281e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002820:	2202      	movs	r2, #2
 8002822:	61ba      	str	r2, [r7, #24]
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	fa92 f2a2 	rbit	r2, r2
 800282a:	617a      	str	r2, [r7, #20]
  return result;
 800282c:	697a      	ldr	r2, [r7, #20]
 800282e:	fab2 f282 	clz	r2, r2
 8002832:	b2d2      	uxtb	r2, r2
 8002834:	f042 0220 	orr.w	r2, r2, #32
 8002838:	b2d2      	uxtb	r2, r2
 800283a:	f002 021f 	and.w	r2, r2, #31
 800283e:	2101      	movs	r1, #1
 8002840:	fa01 f202 	lsl.w	r2, r1, r2
 8002844:	4013      	ands	r3, r2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e079      	b.n	8002942 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800284e:	4b1d      	ldr	r3, [pc, #116]	; (80028c4 <HAL_RCC_ClockConfig+0x260>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f023 0203 	bic.w	r2, r3, #3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	491a      	ldr	r1, [pc, #104]	; (80028c4 <HAL_RCC_ClockConfig+0x260>)
 800285c:	4313      	orrs	r3, r2
 800285e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002860:	f7fe fc1a 	bl	8001098 <HAL_GetTick>
 8002864:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002866:	e00a      	b.n	800287e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002868:	f7fe fc16 	bl	8001098 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	f241 3288 	movw	r2, #5000	; 0x1388
 8002876:	4293      	cmp	r3, r2
 8002878:	d901      	bls.n	800287e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e061      	b.n	8002942 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800287e:	4b11      	ldr	r3, [pc, #68]	; (80028c4 <HAL_RCC_ClockConfig+0x260>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f003 020c 	and.w	r2, r3, #12
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	429a      	cmp	r2, r3
 800288e:	d1eb      	bne.n	8002868 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002890:	4b0b      	ldr	r3, [pc, #44]	; (80028c0 <HAL_RCC_ClockConfig+0x25c>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0307 	and.w	r3, r3, #7
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	429a      	cmp	r2, r3
 800289c:	d214      	bcs.n	80028c8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800289e:	4b08      	ldr	r3, [pc, #32]	; (80028c0 <HAL_RCC_ClockConfig+0x25c>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f023 0207 	bic.w	r2, r3, #7
 80028a6:	4906      	ldr	r1, [pc, #24]	; (80028c0 <HAL_RCC_ClockConfig+0x25c>)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ae:	4b04      	ldr	r3, [pc, #16]	; (80028c0 <HAL_RCC_ClockConfig+0x25c>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0307 	and.w	r3, r3, #7
 80028b6:	683a      	ldr	r2, [r7, #0]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d005      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e040      	b.n	8002942 <HAL_RCC_ClockConfig+0x2de>
 80028c0:	40022000 	.word	0x40022000
 80028c4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0304 	and.w	r3, r3, #4
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d008      	beq.n	80028e6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028d4:	4b1d      	ldr	r3, [pc, #116]	; (800294c <HAL_RCC_ClockConfig+0x2e8>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	491a      	ldr	r1, [pc, #104]	; (800294c <HAL_RCC_ClockConfig+0x2e8>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0308 	and.w	r3, r3, #8
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d009      	beq.n	8002906 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028f2:	4b16      	ldr	r3, [pc, #88]	; (800294c <HAL_RCC_ClockConfig+0x2e8>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	4912      	ldr	r1, [pc, #72]	; (800294c <HAL_RCC_ClockConfig+0x2e8>)
 8002902:	4313      	orrs	r3, r2
 8002904:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002906:	f000 f829 	bl	800295c <HAL_RCC_GetSysClockFreq>
 800290a:	4601      	mov	r1, r0
 800290c:	4b0f      	ldr	r3, [pc, #60]	; (800294c <HAL_RCC_ClockConfig+0x2e8>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002914:	22f0      	movs	r2, #240	; 0xf0
 8002916:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	fa92 f2a2 	rbit	r2, r2
 800291e:	60fa      	str	r2, [r7, #12]
  return result;
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	fab2 f282 	clz	r2, r2
 8002926:	b2d2      	uxtb	r2, r2
 8002928:	40d3      	lsrs	r3, r2
 800292a:	4a09      	ldr	r2, [pc, #36]	; (8002950 <HAL_RCC_ClockConfig+0x2ec>)
 800292c:	5cd3      	ldrb	r3, [r2, r3]
 800292e:	fa21 f303 	lsr.w	r3, r1, r3
 8002932:	4a08      	ldr	r2, [pc, #32]	; (8002954 <HAL_RCC_ClockConfig+0x2f0>)
 8002934:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002936:	4b08      	ldr	r3, [pc, #32]	; (8002958 <HAL_RCC_ClockConfig+0x2f4>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4618      	mov	r0, r3
 800293c:	f7fe fb68 	bl	8001010 <HAL_InitTick>
  
  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3778      	adds	r7, #120	; 0x78
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	40021000 	.word	0x40021000
 8002950:	0800425c 	.word	0x0800425c
 8002954:	20000008 	.word	0x20000008
 8002958:	2000000c 	.word	0x2000000c

0800295c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800295c:	b480      	push	{r7}
 800295e:	b087      	sub	sp, #28
 8002960:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002962:	2300      	movs	r3, #0
 8002964:	60fb      	str	r3, [r7, #12]
 8002966:	2300      	movs	r3, #0
 8002968:	60bb      	str	r3, [r7, #8]
 800296a:	2300      	movs	r3, #0
 800296c:	617b      	str	r3, [r7, #20]
 800296e:	2300      	movs	r3, #0
 8002970:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002972:	2300      	movs	r3, #0
 8002974:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002976:	4b1e      	ldr	r3, [pc, #120]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f003 030c 	and.w	r3, r3, #12
 8002982:	2b04      	cmp	r3, #4
 8002984:	d002      	beq.n	800298c <HAL_RCC_GetSysClockFreq+0x30>
 8002986:	2b08      	cmp	r3, #8
 8002988:	d003      	beq.n	8002992 <HAL_RCC_GetSysClockFreq+0x36>
 800298a:	e026      	b.n	80029da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800298c:	4b19      	ldr	r3, [pc, #100]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800298e:	613b      	str	r3, [r7, #16]
      break;
 8002990:	e026      	b.n	80029e0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	0c9b      	lsrs	r3, r3, #18
 8002996:	f003 030f 	and.w	r3, r3, #15
 800299a:	4a17      	ldr	r2, [pc, #92]	; (80029f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800299c:	5cd3      	ldrb	r3, [r2, r3]
 800299e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80029a0:	4b13      	ldr	r3, [pc, #76]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x94>)
 80029a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a4:	f003 030f 	and.w	r3, r3, #15
 80029a8:	4a14      	ldr	r2, [pc, #80]	; (80029fc <HAL_RCC_GetSysClockFreq+0xa0>)
 80029aa:	5cd3      	ldrb	r3, [r2, r3]
 80029ac:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d008      	beq.n	80029ca <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80029b8:	4a0e      	ldr	r2, [pc, #56]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	fb02 f303 	mul.w	r3, r2, r3
 80029c6:	617b      	str	r3, [r7, #20]
 80029c8:	e004      	b.n	80029d4 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a0c      	ldr	r2, [pc, #48]	; (8002a00 <HAL_RCC_GetSysClockFreq+0xa4>)
 80029ce:	fb02 f303 	mul.w	r3, r2, r3
 80029d2:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	613b      	str	r3, [r7, #16]
      break;
 80029d8:	e002      	b.n	80029e0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029da:	4b06      	ldr	r3, [pc, #24]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80029dc:	613b      	str	r3, [r7, #16]
      break;
 80029de:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029e0:	693b      	ldr	r3, [r7, #16]
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	371c      	adds	r7, #28
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	40021000 	.word	0x40021000
 80029f4:	007a1200 	.word	0x007a1200
 80029f8:	08004274 	.word	0x08004274
 80029fc:	08004284 	.word	0x08004284
 8002a00:	003d0900 	.word	0x003d0900

08002a04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a08:	4b03      	ldr	r3, [pc, #12]	; (8002a18 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	20000008 	.word	0x20000008

08002a1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002a22:	f7ff ffef 	bl	8002a04 <HAL_RCC_GetHCLKFreq>
 8002a26:	4601      	mov	r1, r0
 8002a28:	4b0b      	ldr	r3, [pc, #44]	; (8002a58 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a30:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002a34:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	fa92 f2a2 	rbit	r2, r2
 8002a3c:	603a      	str	r2, [r7, #0]
  return result;
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	fab2 f282 	clz	r2, r2
 8002a44:	b2d2      	uxtb	r2, r2
 8002a46:	40d3      	lsrs	r3, r2
 8002a48:	4a04      	ldr	r2, [pc, #16]	; (8002a5c <HAL_RCC_GetPCLK1Freq+0x40>)
 8002a4a:	5cd3      	ldrb	r3, [r2, r3]
 8002a4c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002a50:	4618      	mov	r0, r3
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	0800426c 	.word	0x0800426c

08002a60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002a66:	f7ff ffcd 	bl	8002a04 <HAL_RCC_GetHCLKFreq>
 8002a6a:	4601      	mov	r1, r0
 8002a6c:	4b0b      	ldr	r3, [pc, #44]	; (8002a9c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002a74:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002a78:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	fa92 f2a2 	rbit	r2, r2
 8002a80:	603a      	str	r2, [r7, #0]
  return result;
 8002a82:	683a      	ldr	r2, [r7, #0]
 8002a84:	fab2 f282 	clz	r2, r2
 8002a88:	b2d2      	uxtb	r2, r2
 8002a8a:	40d3      	lsrs	r3, r2
 8002a8c:	4a04      	ldr	r2, [pc, #16]	; (8002aa0 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002a8e:	5cd3      	ldrb	r3, [r2, r3]
 8002a90:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002a94:	4618      	mov	r0, r3
 8002a96:	3708      	adds	r7, #8
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	40021000 	.word	0x40021000
 8002aa0:	0800426c 	.word	0x0800426c

08002aa4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b092      	sub	sp, #72	; 0x48
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002aac:	2300      	movs	r3, #0
 8002aae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f000 80d4 	beq.w	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ac8:	4b4e      	ldr	r3, [pc, #312]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aca:	69db      	ldr	r3, [r3, #28]
 8002acc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d10e      	bne.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ad4:	4b4b      	ldr	r3, [pc, #300]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ad6:	69db      	ldr	r3, [r3, #28]
 8002ad8:	4a4a      	ldr	r2, [pc, #296]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ada:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ade:	61d3      	str	r3, [r2, #28]
 8002ae0:	4b48      	ldr	r3, [pc, #288]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ae2:	69db      	ldr	r3, [r3, #28]
 8002ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae8:	60bb      	str	r3, [r7, #8]
 8002aea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aec:	2301      	movs	r3, #1
 8002aee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af2:	4b45      	ldr	r3, [pc, #276]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d118      	bne.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002afe:	4b42      	ldr	r3, [pc, #264]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a41      	ldr	r2, [pc, #260]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b08:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b0a:	f7fe fac5 	bl	8001098 <HAL_GetTick>
 8002b0e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b10:	e008      	b.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b12:	f7fe fac1 	bl	8001098 <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	2b64      	cmp	r3, #100	; 0x64
 8002b1e:	d901      	bls.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e169      	b.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b24:	4b38      	ldr	r3, [pc, #224]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d0f0      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b30:	4b34      	ldr	r3, [pc, #208]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b32:	6a1b      	ldr	r3, [r3, #32]
 8002b34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b38:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f000 8084 	beq.w	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d07c      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b50:	4b2c      	ldr	r3, [pc, #176]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b5e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b62:	fa93 f3a3 	rbit	r3, r3
 8002b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b6a:	fab3 f383 	clz	r3, r3
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	461a      	mov	r2, r3
 8002b72:	4b26      	ldr	r3, [pc, #152]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b74:	4413      	add	r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	461a      	mov	r2, r3
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	6013      	str	r3, [r2, #0]
 8002b7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b82:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b86:	fa93 f3a3 	rbit	r3, r3
 8002b8a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b8e:	fab3 f383 	clz	r3, r3
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	461a      	mov	r2, r3
 8002b96:	4b1d      	ldr	r3, [pc, #116]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b98:	4413      	add	r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ba2:	4a18      	ldr	r2, [pc, #96]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ba6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d04b      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb2:	f7fe fa71 	bl	8001098 <HAL_GetTick>
 8002bb6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb8:	e00a      	b.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bba:	f7fe fa6d 	bl	8001098 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e113      	b.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd6:	fa93 f3a3 	rbit	r3, r3
 8002bda:	627b      	str	r3, [r7, #36]	; 0x24
 8002bdc:	2302      	movs	r3, #2
 8002bde:	623b      	str	r3, [r7, #32]
 8002be0:	6a3b      	ldr	r3, [r7, #32]
 8002be2:	fa93 f3a3 	rbit	r3, r3
 8002be6:	61fb      	str	r3, [r7, #28]
  return result;
 8002be8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bea:	fab3 f383 	clz	r3, r3
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	095b      	lsrs	r3, r3, #5
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	f043 0302 	orr.w	r3, r3, #2
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d108      	bne.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002bfe:	4b01      	ldr	r3, [pc, #4]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	e00d      	b.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002c04:	40021000 	.word	0x40021000
 8002c08:	40007000 	.word	0x40007000
 8002c0c:	10908100 	.word	0x10908100
 8002c10:	2302      	movs	r3, #2
 8002c12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	fa93 f3a3 	rbit	r3, r3
 8002c1a:	617b      	str	r3, [r7, #20]
 8002c1c:	4b78      	ldr	r3, [pc, #480]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c20:	2202      	movs	r2, #2
 8002c22:	613a      	str	r2, [r7, #16]
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	fa92 f2a2 	rbit	r2, r2
 8002c2a:	60fa      	str	r2, [r7, #12]
  return result;
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	fab2 f282 	clz	r2, r2
 8002c32:	b2d2      	uxtb	r2, r2
 8002c34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c38:	b2d2      	uxtb	r2, r2
 8002c3a:	f002 021f 	and.w	r2, r2, #31
 8002c3e:	2101      	movs	r1, #1
 8002c40:	fa01 f202 	lsl.w	r2, r1, r2
 8002c44:	4013      	ands	r3, r2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d0b7      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002c4a:	4b6d      	ldr	r3, [pc, #436]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	496a      	ldr	r1, [pc, #424]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c5c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d105      	bne.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c64:	4b66      	ldr	r3, [pc, #408]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c66:	69db      	ldr	r3, [r3, #28]
 8002c68:	4a65      	ldr	r2, [pc, #404]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c6e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d008      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c7c:	4b60      	ldr	r3, [pc, #384]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c80:	f023 0203 	bic.w	r2, r3, #3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	495d      	ldr	r1, [pc, #372]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d008      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c9a:	4b59      	ldr	r3, [pc, #356]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	4956      	ldr	r1, [pc, #344]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0304 	and.w	r3, r3, #4
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d008      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002cb8:	4b51      	ldr	r3, [pc, #324]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	494e      	ldr	r1, [pc, #312]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0320 	and.w	r3, r3, #32
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d008      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cd6:	4b4a      	ldr	r3, [pc, #296]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cda:	f023 0210 	bic.w	r2, r3, #16
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	69db      	ldr	r3, [r3, #28]
 8002ce2:	4947      	ldr	r1, [pc, #284]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d008      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002cf4:	4b42      	ldr	r3, [pc, #264]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d00:	493f      	ldr	r1, [pc, #252]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d008      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d12:	4b3b      	ldr	r3, [pc, #236]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d16:	f023 0220 	bic.w	r2, r3, #32
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
 8002d1e:	4938      	ldr	r1, [pc, #224]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0308 	and.w	r3, r3, #8
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d008      	beq.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d30:	4b33      	ldr	r3, [pc, #204]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d34:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	695b      	ldr	r3, [r3, #20]
 8002d3c:	4930      	ldr	r1, [pc, #192]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0310 	and.w	r3, r3, #16
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d008      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d4e:	4b2c      	ldr	r3, [pc, #176]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	4929      	ldr	r1, [pc, #164]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d008      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002d6c:	4b24      	ldr	r3, [pc, #144]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d78:	4921      	ldr	r1, [pc, #132]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d008      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002d8a:	4b1d      	ldr	r3, [pc, #116]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d96:	491a      	ldr	r1, [pc, #104]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d008      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002da8:	4b15      	ldr	r3, [pc, #84]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dac:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db4:	4912      	ldr	r1, [pc, #72]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d008      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002dc6:	4b0e      	ldr	r3, [pc, #56]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd2:	490b      	ldr	r1, [pc, #44]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d008      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002de4:	4b06      	ldr	r3, [pc, #24]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002df0:	4903      	ldr	r1, [pc, #12]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3748      	adds	r7, #72	; 0x48
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	40021000 	.word	0x40021000

08002e04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e040      	b.n	8002e98 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d106      	bne.n	8002e2c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f7fd ff90 	bl	8000d4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2224      	movs	r2, #36	; 0x24
 8002e30:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f022 0201 	bic.w	r2, r2, #1
 8002e40:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d002      	beq.n	8002e50 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 fb3c 	bl	80034c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 f965 	bl	8003120 <UART_SetConfig>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d101      	bne.n	8002e60 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e01b      	b.n	8002e98 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	685a      	ldr	r2, [r3, #4]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	689a      	ldr	r2, [r3, #8]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f042 0201 	orr.w	r2, r2, #1
 8002e8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 fbbb 	bl	800360c <UART_CheckIdleState>
 8002e96:	4603      	mov	r3, r0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3708      	adds	r7, #8
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b08a      	sub	sp, #40	; 0x28
 8002ea4:	af02      	add	r7, sp, #8
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	603b      	str	r3, [r7, #0]
 8002eac:	4613      	mov	r3, r2
 8002eae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002eb4:	2b20      	cmp	r3, #32
 8002eb6:	d178      	bne.n	8002faa <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d002      	beq.n	8002ec4 <HAL_UART_Transmit+0x24>
 8002ebe:	88fb      	ldrh	r3, [r7, #6]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d101      	bne.n	8002ec8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e071      	b.n	8002fac <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2221      	movs	r2, #33	; 0x21
 8002ed4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ed6:	f7fe f8df 	bl	8001098 <HAL_GetTick>
 8002eda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	88fa      	ldrh	r2, [r7, #6]
 8002ee0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	88fa      	ldrh	r2, [r7, #6]
 8002ee8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ef4:	d108      	bne.n	8002f08 <HAL_UART_Transmit+0x68>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d104      	bne.n	8002f08 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002efe:	2300      	movs	r3, #0
 8002f00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	61bb      	str	r3, [r7, #24]
 8002f06:	e003      	b.n	8002f10 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f10:	e030      	b.n	8002f74 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	9300      	str	r3, [sp, #0]
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	2180      	movs	r1, #128	; 0x80
 8002f1c:	68f8      	ldr	r0, [r7, #12]
 8002f1e:	f000 fc1d 	bl	800375c <UART_WaitOnFlagUntilTimeout>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d004      	beq.n	8002f32 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2220      	movs	r2, #32
 8002f2c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e03c      	b.n	8002fac <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d10b      	bne.n	8002f50 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	881a      	ldrh	r2, [r3, #0]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f44:	b292      	uxth	r2, r2
 8002f46:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	3302      	adds	r3, #2
 8002f4c:	61bb      	str	r3, [r7, #24]
 8002f4e:	e008      	b.n	8002f62 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	781a      	ldrb	r2, [r3, #0]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	b292      	uxth	r2, r2
 8002f5a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	3301      	adds	r3, #1
 8002f60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1c8      	bne.n	8002f12 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	9300      	str	r3, [sp, #0]
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	2200      	movs	r2, #0
 8002f88:	2140      	movs	r1, #64	; 0x40
 8002f8a:	68f8      	ldr	r0, [r7, #12]
 8002f8c:	f000 fbe6 	bl	800375c <UART_WaitOnFlagUntilTimeout>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d004      	beq.n	8002fa0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2220      	movs	r2, #32
 8002f9a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e005      	b.n	8002fac <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2220      	movs	r2, #32
 8002fa4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	e000      	b.n	8002fac <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002faa:	2302      	movs	r3, #2
  }
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3720      	adds	r7, #32
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b08a      	sub	sp, #40	; 0x28
 8002fb8:	af02      	add	r7, sp, #8
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	603b      	str	r3, [r7, #0]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fca:	2b20      	cmp	r3, #32
 8002fcc:	f040 80a3 	bne.w	8003116 <HAL_UART_Receive+0x162>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d002      	beq.n	8002fdc <HAL_UART_Receive+0x28>
 8002fd6:	88fb      	ldrh	r3, [r7, #6]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d101      	bne.n	8002fe0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e09b      	b.n	8003118 <HAL_UART_Receive+0x164>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2222      	movs	r2, #34	; 0x22
 8002fec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ff6:	f7fe f84f 	bl	8001098 <HAL_GetTick>
 8002ffa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	88fa      	ldrh	r2, [r7, #6]
 8003000:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	88fa      	ldrh	r2, [r7, #6]
 8003008:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003014:	d10e      	bne.n	8003034 <HAL_UART_Receive+0x80>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d105      	bne.n	800302a <HAL_UART_Receive+0x76>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003024:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003028:	e01a      	b.n	8003060 <HAL_UART_Receive+0xac>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	22ff      	movs	r2, #255	; 0xff
 800302e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003032:	e015      	b.n	8003060 <HAL_UART_Receive+0xac>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d10d      	bne.n	8003058 <HAL_UART_Receive+0xa4>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d104      	bne.n	800304e <HAL_UART_Receive+0x9a>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	22ff      	movs	r2, #255	; 0xff
 8003048:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800304c:	e008      	b.n	8003060 <HAL_UART_Receive+0xac>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	227f      	movs	r2, #127	; 0x7f
 8003052:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003056:	e003      	b.n	8003060 <HAL_UART_Receive+0xac>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003066:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003070:	d108      	bne.n	8003084 <HAL_UART_Receive+0xd0>
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d104      	bne.n	8003084 <HAL_UART_Receive+0xd0>
    {
      pdata8bits  = NULL;
 800307a:	2300      	movs	r3, #0
 800307c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	61bb      	str	r3, [r7, #24]
 8003082:	e003      	b.n	800308c <HAL_UART_Receive+0xd8>
    }
    else
    {
      pdata8bits  = pData;
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003088:	2300      	movs	r3, #0
 800308a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800308c:	e037      	b.n	80030fe <HAL_UART_Receive+0x14a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	9300      	str	r3, [sp, #0]
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	2200      	movs	r2, #0
 8003096:	2120      	movs	r1, #32
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f000 fb5f 	bl	800375c <UART_WaitOnFlagUntilTimeout>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d005      	beq.n	80030b0 <HAL_UART_Receive+0xfc>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2220      	movs	r2, #32
 80030a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e033      	b.n	8003118 <HAL_UART_Receive+0x164>
      }
      if (pdata8bits == NULL)
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d10c      	bne.n	80030d0 <HAL_UART_Receive+0x11c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80030bc:	b29a      	uxth	r2, r3
 80030be:	8a7b      	ldrh	r3, [r7, #18]
 80030c0:	4013      	ands	r3, r2
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	3302      	adds	r3, #2
 80030cc:	61bb      	str	r3, [r7, #24]
 80030ce:	e00d      	b.n	80030ec <HAL_UART_Receive+0x138>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	b2da      	uxtb	r2, r3
 80030da:	8a7b      	ldrh	r3, [r7, #18]
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	4013      	ands	r3, r2
 80030e0:	b2da      	uxtb	r2, r3
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	3301      	adds	r3, #1
 80030ea:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	3b01      	subs	r3, #1
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003104:	b29b      	uxth	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1c1      	bne.n	800308e <HAL_UART_Receive+0xda>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2220      	movs	r2, #32
 800310e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8003112:	2300      	movs	r3, #0
 8003114:	e000      	b.n	8003118 <HAL_UART_Receive+0x164>
  }
  else
  {
    return HAL_BUSY;
 8003116:	2302      	movs	r3, #2
  }
}
 8003118:	4618      	mov	r0, r3
 800311a:	3720      	adds	r7, #32
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b088      	sub	sp, #32
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003128:	2300      	movs	r3, #0
 800312a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	431a      	orrs	r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	431a      	orrs	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	69db      	ldr	r3, [r3, #28]
 8003140:	4313      	orrs	r3, r2
 8003142:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800314e:	f023 030c 	bic.w	r3, r3, #12
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	6812      	ldr	r2, [r2, #0]
 8003156:	6979      	ldr	r1, [r7, #20]
 8003158:	430b      	orrs	r3, r1
 800315a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	68da      	ldr	r2, [r3, #12]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	430a      	orrs	r2, r1
 8003170:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a1b      	ldr	r3, [r3, #32]
 800317c:	697a      	ldr	r2, [r7, #20]
 800317e:	4313      	orrs	r3, r2
 8003180:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	430a      	orrs	r2, r1
 8003194:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4aa7      	ldr	r2, [pc, #668]	; (8003438 <UART_SetConfig+0x318>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d120      	bne.n	80031e2 <UART_SetConfig+0xc2>
 80031a0:	4ba6      	ldr	r3, [pc, #664]	; (800343c <UART_SetConfig+0x31c>)
 80031a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a4:	f003 0303 	and.w	r3, r3, #3
 80031a8:	2b03      	cmp	r3, #3
 80031aa:	d817      	bhi.n	80031dc <UART_SetConfig+0xbc>
 80031ac:	a201      	add	r2, pc, #4	; (adr r2, 80031b4 <UART_SetConfig+0x94>)
 80031ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b2:	bf00      	nop
 80031b4:	080031c5 	.word	0x080031c5
 80031b8:	080031d1 	.word	0x080031d1
 80031bc:	080031d7 	.word	0x080031d7
 80031c0:	080031cb 	.word	0x080031cb
 80031c4:	2301      	movs	r3, #1
 80031c6:	77fb      	strb	r3, [r7, #31]
 80031c8:	e0b5      	b.n	8003336 <UART_SetConfig+0x216>
 80031ca:	2302      	movs	r3, #2
 80031cc:	77fb      	strb	r3, [r7, #31]
 80031ce:	e0b2      	b.n	8003336 <UART_SetConfig+0x216>
 80031d0:	2304      	movs	r3, #4
 80031d2:	77fb      	strb	r3, [r7, #31]
 80031d4:	e0af      	b.n	8003336 <UART_SetConfig+0x216>
 80031d6:	2308      	movs	r3, #8
 80031d8:	77fb      	strb	r3, [r7, #31]
 80031da:	e0ac      	b.n	8003336 <UART_SetConfig+0x216>
 80031dc:	2310      	movs	r3, #16
 80031de:	77fb      	strb	r3, [r7, #31]
 80031e0:	e0a9      	b.n	8003336 <UART_SetConfig+0x216>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a96      	ldr	r2, [pc, #600]	; (8003440 <UART_SetConfig+0x320>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d124      	bne.n	8003236 <UART_SetConfig+0x116>
 80031ec:	4b93      	ldr	r3, [pc, #588]	; (800343c <UART_SetConfig+0x31c>)
 80031ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031f4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80031f8:	d011      	beq.n	800321e <UART_SetConfig+0xfe>
 80031fa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80031fe:	d817      	bhi.n	8003230 <UART_SetConfig+0x110>
 8003200:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003204:	d011      	beq.n	800322a <UART_SetConfig+0x10a>
 8003206:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800320a:	d811      	bhi.n	8003230 <UART_SetConfig+0x110>
 800320c:	2b00      	cmp	r3, #0
 800320e:	d003      	beq.n	8003218 <UART_SetConfig+0xf8>
 8003210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003214:	d006      	beq.n	8003224 <UART_SetConfig+0x104>
 8003216:	e00b      	b.n	8003230 <UART_SetConfig+0x110>
 8003218:	2300      	movs	r3, #0
 800321a:	77fb      	strb	r3, [r7, #31]
 800321c:	e08b      	b.n	8003336 <UART_SetConfig+0x216>
 800321e:	2302      	movs	r3, #2
 8003220:	77fb      	strb	r3, [r7, #31]
 8003222:	e088      	b.n	8003336 <UART_SetConfig+0x216>
 8003224:	2304      	movs	r3, #4
 8003226:	77fb      	strb	r3, [r7, #31]
 8003228:	e085      	b.n	8003336 <UART_SetConfig+0x216>
 800322a:	2308      	movs	r3, #8
 800322c:	77fb      	strb	r3, [r7, #31]
 800322e:	e082      	b.n	8003336 <UART_SetConfig+0x216>
 8003230:	2310      	movs	r3, #16
 8003232:	77fb      	strb	r3, [r7, #31]
 8003234:	e07f      	b.n	8003336 <UART_SetConfig+0x216>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a82      	ldr	r2, [pc, #520]	; (8003444 <UART_SetConfig+0x324>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d124      	bne.n	800328a <UART_SetConfig+0x16a>
 8003240:	4b7e      	ldr	r3, [pc, #504]	; (800343c <UART_SetConfig+0x31c>)
 8003242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003244:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003248:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800324c:	d011      	beq.n	8003272 <UART_SetConfig+0x152>
 800324e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003252:	d817      	bhi.n	8003284 <UART_SetConfig+0x164>
 8003254:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003258:	d011      	beq.n	800327e <UART_SetConfig+0x15e>
 800325a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800325e:	d811      	bhi.n	8003284 <UART_SetConfig+0x164>
 8003260:	2b00      	cmp	r3, #0
 8003262:	d003      	beq.n	800326c <UART_SetConfig+0x14c>
 8003264:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003268:	d006      	beq.n	8003278 <UART_SetConfig+0x158>
 800326a:	e00b      	b.n	8003284 <UART_SetConfig+0x164>
 800326c:	2300      	movs	r3, #0
 800326e:	77fb      	strb	r3, [r7, #31]
 8003270:	e061      	b.n	8003336 <UART_SetConfig+0x216>
 8003272:	2302      	movs	r3, #2
 8003274:	77fb      	strb	r3, [r7, #31]
 8003276:	e05e      	b.n	8003336 <UART_SetConfig+0x216>
 8003278:	2304      	movs	r3, #4
 800327a:	77fb      	strb	r3, [r7, #31]
 800327c:	e05b      	b.n	8003336 <UART_SetConfig+0x216>
 800327e:	2308      	movs	r3, #8
 8003280:	77fb      	strb	r3, [r7, #31]
 8003282:	e058      	b.n	8003336 <UART_SetConfig+0x216>
 8003284:	2310      	movs	r3, #16
 8003286:	77fb      	strb	r3, [r7, #31]
 8003288:	e055      	b.n	8003336 <UART_SetConfig+0x216>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a6e      	ldr	r2, [pc, #440]	; (8003448 <UART_SetConfig+0x328>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d124      	bne.n	80032de <UART_SetConfig+0x1be>
 8003294:	4b69      	ldr	r3, [pc, #420]	; (800343c <UART_SetConfig+0x31c>)
 8003296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003298:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800329c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80032a0:	d011      	beq.n	80032c6 <UART_SetConfig+0x1a6>
 80032a2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80032a6:	d817      	bhi.n	80032d8 <UART_SetConfig+0x1b8>
 80032a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032ac:	d011      	beq.n	80032d2 <UART_SetConfig+0x1b2>
 80032ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032b2:	d811      	bhi.n	80032d8 <UART_SetConfig+0x1b8>
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d003      	beq.n	80032c0 <UART_SetConfig+0x1a0>
 80032b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032bc:	d006      	beq.n	80032cc <UART_SetConfig+0x1ac>
 80032be:	e00b      	b.n	80032d8 <UART_SetConfig+0x1b8>
 80032c0:	2300      	movs	r3, #0
 80032c2:	77fb      	strb	r3, [r7, #31]
 80032c4:	e037      	b.n	8003336 <UART_SetConfig+0x216>
 80032c6:	2302      	movs	r3, #2
 80032c8:	77fb      	strb	r3, [r7, #31]
 80032ca:	e034      	b.n	8003336 <UART_SetConfig+0x216>
 80032cc:	2304      	movs	r3, #4
 80032ce:	77fb      	strb	r3, [r7, #31]
 80032d0:	e031      	b.n	8003336 <UART_SetConfig+0x216>
 80032d2:	2308      	movs	r3, #8
 80032d4:	77fb      	strb	r3, [r7, #31]
 80032d6:	e02e      	b.n	8003336 <UART_SetConfig+0x216>
 80032d8:	2310      	movs	r3, #16
 80032da:	77fb      	strb	r3, [r7, #31]
 80032dc:	e02b      	b.n	8003336 <UART_SetConfig+0x216>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a5a      	ldr	r2, [pc, #360]	; (800344c <UART_SetConfig+0x32c>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d124      	bne.n	8003332 <UART_SetConfig+0x212>
 80032e8:	4b54      	ldr	r3, [pc, #336]	; (800343c <UART_SetConfig+0x31c>)
 80032ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ec:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80032f0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80032f4:	d011      	beq.n	800331a <UART_SetConfig+0x1fa>
 80032f6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80032fa:	d817      	bhi.n	800332c <UART_SetConfig+0x20c>
 80032fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003300:	d011      	beq.n	8003326 <UART_SetConfig+0x206>
 8003302:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003306:	d811      	bhi.n	800332c <UART_SetConfig+0x20c>
 8003308:	2b00      	cmp	r3, #0
 800330a:	d003      	beq.n	8003314 <UART_SetConfig+0x1f4>
 800330c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003310:	d006      	beq.n	8003320 <UART_SetConfig+0x200>
 8003312:	e00b      	b.n	800332c <UART_SetConfig+0x20c>
 8003314:	2300      	movs	r3, #0
 8003316:	77fb      	strb	r3, [r7, #31]
 8003318:	e00d      	b.n	8003336 <UART_SetConfig+0x216>
 800331a:	2302      	movs	r3, #2
 800331c:	77fb      	strb	r3, [r7, #31]
 800331e:	e00a      	b.n	8003336 <UART_SetConfig+0x216>
 8003320:	2304      	movs	r3, #4
 8003322:	77fb      	strb	r3, [r7, #31]
 8003324:	e007      	b.n	8003336 <UART_SetConfig+0x216>
 8003326:	2308      	movs	r3, #8
 8003328:	77fb      	strb	r3, [r7, #31]
 800332a:	e004      	b.n	8003336 <UART_SetConfig+0x216>
 800332c:	2310      	movs	r3, #16
 800332e:	77fb      	strb	r3, [r7, #31]
 8003330:	e001      	b.n	8003336 <UART_SetConfig+0x216>
 8003332:	2310      	movs	r3, #16
 8003334:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	69db      	ldr	r3, [r3, #28]
 800333a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800333e:	d15b      	bne.n	80033f8 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8003340:	7ffb      	ldrb	r3, [r7, #31]
 8003342:	2b08      	cmp	r3, #8
 8003344:	d827      	bhi.n	8003396 <UART_SetConfig+0x276>
 8003346:	a201      	add	r2, pc, #4	; (adr r2, 800334c <UART_SetConfig+0x22c>)
 8003348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800334c:	08003371 	.word	0x08003371
 8003350:	08003379 	.word	0x08003379
 8003354:	08003381 	.word	0x08003381
 8003358:	08003397 	.word	0x08003397
 800335c:	08003387 	.word	0x08003387
 8003360:	08003397 	.word	0x08003397
 8003364:	08003397 	.word	0x08003397
 8003368:	08003397 	.word	0x08003397
 800336c:	0800338f 	.word	0x0800338f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003370:	f7ff fb54 	bl	8002a1c <HAL_RCC_GetPCLK1Freq>
 8003374:	61b8      	str	r0, [r7, #24]
        break;
 8003376:	e013      	b.n	80033a0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003378:	f7ff fb72 	bl	8002a60 <HAL_RCC_GetPCLK2Freq>
 800337c:	61b8      	str	r0, [r7, #24]
        break;
 800337e:	e00f      	b.n	80033a0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003380:	4b33      	ldr	r3, [pc, #204]	; (8003450 <UART_SetConfig+0x330>)
 8003382:	61bb      	str	r3, [r7, #24]
        break;
 8003384:	e00c      	b.n	80033a0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003386:	f7ff fae9 	bl	800295c <HAL_RCC_GetSysClockFreq>
 800338a:	61b8      	str	r0, [r7, #24]
        break;
 800338c:	e008      	b.n	80033a0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800338e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003392:	61bb      	str	r3, [r7, #24]
        break;
 8003394:	e004      	b.n	80033a0 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8003396:	2300      	movs	r3, #0
 8003398:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	77bb      	strb	r3, [r7, #30]
        break;
 800339e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	f000 8082 	beq.w	80034ac <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	005a      	lsls	r2, r3, #1
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	085b      	lsrs	r3, r3, #1
 80033b2:	441a      	add	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033bc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	2b0f      	cmp	r3, #15
 80033c2:	d916      	bls.n	80033f2 <UART_SetConfig+0x2d2>
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033ca:	d212      	bcs.n	80033f2 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	f023 030f 	bic.w	r3, r3, #15
 80033d4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	085b      	lsrs	r3, r3, #1
 80033da:	b29b      	uxth	r3, r3
 80033dc:	f003 0307 	and.w	r3, r3, #7
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	89fb      	ldrh	r3, [r7, #14]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	89fa      	ldrh	r2, [r7, #14]
 80033ee:	60da      	str	r2, [r3, #12]
 80033f0:	e05c      	b.n	80034ac <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	77bb      	strb	r3, [r7, #30]
 80033f6:	e059      	b.n	80034ac <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80033f8:	7ffb      	ldrb	r3, [r7, #31]
 80033fa:	2b08      	cmp	r3, #8
 80033fc:	d835      	bhi.n	800346a <UART_SetConfig+0x34a>
 80033fe:	a201      	add	r2, pc, #4	; (adr r2, 8003404 <UART_SetConfig+0x2e4>)
 8003400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003404:	08003429 	.word	0x08003429
 8003408:	08003431 	.word	0x08003431
 800340c:	08003455 	.word	0x08003455
 8003410:	0800346b 	.word	0x0800346b
 8003414:	0800345b 	.word	0x0800345b
 8003418:	0800346b 	.word	0x0800346b
 800341c:	0800346b 	.word	0x0800346b
 8003420:	0800346b 	.word	0x0800346b
 8003424:	08003463 	.word	0x08003463
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003428:	f7ff faf8 	bl	8002a1c <HAL_RCC_GetPCLK1Freq>
 800342c:	61b8      	str	r0, [r7, #24]
        break;
 800342e:	e021      	b.n	8003474 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003430:	f7ff fb16 	bl	8002a60 <HAL_RCC_GetPCLK2Freq>
 8003434:	61b8      	str	r0, [r7, #24]
        break;
 8003436:	e01d      	b.n	8003474 <UART_SetConfig+0x354>
 8003438:	40013800 	.word	0x40013800
 800343c:	40021000 	.word	0x40021000
 8003440:	40004400 	.word	0x40004400
 8003444:	40004800 	.word	0x40004800
 8003448:	40004c00 	.word	0x40004c00
 800344c:	40005000 	.word	0x40005000
 8003450:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003454:	4b1b      	ldr	r3, [pc, #108]	; (80034c4 <UART_SetConfig+0x3a4>)
 8003456:	61bb      	str	r3, [r7, #24]
        break;
 8003458:	e00c      	b.n	8003474 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800345a:	f7ff fa7f 	bl	800295c <HAL_RCC_GetSysClockFreq>
 800345e:	61b8      	str	r0, [r7, #24]
        break;
 8003460:	e008      	b.n	8003474 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003462:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003466:	61bb      	str	r3, [r7, #24]
        break;
 8003468:	e004      	b.n	8003474 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800346a:	2300      	movs	r3, #0
 800346c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	77bb      	strb	r3, [r7, #30]
        break;
 8003472:	bf00      	nop
    }

    if (pclk != 0U)
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d018      	beq.n	80034ac <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	085a      	lsrs	r2, r3, #1
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	441a      	add	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	fbb2 f3f3 	udiv	r3, r2, r3
 800348c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	2b0f      	cmp	r3, #15
 8003492:	d909      	bls.n	80034a8 <UART_SetConfig+0x388>
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800349a:	d205      	bcs.n	80034a8 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	b29a      	uxth	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	60da      	str	r2, [r3, #12]
 80034a6:	e001      	b.n	80034ac <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80034b8:	7fbb      	ldrb	r3, [r7, #30]
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3720      	adds	r7, #32
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	007a1200 	.word	0x007a1200

080034c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d4:	f003 0308 	and.w	r3, r3, #8
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00a      	beq.n	80034f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	430a      	orrs	r2, r1
 80034f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00a      	beq.n	8003514 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	430a      	orrs	r2, r1
 8003512:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003518:	f003 0302 	and.w	r3, r3, #2
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00a      	beq.n	8003536 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	430a      	orrs	r2, r1
 8003534:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353a:	f003 0304 	and.w	r3, r3, #4
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00a      	beq.n	8003558 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	430a      	orrs	r2, r1
 8003556:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355c:	f003 0310 	and.w	r3, r3, #16
 8003560:	2b00      	cmp	r3, #0
 8003562:	d00a      	beq.n	800357a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	430a      	orrs	r2, r1
 8003578:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357e:	f003 0320 	and.w	r3, r3, #32
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00a      	beq.n	800359c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	430a      	orrs	r2, r1
 800359a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d01a      	beq.n	80035de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035c6:	d10a      	bne.n	80035de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	430a      	orrs	r2, r1
 80035dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00a      	beq.n	8003600 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	430a      	orrs	r2, r1
 80035fe:	605a      	str	r2, [r3, #4]
  }
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b098      	sub	sp, #96	; 0x60
 8003610:	af02      	add	r7, sp, #8
 8003612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800361c:	f7fd fd3c 	bl	8001098 <HAL_GetTick>
 8003620:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0308 	and.w	r3, r3, #8
 800362c:	2b08      	cmp	r3, #8
 800362e:	d12e      	bne.n	800368e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003630:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003634:	9300      	str	r3, [sp, #0]
 8003636:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003638:	2200      	movs	r2, #0
 800363a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 f88c 	bl	800375c <UART_WaitOnFlagUntilTimeout>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d021      	beq.n	800368e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003652:	e853 3f00 	ldrex	r3, [r3]
 8003656:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800365a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800365e:	653b      	str	r3, [r7, #80]	; 0x50
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	461a      	mov	r2, r3
 8003666:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003668:	647b      	str	r3, [r7, #68]	; 0x44
 800366a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800366c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800366e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003670:	e841 2300 	strex	r3, r2, [r1]
 8003674:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003678:	2b00      	cmp	r3, #0
 800367a:	d1e6      	bne.n	800364a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2220      	movs	r2, #32
 8003680:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e062      	b.n	8003754 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0304 	and.w	r3, r3, #4
 8003698:	2b04      	cmp	r3, #4
 800369a:	d149      	bne.n	8003730 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800369c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80036a0:	9300      	str	r3, [sp, #0]
 80036a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036a4:	2200      	movs	r2, #0
 80036a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 f856 	bl	800375c <UART_WaitOnFlagUntilTimeout>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d03c      	beq.n	8003730 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036be:	e853 3f00 	ldrex	r3, [r3]
 80036c2:	623b      	str	r3, [r7, #32]
   return(result);
 80036c4:	6a3b      	ldr	r3, [r7, #32]
 80036c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80036ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	461a      	mov	r2, r3
 80036d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036d4:	633b      	str	r3, [r7, #48]	; 0x30
 80036d6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80036da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036dc:	e841 2300 	strex	r3, r2, [r1]
 80036e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80036e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d1e6      	bne.n	80036b6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	3308      	adds	r3, #8
 80036ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	e853 3f00 	ldrex	r3, [r3]
 80036f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f023 0301 	bic.w	r3, r3, #1
 80036fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	3308      	adds	r3, #8
 8003706:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003708:	61fa      	str	r2, [r7, #28]
 800370a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800370c:	69b9      	ldr	r1, [r7, #24]
 800370e:	69fa      	ldr	r2, [r7, #28]
 8003710:	e841 2300 	strex	r3, r2, [r1]
 8003714:	617b      	str	r3, [r7, #20]
   return(result);
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1e5      	bne.n	80036e8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2220      	movs	r2, #32
 8003720:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e011      	b.n	8003754 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2220      	movs	r2, #32
 8003734:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2220      	movs	r2, #32
 800373a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003752:	2300      	movs	r3, #0
}
 8003754:	4618      	mov	r0, r3
 8003756:	3758      	adds	r7, #88	; 0x58
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	603b      	str	r3, [r7, #0]
 8003768:	4613      	mov	r3, r2
 800376a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800376c:	e04f      	b.n	800380e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003774:	d04b      	beq.n	800380e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003776:	f7fd fc8f 	bl	8001098 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	69ba      	ldr	r2, [r7, #24]
 8003782:	429a      	cmp	r2, r3
 8003784:	d302      	bcc.n	800378c <UART_WaitOnFlagUntilTimeout+0x30>
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d101      	bne.n	8003790 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e04e      	b.n	800382e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0304 	and.w	r3, r3, #4
 800379a:	2b00      	cmp	r3, #0
 800379c:	d037      	beq.n	800380e <UART_WaitOnFlagUntilTimeout+0xb2>
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	2b80      	cmp	r3, #128	; 0x80
 80037a2:	d034      	beq.n	800380e <UART_WaitOnFlagUntilTimeout+0xb2>
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	2b40      	cmp	r3, #64	; 0x40
 80037a8:	d031      	beq.n	800380e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	69db      	ldr	r3, [r3, #28]
 80037b0:	f003 0308 	and.w	r3, r3, #8
 80037b4:	2b08      	cmp	r3, #8
 80037b6:	d110      	bne.n	80037da <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2208      	movs	r2, #8
 80037be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037c0:	68f8      	ldr	r0, [r7, #12]
 80037c2:	f000 f838 	bl	8003836 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2208      	movs	r2, #8
 80037ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e029      	b.n	800382e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	69db      	ldr	r3, [r3, #28]
 80037e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037e8:	d111      	bne.n	800380e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037f4:	68f8      	ldr	r0, [r7, #12]
 80037f6:	f000 f81e 	bl	8003836 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2220      	movs	r2, #32
 80037fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e00f      	b.n	800382e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	69da      	ldr	r2, [r3, #28]
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	4013      	ands	r3, r2
 8003818:	68ba      	ldr	r2, [r7, #8]
 800381a:	429a      	cmp	r2, r3
 800381c:	bf0c      	ite	eq
 800381e:	2301      	moveq	r3, #1
 8003820:	2300      	movne	r3, #0
 8003822:	b2db      	uxtb	r3, r3
 8003824:	461a      	mov	r2, r3
 8003826:	79fb      	ldrb	r3, [r7, #7]
 8003828:	429a      	cmp	r2, r3
 800382a:	d0a0      	beq.n	800376e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}

08003836 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003836:	b480      	push	{r7}
 8003838:	b095      	sub	sp, #84	; 0x54
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003846:	e853 3f00 	ldrex	r3, [r3]
 800384a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800384c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800384e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003852:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	461a      	mov	r2, r3
 800385a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800385c:	643b      	str	r3, [r7, #64]	; 0x40
 800385e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003860:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003862:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003864:	e841 2300 	strex	r3, r2, [r1]
 8003868:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800386a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800386c:	2b00      	cmp	r3, #0
 800386e:	d1e6      	bne.n	800383e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	3308      	adds	r3, #8
 8003876:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003878:	6a3b      	ldr	r3, [r7, #32]
 800387a:	e853 3f00 	ldrex	r3, [r3]
 800387e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	f023 0301 	bic.w	r3, r3, #1
 8003886:	64bb      	str	r3, [r7, #72]	; 0x48
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	3308      	adds	r3, #8
 800388e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003890:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003892:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003894:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003896:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003898:	e841 2300 	strex	r3, r2, [r1]
 800389c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800389e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1e5      	bne.n	8003870 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d118      	bne.n	80038de <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	e853 3f00 	ldrex	r3, [r3]
 80038b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	f023 0310 	bic.w	r3, r3, #16
 80038c0:	647b      	str	r3, [r7, #68]	; 0x44
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	461a      	mov	r2, r3
 80038c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038ca:	61bb      	str	r3, [r7, #24]
 80038cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ce:	6979      	ldr	r1, [r7, #20]
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	e841 2300 	strex	r3, r2, [r1]
 80038d6:	613b      	str	r3, [r7, #16]
   return(result);
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1e6      	bne.n	80038ac <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2220      	movs	r2, #32
 80038e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80038f2:	bf00      	nop
 80038f4:	3754      	adds	r7, #84	; 0x54
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
	...

08003900 <std>:
 8003900:	2300      	movs	r3, #0
 8003902:	b510      	push	{r4, lr}
 8003904:	4604      	mov	r4, r0
 8003906:	e9c0 3300 	strd	r3, r3, [r0]
 800390a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800390e:	6083      	str	r3, [r0, #8]
 8003910:	8181      	strh	r1, [r0, #12]
 8003912:	6643      	str	r3, [r0, #100]	; 0x64
 8003914:	81c2      	strh	r2, [r0, #14]
 8003916:	6183      	str	r3, [r0, #24]
 8003918:	4619      	mov	r1, r3
 800391a:	2208      	movs	r2, #8
 800391c:	305c      	adds	r0, #92	; 0x5c
 800391e:	f000 f9d3 	bl	8003cc8 <memset>
 8003922:	4b05      	ldr	r3, [pc, #20]	; (8003938 <std+0x38>)
 8003924:	6263      	str	r3, [r4, #36]	; 0x24
 8003926:	4b05      	ldr	r3, [pc, #20]	; (800393c <std+0x3c>)
 8003928:	62a3      	str	r3, [r4, #40]	; 0x28
 800392a:	4b05      	ldr	r3, [pc, #20]	; (8003940 <std+0x40>)
 800392c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800392e:	4b05      	ldr	r3, [pc, #20]	; (8003944 <std+0x44>)
 8003930:	6224      	str	r4, [r4, #32]
 8003932:	6323      	str	r3, [r4, #48]	; 0x30
 8003934:	bd10      	pop	{r4, pc}
 8003936:	bf00      	nop
 8003938:	08003b19 	.word	0x08003b19
 800393c:	08003b3b 	.word	0x08003b3b
 8003940:	08003b73 	.word	0x08003b73
 8003944:	08003b97 	.word	0x08003b97

08003948 <stdio_exit_handler>:
 8003948:	4a02      	ldr	r2, [pc, #8]	; (8003954 <stdio_exit_handler+0xc>)
 800394a:	4903      	ldr	r1, [pc, #12]	; (8003958 <stdio_exit_handler+0x10>)
 800394c:	4803      	ldr	r0, [pc, #12]	; (800395c <stdio_exit_handler+0x14>)
 800394e:	f000 b869 	b.w	8003a24 <_fwalk_sglue>
 8003952:	bf00      	nop
 8003954:	20000014 	.word	0x20000014
 8003958:	080040b9 	.word	0x080040b9
 800395c:	20000020 	.word	0x20000020

08003960 <cleanup_stdio>:
 8003960:	6841      	ldr	r1, [r0, #4]
 8003962:	4b0c      	ldr	r3, [pc, #48]	; (8003994 <cleanup_stdio+0x34>)
 8003964:	4299      	cmp	r1, r3
 8003966:	b510      	push	{r4, lr}
 8003968:	4604      	mov	r4, r0
 800396a:	d001      	beq.n	8003970 <cleanup_stdio+0x10>
 800396c:	f000 fba4 	bl	80040b8 <_fflush_r>
 8003970:	68a1      	ldr	r1, [r4, #8]
 8003972:	4b09      	ldr	r3, [pc, #36]	; (8003998 <cleanup_stdio+0x38>)
 8003974:	4299      	cmp	r1, r3
 8003976:	d002      	beq.n	800397e <cleanup_stdio+0x1e>
 8003978:	4620      	mov	r0, r4
 800397a:	f000 fb9d 	bl	80040b8 <_fflush_r>
 800397e:	68e1      	ldr	r1, [r4, #12]
 8003980:	4b06      	ldr	r3, [pc, #24]	; (800399c <cleanup_stdio+0x3c>)
 8003982:	4299      	cmp	r1, r3
 8003984:	d004      	beq.n	8003990 <cleanup_stdio+0x30>
 8003986:	4620      	mov	r0, r4
 8003988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800398c:	f000 bb94 	b.w	80040b8 <_fflush_r>
 8003990:	bd10      	pop	{r4, pc}
 8003992:	bf00      	nop
 8003994:	20000128 	.word	0x20000128
 8003998:	20000190 	.word	0x20000190
 800399c:	200001f8 	.word	0x200001f8

080039a0 <global_stdio_init.part.0>:
 80039a0:	b510      	push	{r4, lr}
 80039a2:	4b0b      	ldr	r3, [pc, #44]	; (80039d0 <global_stdio_init.part.0+0x30>)
 80039a4:	4c0b      	ldr	r4, [pc, #44]	; (80039d4 <global_stdio_init.part.0+0x34>)
 80039a6:	4a0c      	ldr	r2, [pc, #48]	; (80039d8 <global_stdio_init.part.0+0x38>)
 80039a8:	601a      	str	r2, [r3, #0]
 80039aa:	4620      	mov	r0, r4
 80039ac:	2200      	movs	r2, #0
 80039ae:	2104      	movs	r1, #4
 80039b0:	f7ff ffa6 	bl	8003900 <std>
 80039b4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80039b8:	2201      	movs	r2, #1
 80039ba:	2109      	movs	r1, #9
 80039bc:	f7ff ffa0 	bl	8003900 <std>
 80039c0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80039c4:	2202      	movs	r2, #2
 80039c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039ca:	2112      	movs	r1, #18
 80039cc:	f7ff bf98 	b.w	8003900 <std>
 80039d0:	20000260 	.word	0x20000260
 80039d4:	20000128 	.word	0x20000128
 80039d8:	08003949 	.word	0x08003949

080039dc <__sfp_lock_acquire>:
 80039dc:	4801      	ldr	r0, [pc, #4]	; (80039e4 <__sfp_lock_acquire+0x8>)
 80039de:	f000 b9eb 	b.w	8003db8 <__retarget_lock_acquire_recursive>
 80039e2:	bf00      	nop
 80039e4:	20000269 	.word	0x20000269

080039e8 <__sfp_lock_release>:
 80039e8:	4801      	ldr	r0, [pc, #4]	; (80039f0 <__sfp_lock_release+0x8>)
 80039ea:	f000 b9e6 	b.w	8003dba <__retarget_lock_release_recursive>
 80039ee:	bf00      	nop
 80039f0:	20000269 	.word	0x20000269

080039f4 <__sinit>:
 80039f4:	b510      	push	{r4, lr}
 80039f6:	4604      	mov	r4, r0
 80039f8:	f7ff fff0 	bl	80039dc <__sfp_lock_acquire>
 80039fc:	6a23      	ldr	r3, [r4, #32]
 80039fe:	b11b      	cbz	r3, 8003a08 <__sinit+0x14>
 8003a00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a04:	f7ff bff0 	b.w	80039e8 <__sfp_lock_release>
 8003a08:	4b04      	ldr	r3, [pc, #16]	; (8003a1c <__sinit+0x28>)
 8003a0a:	6223      	str	r3, [r4, #32]
 8003a0c:	4b04      	ldr	r3, [pc, #16]	; (8003a20 <__sinit+0x2c>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d1f5      	bne.n	8003a00 <__sinit+0xc>
 8003a14:	f7ff ffc4 	bl	80039a0 <global_stdio_init.part.0>
 8003a18:	e7f2      	b.n	8003a00 <__sinit+0xc>
 8003a1a:	bf00      	nop
 8003a1c:	08003961 	.word	0x08003961
 8003a20:	20000260 	.word	0x20000260

08003a24 <_fwalk_sglue>:
 8003a24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a28:	4607      	mov	r7, r0
 8003a2a:	4688      	mov	r8, r1
 8003a2c:	4614      	mov	r4, r2
 8003a2e:	2600      	movs	r6, #0
 8003a30:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003a34:	f1b9 0901 	subs.w	r9, r9, #1
 8003a38:	d505      	bpl.n	8003a46 <_fwalk_sglue+0x22>
 8003a3a:	6824      	ldr	r4, [r4, #0]
 8003a3c:	2c00      	cmp	r4, #0
 8003a3e:	d1f7      	bne.n	8003a30 <_fwalk_sglue+0xc>
 8003a40:	4630      	mov	r0, r6
 8003a42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a46:	89ab      	ldrh	r3, [r5, #12]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d907      	bls.n	8003a5c <_fwalk_sglue+0x38>
 8003a4c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003a50:	3301      	adds	r3, #1
 8003a52:	d003      	beq.n	8003a5c <_fwalk_sglue+0x38>
 8003a54:	4629      	mov	r1, r5
 8003a56:	4638      	mov	r0, r7
 8003a58:	47c0      	blx	r8
 8003a5a:	4306      	orrs	r6, r0
 8003a5c:	3568      	adds	r5, #104	; 0x68
 8003a5e:	e7e9      	b.n	8003a34 <_fwalk_sglue+0x10>

08003a60 <_puts_r>:
 8003a60:	6a03      	ldr	r3, [r0, #32]
 8003a62:	b570      	push	{r4, r5, r6, lr}
 8003a64:	6884      	ldr	r4, [r0, #8]
 8003a66:	4605      	mov	r5, r0
 8003a68:	460e      	mov	r6, r1
 8003a6a:	b90b      	cbnz	r3, 8003a70 <_puts_r+0x10>
 8003a6c:	f7ff ffc2 	bl	80039f4 <__sinit>
 8003a70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a72:	07db      	lsls	r3, r3, #31
 8003a74:	d405      	bmi.n	8003a82 <_puts_r+0x22>
 8003a76:	89a3      	ldrh	r3, [r4, #12]
 8003a78:	0598      	lsls	r0, r3, #22
 8003a7a:	d402      	bmi.n	8003a82 <_puts_r+0x22>
 8003a7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a7e:	f000 f99b 	bl	8003db8 <__retarget_lock_acquire_recursive>
 8003a82:	89a3      	ldrh	r3, [r4, #12]
 8003a84:	0719      	lsls	r1, r3, #28
 8003a86:	d513      	bpl.n	8003ab0 <_puts_r+0x50>
 8003a88:	6923      	ldr	r3, [r4, #16]
 8003a8a:	b18b      	cbz	r3, 8003ab0 <_puts_r+0x50>
 8003a8c:	3e01      	subs	r6, #1
 8003a8e:	68a3      	ldr	r3, [r4, #8]
 8003a90:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003a94:	3b01      	subs	r3, #1
 8003a96:	60a3      	str	r3, [r4, #8]
 8003a98:	b9e9      	cbnz	r1, 8003ad6 <_puts_r+0x76>
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	da2e      	bge.n	8003afc <_puts_r+0x9c>
 8003a9e:	4622      	mov	r2, r4
 8003aa0:	210a      	movs	r1, #10
 8003aa2:	4628      	mov	r0, r5
 8003aa4:	f000 f87b 	bl	8003b9e <__swbuf_r>
 8003aa8:	3001      	adds	r0, #1
 8003aaa:	d007      	beq.n	8003abc <_puts_r+0x5c>
 8003aac:	250a      	movs	r5, #10
 8003aae:	e007      	b.n	8003ac0 <_puts_r+0x60>
 8003ab0:	4621      	mov	r1, r4
 8003ab2:	4628      	mov	r0, r5
 8003ab4:	f000 f8b0 	bl	8003c18 <__swsetup_r>
 8003ab8:	2800      	cmp	r0, #0
 8003aba:	d0e7      	beq.n	8003a8c <_puts_r+0x2c>
 8003abc:	f04f 35ff 	mov.w	r5, #4294967295
 8003ac0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ac2:	07da      	lsls	r2, r3, #31
 8003ac4:	d405      	bmi.n	8003ad2 <_puts_r+0x72>
 8003ac6:	89a3      	ldrh	r3, [r4, #12]
 8003ac8:	059b      	lsls	r3, r3, #22
 8003aca:	d402      	bmi.n	8003ad2 <_puts_r+0x72>
 8003acc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ace:	f000 f974 	bl	8003dba <__retarget_lock_release_recursive>
 8003ad2:	4628      	mov	r0, r5
 8003ad4:	bd70      	pop	{r4, r5, r6, pc}
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	da04      	bge.n	8003ae4 <_puts_r+0x84>
 8003ada:	69a2      	ldr	r2, [r4, #24]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	dc06      	bgt.n	8003aee <_puts_r+0x8e>
 8003ae0:	290a      	cmp	r1, #10
 8003ae2:	d004      	beq.n	8003aee <_puts_r+0x8e>
 8003ae4:	6823      	ldr	r3, [r4, #0]
 8003ae6:	1c5a      	adds	r2, r3, #1
 8003ae8:	6022      	str	r2, [r4, #0]
 8003aea:	7019      	strb	r1, [r3, #0]
 8003aec:	e7cf      	b.n	8003a8e <_puts_r+0x2e>
 8003aee:	4622      	mov	r2, r4
 8003af0:	4628      	mov	r0, r5
 8003af2:	f000 f854 	bl	8003b9e <__swbuf_r>
 8003af6:	3001      	adds	r0, #1
 8003af8:	d1c9      	bne.n	8003a8e <_puts_r+0x2e>
 8003afa:	e7df      	b.n	8003abc <_puts_r+0x5c>
 8003afc:	6823      	ldr	r3, [r4, #0]
 8003afe:	250a      	movs	r5, #10
 8003b00:	1c5a      	adds	r2, r3, #1
 8003b02:	6022      	str	r2, [r4, #0]
 8003b04:	701d      	strb	r5, [r3, #0]
 8003b06:	e7db      	b.n	8003ac0 <_puts_r+0x60>

08003b08 <puts>:
 8003b08:	4b02      	ldr	r3, [pc, #8]	; (8003b14 <puts+0xc>)
 8003b0a:	4601      	mov	r1, r0
 8003b0c:	6818      	ldr	r0, [r3, #0]
 8003b0e:	f7ff bfa7 	b.w	8003a60 <_puts_r>
 8003b12:	bf00      	nop
 8003b14:	2000006c 	.word	0x2000006c

08003b18 <__sread>:
 8003b18:	b510      	push	{r4, lr}
 8003b1a:	460c      	mov	r4, r1
 8003b1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b20:	f000 f8fc 	bl	8003d1c <_read_r>
 8003b24:	2800      	cmp	r0, #0
 8003b26:	bfab      	itete	ge
 8003b28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003b2a:	89a3      	ldrhlt	r3, [r4, #12]
 8003b2c:	181b      	addge	r3, r3, r0
 8003b2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003b32:	bfac      	ite	ge
 8003b34:	6563      	strge	r3, [r4, #84]	; 0x54
 8003b36:	81a3      	strhlt	r3, [r4, #12]
 8003b38:	bd10      	pop	{r4, pc}

08003b3a <__swrite>:
 8003b3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b3e:	461f      	mov	r7, r3
 8003b40:	898b      	ldrh	r3, [r1, #12]
 8003b42:	05db      	lsls	r3, r3, #23
 8003b44:	4605      	mov	r5, r0
 8003b46:	460c      	mov	r4, r1
 8003b48:	4616      	mov	r6, r2
 8003b4a:	d505      	bpl.n	8003b58 <__swrite+0x1e>
 8003b4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b50:	2302      	movs	r3, #2
 8003b52:	2200      	movs	r2, #0
 8003b54:	f000 f8d0 	bl	8003cf8 <_lseek_r>
 8003b58:	89a3      	ldrh	r3, [r4, #12]
 8003b5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b62:	81a3      	strh	r3, [r4, #12]
 8003b64:	4632      	mov	r2, r6
 8003b66:	463b      	mov	r3, r7
 8003b68:	4628      	mov	r0, r5
 8003b6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b6e:	f000 b8e7 	b.w	8003d40 <_write_r>

08003b72 <__sseek>:
 8003b72:	b510      	push	{r4, lr}
 8003b74:	460c      	mov	r4, r1
 8003b76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b7a:	f000 f8bd 	bl	8003cf8 <_lseek_r>
 8003b7e:	1c43      	adds	r3, r0, #1
 8003b80:	89a3      	ldrh	r3, [r4, #12]
 8003b82:	bf15      	itete	ne
 8003b84:	6560      	strne	r0, [r4, #84]	; 0x54
 8003b86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003b8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003b8e:	81a3      	strheq	r3, [r4, #12]
 8003b90:	bf18      	it	ne
 8003b92:	81a3      	strhne	r3, [r4, #12]
 8003b94:	bd10      	pop	{r4, pc}

08003b96 <__sclose>:
 8003b96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b9a:	f000 b89d 	b.w	8003cd8 <_close_r>

08003b9e <__swbuf_r>:
 8003b9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ba0:	460e      	mov	r6, r1
 8003ba2:	4614      	mov	r4, r2
 8003ba4:	4605      	mov	r5, r0
 8003ba6:	b118      	cbz	r0, 8003bb0 <__swbuf_r+0x12>
 8003ba8:	6a03      	ldr	r3, [r0, #32]
 8003baa:	b90b      	cbnz	r3, 8003bb0 <__swbuf_r+0x12>
 8003bac:	f7ff ff22 	bl	80039f4 <__sinit>
 8003bb0:	69a3      	ldr	r3, [r4, #24]
 8003bb2:	60a3      	str	r3, [r4, #8]
 8003bb4:	89a3      	ldrh	r3, [r4, #12]
 8003bb6:	071a      	lsls	r2, r3, #28
 8003bb8:	d525      	bpl.n	8003c06 <__swbuf_r+0x68>
 8003bba:	6923      	ldr	r3, [r4, #16]
 8003bbc:	b31b      	cbz	r3, 8003c06 <__swbuf_r+0x68>
 8003bbe:	6823      	ldr	r3, [r4, #0]
 8003bc0:	6922      	ldr	r2, [r4, #16]
 8003bc2:	1a98      	subs	r0, r3, r2
 8003bc4:	6963      	ldr	r3, [r4, #20]
 8003bc6:	b2f6      	uxtb	r6, r6
 8003bc8:	4283      	cmp	r3, r0
 8003bca:	4637      	mov	r7, r6
 8003bcc:	dc04      	bgt.n	8003bd8 <__swbuf_r+0x3a>
 8003bce:	4621      	mov	r1, r4
 8003bd0:	4628      	mov	r0, r5
 8003bd2:	f000 fa71 	bl	80040b8 <_fflush_r>
 8003bd6:	b9e0      	cbnz	r0, 8003c12 <__swbuf_r+0x74>
 8003bd8:	68a3      	ldr	r3, [r4, #8]
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	60a3      	str	r3, [r4, #8]
 8003bde:	6823      	ldr	r3, [r4, #0]
 8003be0:	1c5a      	adds	r2, r3, #1
 8003be2:	6022      	str	r2, [r4, #0]
 8003be4:	701e      	strb	r6, [r3, #0]
 8003be6:	6962      	ldr	r2, [r4, #20]
 8003be8:	1c43      	adds	r3, r0, #1
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d004      	beq.n	8003bf8 <__swbuf_r+0x5a>
 8003bee:	89a3      	ldrh	r3, [r4, #12]
 8003bf0:	07db      	lsls	r3, r3, #31
 8003bf2:	d506      	bpl.n	8003c02 <__swbuf_r+0x64>
 8003bf4:	2e0a      	cmp	r6, #10
 8003bf6:	d104      	bne.n	8003c02 <__swbuf_r+0x64>
 8003bf8:	4621      	mov	r1, r4
 8003bfa:	4628      	mov	r0, r5
 8003bfc:	f000 fa5c 	bl	80040b8 <_fflush_r>
 8003c00:	b938      	cbnz	r0, 8003c12 <__swbuf_r+0x74>
 8003c02:	4638      	mov	r0, r7
 8003c04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c06:	4621      	mov	r1, r4
 8003c08:	4628      	mov	r0, r5
 8003c0a:	f000 f805 	bl	8003c18 <__swsetup_r>
 8003c0e:	2800      	cmp	r0, #0
 8003c10:	d0d5      	beq.n	8003bbe <__swbuf_r+0x20>
 8003c12:	f04f 37ff 	mov.w	r7, #4294967295
 8003c16:	e7f4      	b.n	8003c02 <__swbuf_r+0x64>

08003c18 <__swsetup_r>:
 8003c18:	b538      	push	{r3, r4, r5, lr}
 8003c1a:	4b2a      	ldr	r3, [pc, #168]	; (8003cc4 <__swsetup_r+0xac>)
 8003c1c:	4605      	mov	r5, r0
 8003c1e:	6818      	ldr	r0, [r3, #0]
 8003c20:	460c      	mov	r4, r1
 8003c22:	b118      	cbz	r0, 8003c2c <__swsetup_r+0x14>
 8003c24:	6a03      	ldr	r3, [r0, #32]
 8003c26:	b90b      	cbnz	r3, 8003c2c <__swsetup_r+0x14>
 8003c28:	f7ff fee4 	bl	80039f4 <__sinit>
 8003c2c:	89a3      	ldrh	r3, [r4, #12]
 8003c2e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003c32:	0718      	lsls	r0, r3, #28
 8003c34:	d422      	bmi.n	8003c7c <__swsetup_r+0x64>
 8003c36:	06d9      	lsls	r1, r3, #27
 8003c38:	d407      	bmi.n	8003c4a <__swsetup_r+0x32>
 8003c3a:	2309      	movs	r3, #9
 8003c3c:	602b      	str	r3, [r5, #0]
 8003c3e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003c42:	81a3      	strh	r3, [r4, #12]
 8003c44:	f04f 30ff 	mov.w	r0, #4294967295
 8003c48:	e034      	b.n	8003cb4 <__swsetup_r+0x9c>
 8003c4a:	0758      	lsls	r0, r3, #29
 8003c4c:	d512      	bpl.n	8003c74 <__swsetup_r+0x5c>
 8003c4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c50:	b141      	cbz	r1, 8003c64 <__swsetup_r+0x4c>
 8003c52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c56:	4299      	cmp	r1, r3
 8003c58:	d002      	beq.n	8003c60 <__swsetup_r+0x48>
 8003c5a:	4628      	mov	r0, r5
 8003c5c:	f000 f8ae 	bl	8003dbc <_free_r>
 8003c60:	2300      	movs	r3, #0
 8003c62:	6363      	str	r3, [r4, #52]	; 0x34
 8003c64:	89a3      	ldrh	r3, [r4, #12]
 8003c66:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003c6a:	81a3      	strh	r3, [r4, #12]
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	6063      	str	r3, [r4, #4]
 8003c70:	6923      	ldr	r3, [r4, #16]
 8003c72:	6023      	str	r3, [r4, #0]
 8003c74:	89a3      	ldrh	r3, [r4, #12]
 8003c76:	f043 0308 	orr.w	r3, r3, #8
 8003c7a:	81a3      	strh	r3, [r4, #12]
 8003c7c:	6923      	ldr	r3, [r4, #16]
 8003c7e:	b94b      	cbnz	r3, 8003c94 <__swsetup_r+0x7c>
 8003c80:	89a3      	ldrh	r3, [r4, #12]
 8003c82:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003c86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c8a:	d003      	beq.n	8003c94 <__swsetup_r+0x7c>
 8003c8c:	4621      	mov	r1, r4
 8003c8e:	4628      	mov	r0, r5
 8003c90:	f000 fa60 	bl	8004154 <__smakebuf_r>
 8003c94:	89a0      	ldrh	r0, [r4, #12]
 8003c96:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003c9a:	f010 0301 	ands.w	r3, r0, #1
 8003c9e:	d00a      	beq.n	8003cb6 <__swsetup_r+0x9e>
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	60a3      	str	r3, [r4, #8]
 8003ca4:	6963      	ldr	r3, [r4, #20]
 8003ca6:	425b      	negs	r3, r3
 8003ca8:	61a3      	str	r3, [r4, #24]
 8003caa:	6923      	ldr	r3, [r4, #16]
 8003cac:	b943      	cbnz	r3, 8003cc0 <__swsetup_r+0xa8>
 8003cae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003cb2:	d1c4      	bne.n	8003c3e <__swsetup_r+0x26>
 8003cb4:	bd38      	pop	{r3, r4, r5, pc}
 8003cb6:	0781      	lsls	r1, r0, #30
 8003cb8:	bf58      	it	pl
 8003cba:	6963      	ldrpl	r3, [r4, #20]
 8003cbc:	60a3      	str	r3, [r4, #8]
 8003cbe:	e7f4      	b.n	8003caa <__swsetup_r+0x92>
 8003cc0:	2000      	movs	r0, #0
 8003cc2:	e7f7      	b.n	8003cb4 <__swsetup_r+0x9c>
 8003cc4:	2000006c 	.word	0x2000006c

08003cc8 <memset>:
 8003cc8:	4402      	add	r2, r0
 8003cca:	4603      	mov	r3, r0
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d100      	bne.n	8003cd2 <memset+0xa>
 8003cd0:	4770      	bx	lr
 8003cd2:	f803 1b01 	strb.w	r1, [r3], #1
 8003cd6:	e7f9      	b.n	8003ccc <memset+0x4>

08003cd8 <_close_r>:
 8003cd8:	b538      	push	{r3, r4, r5, lr}
 8003cda:	4d06      	ldr	r5, [pc, #24]	; (8003cf4 <_close_r+0x1c>)
 8003cdc:	2300      	movs	r3, #0
 8003cde:	4604      	mov	r4, r0
 8003ce0:	4608      	mov	r0, r1
 8003ce2:	602b      	str	r3, [r5, #0]
 8003ce4:	f7fd f8d7 	bl	8000e96 <_close>
 8003ce8:	1c43      	adds	r3, r0, #1
 8003cea:	d102      	bne.n	8003cf2 <_close_r+0x1a>
 8003cec:	682b      	ldr	r3, [r5, #0]
 8003cee:	b103      	cbz	r3, 8003cf2 <_close_r+0x1a>
 8003cf0:	6023      	str	r3, [r4, #0]
 8003cf2:	bd38      	pop	{r3, r4, r5, pc}
 8003cf4:	20000264 	.word	0x20000264

08003cf8 <_lseek_r>:
 8003cf8:	b538      	push	{r3, r4, r5, lr}
 8003cfa:	4d07      	ldr	r5, [pc, #28]	; (8003d18 <_lseek_r+0x20>)
 8003cfc:	4604      	mov	r4, r0
 8003cfe:	4608      	mov	r0, r1
 8003d00:	4611      	mov	r1, r2
 8003d02:	2200      	movs	r2, #0
 8003d04:	602a      	str	r2, [r5, #0]
 8003d06:	461a      	mov	r2, r3
 8003d08:	f7fd f8ec 	bl	8000ee4 <_lseek>
 8003d0c:	1c43      	adds	r3, r0, #1
 8003d0e:	d102      	bne.n	8003d16 <_lseek_r+0x1e>
 8003d10:	682b      	ldr	r3, [r5, #0]
 8003d12:	b103      	cbz	r3, 8003d16 <_lseek_r+0x1e>
 8003d14:	6023      	str	r3, [r4, #0]
 8003d16:	bd38      	pop	{r3, r4, r5, pc}
 8003d18:	20000264 	.word	0x20000264

08003d1c <_read_r>:
 8003d1c:	b538      	push	{r3, r4, r5, lr}
 8003d1e:	4d07      	ldr	r5, [pc, #28]	; (8003d3c <_read_r+0x20>)
 8003d20:	4604      	mov	r4, r0
 8003d22:	4608      	mov	r0, r1
 8003d24:	4611      	mov	r1, r2
 8003d26:	2200      	movs	r2, #0
 8003d28:	602a      	str	r2, [r5, #0]
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	f7fd f87a 	bl	8000e24 <_read>
 8003d30:	1c43      	adds	r3, r0, #1
 8003d32:	d102      	bne.n	8003d3a <_read_r+0x1e>
 8003d34:	682b      	ldr	r3, [r5, #0]
 8003d36:	b103      	cbz	r3, 8003d3a <_read_r+0x1e>
 8003d38:	6023      	str	r3, [r4, #0]
 8003d3a:	bd38      	pop	{r3, r4, r5, pc}
 8003d3c:	20000264 	.word	0x20000264

08003d40 <_write_r>:
 8003d40:	b538      	push	{r3, r4, r5, lr}
 8003d42:	4d07      	ldr	r5, [pc, #28]	; (8003d60 <_write_r+0x20>)
 8003d44:	4604      	mov	r4, r0
 8003d46:	4608      	mov	r0, r1
 8003d48:	4611      	mov	r1, r2
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	602a      	str	r2, [r5, #0]
 8003d4e:	461a      	mov	r2, r3
 8003d50:	f7fd f885 	bl	8000e5e <_write>
 8003d54:	1c43      	adds	r3, r0, #1
 8003d56:	d102      	bne.n	8003d5e <_write_r+0x1e>
 8003d58:	682b      	ldr	r3, [r5, #0]
 8003d5a:	b103      	cbz	r3, 8003d5e <_write_r+0x1e>
 8003d5c:	6023      	str	r3, [r4, #0]
 8003d5e:	bd38      	pop	{r3, r4, r5, pc}
 8003d60:	20000264 	.word	0x20000264

08003d64 <__errno>:
 8003d64:	4b01      	ldr	r3, [pc, #4]	; (8003d6c <__errno+0x8>)
 8003d66:	6818      	ldr	r0, [r3, #0]
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	2000006c 	.word	0x2000006c

08003d70 <__libc_init_array>:
 8003d70:	b570      	push	{r4, r5, r6, lr}
 8003d72:	4d0d      	ldr	r5, [pc, #52]	; (8003da8 <__libc_init_array+0x38>)
 8003d74:	4c0d      	ldr	r4, [pc, #52]	; (8003dac <__libc_init_array+0x3c>)
 8003d76:	1b64      	subs	r4, r4, r5
 8003d78:	10a4      	asrs	r4, r4, #2
 8003d7a:	2600      	movs	r6, #0
 8003d7c:	42a6      	cmp	r6, r4
 8003d7e:	d109      	bne.n	8003d94 <__libc_init_array+0x24>
 8003d80:	4d0b      	ldr	r5, [pc, #44]	; (8003db0 <__libc_init_array+0x40>)
 8003d82:	4c0c      	ldr	r4, [pc, #48]	; (8003db4 <__libc_init_array+0x44>)
 8003d84:	f000 fa54 	bl	8004230 <_init>
 8003d88:	1b64      	subs	r4, r4, r5
 8003d8a:	10a4      	asrs	r4, r4, #2
 8003d8c:	2600      	movs	r6, #0
 8003d8e:	42a6      	cmp	r6, r4
 8003d90:	d105      	bne.n	8003d9e <__libc_init_array+0x2e>
 8003d92:	bd70      	pop	{r4, r5, r6, pc}
 8003d94:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d98:	4798      	blx	r3
 8003d9a:	3601      	adds	r6, #1
 8003d9c:	e7ee      	b.n	8003d7c <__libc_init_array+0xc>
 8003d9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003da2:	4798      	blx	r3
 8003da4:	3601      	adds	r6, #1
 8003da6:	e7f2      	b.n	8003d8e <__libc_init_array+0x1e>
 8003da8:	08004294 	.word	0x08004294
 8003dac:	08004294 	.word	0x08004294
 8003db0:	08004294 	.word	0x08004294
 8003db4:	08004298 	.word	0x08004298

08003db8 <__retarget_lock_acquire_recursive>:
 8003db8:	4770      	bx	lr

08003dba <__retarget_lock_release_recursive>:
 8003dba:	4770      	bx	lr

08003dbc <_free_r>:
 8003dbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003dbe:	2900      	cmp	r1, #0
 8003dc0:	d044      	beq.n	8003e4c <_free_r+0x90>
 8003dc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003dc6:	9001      	str	r0, [sp, #4]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f1a1 0404 	sub.w	r4, r1, #4
 8003dce:	bfb8      	it	lt
 8003dd0:	18e4      	addlt	r4, r4, r3
 8003dd2:	f000 f8df 	bl	8003f94 <__malloc_lock>
 8003dd6:	4a1e      	ldr	r2, [pc, #120]	; (8003e50 <_free_r+0x94>)
 8003dd8:	9801      	ldr	r0, [sp, #4]
 8003dda:	6813      	ldr	r3, [r2, #0]
 8003ddc:	b933      	cbnz	r3, 8003dec <_free_r+0x30>
 8003dde:	6063      	str	r3, [r4, #4]
 8003de0:	6014      	str	r4, [r2, #0]
 8003de2:	b003      	add	sp, #12
 8003de4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003de8:	f000 b8da 	b.w	8003fa0 <__malloc_unlock>
 8003dec:	42a3      	cmp	r3, r4
 8003dee:	d908      	bls.n	8003e02 <_free_r+0x46>
 8003df0:	6825      	ldr	r5, [r4, #0]
 8003df2:	1961      	adds	r1, r4, r5
 8003df4:	428b      	cmp	r3, r1
 8003df6:	bf01      	itttt	eq
 8003df8:	6819      	ldreq	r1, [r3, #0]
 8003dfa:	685b      	ldreq	r3, [r3, #4]
 8003dfc:	1949      	addeq	r1, r1, r5
 8003dfe:	6021      	streq	r1, [r4, #0]
 8003e00:	e7ed      	b.n	8003dde <_free_r+0x22>
 8003e02:	461a      	mov	r2, r3
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	b10b      	cbz	r3, 8003e0c <_free_r+0x50>
 8003e08:	42a3      	cmp	r3, r4
 8003e0a:	d9fa      	bls.n	8003e02 <_free_r+0x46>
 8003e0c:	6811      	ldr	r1, [r2, #0]
 8003e0e:	1855      	adds	r5, r2, r1
 8003e10:	42a5      	cmp	r5, r4
 8003e12:	d10b      	bne.n	8003e2c <_free_r+0x70>
 8003e14:	6824      	ldr	r4, [r4, #0]
 8003e16:	4421      	add	r1, r4
 8003e18:	1854      	adds	r4, r2, r1
 8003e1a:	42a3      	cmp	r3, r4
 8003e1c:	6011      	str	r1, [r2, #0]
 8003e1e:	d1e0      	bne.n	8003de2 <_free_r+0x26>
 8003e20:	681c      	ldr	r4, [r3, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	6053      	str	r3, [r2, #4]
 8003e26:	440c      	add	r4, r1
 8003e28:	6014      	str	r4, [r2, #0]
 8003e2a:	e7da      	b.n	8003de2 <_free_r+0x26>
 8003e2c:	d902      	bls.n	8003e34 <_free_r+0x78>
 8003e2e:	230c      	movs	r3, #12
 8003e30:	6003      	str	r3, [r0, #0]
 8003e32:	e7d6      	b.n	8003de2 <_free_r+0x26>
 8003e34:	6825      	ldr	r5, [r4, #0]
 8003e36:	1961      	adds	r1, r4, r5
 8003e38:	428b      	cmp	r3, r1
 8003e3a:	bf04      	itt	eq
 8003e3c:	6819      	ldreq	r1, [r3, #0]
 8003e3e:	685b      	ldreq	r3, [r3, #4]
 8003e40:	6063      	str	r3, [r4, #4]
 8003e42:	bf04      	itt	eq
 8003e44:	1949      	addeq	r1, r1, r5
 8003e46:	6021      	streq	r1, [r4, #0]
 8003e48:	6054      	str	r4, [r2, #4]
 8003e4a:	e7ca      	b.n	8003de2 <_free_r+0x26>
 8003e4c:	b003      	add	sp, #12
 8003e4e:	bd30      	pop	{r4, r5, pc}
 8003e50:	2000026c 	.word	0x2000026c

08003e54 <sbrk_aligned>:
 8003e54:	b570      	push	{r4, r5, r6, lr}
 8003e56:	4e0e      	ldr	r6, [pc, #56]	; (8003e90 <sbrk_aligned+0x3c>)
 8003e58:	460c      	mov	r4, r1
 8003e5a:	6831      	ldr	r1, [r6, #0]
 8003e5c:	4605      	mov	r5, r0
 8003e5e:	b911      	cbnz	r1, 8003e66 <sbrk_aligned+0x12>
 8003e60:	f000 f9d6 	bl	8004210 <_sbrk_r>
 8003e64:	6030      	str	r0, [r6, #0]
 8003e66:	4621      	mov	r1, r4
 8003e68:	4628      	mov	r0, r5
 8003e6a:	f000 f9d1 	bl	8004210 <_sbrk_r>
 8003e6e:	1c43      	adds	r3, r0, #1
 8003e70:	d00a      	beq.n	8003e88 <sbrk_aligned+0x34>
 8003e72:	1cc4      	adds	r4, r0, #3
 8003e74:	f024 0403 	bic.w	r4, r4, #3
 8003e78:	42a0      	cmp	r0, r4
 8003e7a:	d007      	beq.n	8003e8c <sbrk_aligned+0x38>
 8003e7c:	1a21      	subs	r1, r4, r0
 8003e7e:	4628      	mov	r0, r5
 8003e80:	f000 f9c6 	bl	8004210 <_sbrk_r>
 8003e84:	3001      	adds	r0, #1
 8003e86:	d101      	bne.n	8003e8c <sbrk_aligned+0x38>
 8003e88:	f04f 34ff 	mov.w	r4, #4294967295
 8003e8c:	4620      	mov	r0, r4
 8003e8e:	bd70      	pop	{r4, r5, r6, pc}
 8003e90:	20000270 	.word	0x20000270

08003e94 <_malloc_r>:
 8003e94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e98:	1ccd      	adds	r5, r1, #3
 8003e9a:	f025 0503 	bic.w	r5, r5, #3
 8003e9e:	3508      	adds	r5, #8
 8003ea0:	2d0c      	cmp	r5, #12
 8003ea2:	bf38      	it	cc
 8003ea4:	250c      	movcc	r5, #12
 8003ea6:	2d00      	cmp	r5, #0
 8003ea8:	4607      	mov	r7, r0
 8003eaa:	db01      	blt.n	8003eb0 <_malloc_r+0x1c>
 8003eac:	42a9      	cmp	r1, r5
 8003eae:	d905      	bls.n	8003ebc <_malloc_r+0x28>
 8003eb0:	230c      	movs	r3, #12
 8003eb2:	603b      	str	r3, [r7, #0]
 8003eb4:	2600      	movs	r6, #0
 8003eb6:	4630      	mov	r0, r6
 8003eb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ebc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003f90 <_malloc_r+0xfc>
 8003ec0:	f000 f868 	bl	8003f94 <__malloc_lock>
 8003ec4:	f8d8 3000 	ldr.w	r3, [r8]
 8003ec8:	461c      	mov	r4, r3
 8003eca:	bb5c      	cbnz	r4, 8003f24 <_malloc_r+0x90>
 8003ecc:	4629      	mov	r1, r5
 8003ece:	4638      	mov	r0, r7
 8003ed0:	f7ff ffc0 	bl	8003e54 <sbrk_aligned>
 8003ed4:	1c43      	adds	r3, r0, #1
 8003ed6:	4604      	mov	r4, r0
 8003ed8:	d155      	bne.n	8003f86 <_malloc_r+0xf2>
 8003eda:	f8d8 4000 	ldr.w	r4, [r8]
 8003ede:	4626      	mov	r6, r4
 8003ee0:	2e00      	cmp	r6, #0
 8003ee2:	d145      	bne.n	8003f70 <_malloc_r+0xdc>
 8003ee4:	2c00      	cmp	r4, #0
 8003ee6:	d048      	beq.n	8003f7a <_malloc_r+0xe6>
 8003ee8:	6823      	ldr	r3, [r4, #0]
 8003eea:	4631      	mov	r1, r6
 8003eec:	4638      	mov	r0, r7
 8003eee:	eb04 0903 	add.w	r9, r4, r3
 8003ef2:	f000 f98d 	bl	8004210 <_sbrk_r>
 8003ef6:	4581      	cmp	r9, r0
 8003ef8:	d13f      	bne.n	8003f7a <_malloc_r+0xe6>
 8003efa:	6821      	ldr	r1, [r4, #0]
 8003efc:	1a6d      	subs	r5, r5, r1
 8003efe:	4629      	mov	r1, r5
 8003f00:	4638      	mov	r0, r7
 8003f02:	f7ff ffa7 	bl	8003e54 <sbrk_aligned>
 8003f06:	3001      	adds	r0, #1
 8003f08:	d037      	beq.n	8003f7a <_malloc_r+0xe6>
 8003f0a:	6823      	ldr	r3, [r4, #0]
 8003f0c:	442b      	add	r3, r5
 8003f0e:	6023      	str	r3, [r4, #0]
 8003f10:	f8d8 3000 	ldr.w	r3, [r8]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d038      	beq.n	8003f8a <_malloc_r+0xf6>
 8003f18:	685a      	ldr	r2, [r3, #4]
 8003f1a:	42a2      	cmp	r2, r4
 8003f1c:	d12b      	bne.n	8003f76 <_malloc_r+0xe2>
 8003f1e:	2200      	movs	r2, #0
 8003f20:	605a      	str	r2, [r3, #4]
 8003f22:	e00f      	b.n	8003f44 <_malloc_r+0xb0>
 8003f24:	6822      	ldr	r2, [r4, #0]
 8003f26:	1b52      	subs	r2, r2, r5
 8003f28:	d41f      	bmi.n	8003f6a <_malloc_r+0xd6>
 8003f2a:	2a0b      	cmp	r2, #11
 8003f2c:	d917      	bls.n	8003f5e <_malloc_r+0xca>
 8003f2e:	1961      	adds	r1, r4, r5
 8003f30:	42a3      	cmp	r3, r4
 8003f32:	6025      	str	r5, [r4, #0]
 8003f34:	bf18      	it	ne
 8003f36:	6059      	strne	r1, [r3, #4]
 8003f38:	6863      	ldr	r3, [r4, #4]
 8003f3a:	bf08      	it	eq
 8003f3c:	f8c8 1000 	streq.w	r1, [r8]
 8003f40:	5162      	str	r2, [r4, r5]
 8003f42:	604b      	str	r3, [r1, #4]
 8003f44:	4638      	mov	r0, r7
 8003f46:	f104 060b 	add.w	r6, r4, #11
 8003f4a:	f000 f829 	bl	8003fa0 <__malloc_unlock>
 8003f4e:	f026 0607 	bic.w	r6, r6, #7
 8003f52:	1d23      	adds	r3, r4, #4
 8003f54:	1af2      	subs	r2, r6, r3
 8003f56:	d0ae      	beq.n	8003eb6 <_malloc_r+0x22>
 8003f58:	1b9b      	subs	r3, r3, r6
 8003f5a:	50a3      	str	r3, [r4, r2]
 8003f5c:	e7ab      	b.n	8003eb6 <_malloc_r+0x22>
 8003f5e:	42a3      	cmp	r3, r4
 8003f60:	6862      	ldr	r2, [r4, #4]
 8003f62:	d1dd      	bne.n	8003f20 <_malloc_r+0x8c>
 8003f64:	f8c8 2000 	str.w	r2, [r8]
 8003f68:	e7ec      	b.n	8003f44 <_malloc_r+0xb0>
 8003f6a:	4623      	mov	r3, r4
 8003f6c:	6864      	ldr	r4, [r4, #4]
 8003f6e:	e7ac      	b.n	8003eca <_malloc_r+0x36>
 8003f70:	4634      	mov	r4, r6
 8003f72:	6876      	ldr	r6, [r6, #4]
 8003f74:	e7b4      	b.n	8003ee0 <_malloc_r+0x4c>
 8003f76:	4613      	mov	r3, r2
 8003f78:	e7cc      	b.n	8003f14 <_malloc_r+0x80>
 8003f7a:	230c      	movs	r3, #12
 8003f7c:	603b      	str	r3, [r7, #0]
 8003f7e:	4638      	mov	r0, r7
 8003f80:	f000 f80e 	bl	8003fa0 <__malloc_unlock>
 8003f84:	e797      	b.n	8003eb6 <_malloc_r+0x22>
 8003f86:	6025      	str	r5, [r4, #0]
 8003f88:	e7dc      	b.n	8003f44 <_malloc_r+0xb0>
 8003f8a:	605b      	str	r3, [r3, #4]
 8003f8c:	deff      	udf	#255	; 0xff
 8003f8e:	bf00      	nop
 8003f90:	2000026c 	.word	0x2000026c

08003f94 <__malloc_lock>:
 8003f94:	4801      	ldr	r0, [pc, #4]	; (8003f9c <__malloc_lock+0x8>)
 8003f96:	f7ff bf0f 	b.w	8003db8 <__retarget_lock_acquire_recursive>
 8003f9a:	bf00      	nop
 8003f9c:	20000268 	.word	0x20000268

08003fa0 <__malloc_unlock>:
 8003fa0:	4801      	ldr	r0, [pc, #4]	; (8003fa8 <__malloc_unlock+0x8>)
 8003fa2:	f7ff bf0a 	b.w	8003dba <__retarget_lock_release_recursive>
 8003fa6:	bf00      	nop
 8003fa8:	20000268 	.word	0x20000268

08003fac <__sflush_r>:
 8003fac:	898a      	ldrh	r2, [r1, #12]
 8003fae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fb2:	4605      	mov	r5, r0
 8003fb4:	0710      	lsls	r0, r2, #28
 8003fb6:	460c      	mov	r4, r1
 8003fb8:	d458      	bmi.n	800406c <__sflush_r+0xc0>
 8003fba:	684b      	ldr	r3, [r1, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	dc05      	bgt.n	8003fcc <__sflush_r+0x20>
 8003fc0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	dc02      	bgt.n	8003fcc <__sflush_r+0x20>
 8003fc6:	2000      	movs	r0, #0
 8003fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fcc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003fce:	2e00      	cmp	r6, #0
 8003fd0:	d0f9      	beq.n	8003fc6 <__sflush_r+0x1a>
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003fd8:	682f      	ldr	r7, [r5, #0]
 8003fda:	6a21      	ldr	r1, [r4, #32]
 8003fdc:	602b      	str	r3, [r5, #0]
 8003fde:	d032      	beq.n	8004046 <__sflush_r+0x9a>
 8003fe0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003fe2:	89a3      	ldrh	r3, [r4, #12]
 8003fe4:	075a      	lsls	r2, r3, #29
 8003fe6:	d505      	bpl.n	8003ff4 <__sflush_r+0x48>
 8003fe8:	6863      	ldr	r3, [r4, #4]
 8003fea:	1ac0      	subs	r0, r0, r3
 8003fec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003fee:	b10b      	cbz	r3, 8003ff4 <__sflush_r+0x48>
 8003ff0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ff2:	1ac0      	subs	r0, r0, r3
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003ffa:	6a21      	ldr	r1, [r4, #32]
 8003ffc:	4628      	mov	r0, r5
 8003ffe:	47b0      	blx	r6
 8004000:	1c43      	adds	r3, r0, #1
 8004002:	89a3      	ldrh	r3, [r4, #12]
 8004004:	d106      	bne.n	8004014 <__sflush_r+0x68>
 8004006:	6829      	ldr	r1, [r5, #0]
 8004008:	291d      	cmp	r1, #29
 800400a:	d82b      	bhi.n	8004064 <__sflush_r+0xb8>
 800400c:	4a29      	ldr	r2, [pc, #164]	; (80040b4 <__sflush_r+0x108>)
 800400e:	410a      	asrs	r2, r1
 8004010:	07d6      	lsls	r6, r2, #31
 8004012:	d427      	bmi.n	8004064 <__sflush_r+0xb8>
 8004014:	2200      	movs	r2, #0
 8004016:	6062      	str	r2, [r4, #4]
 8004018:	04d9      	lsls	r1, r3, #19
 800401a:	6922      	ldr	r2, [r4, #16]
 800401c:	6022      	str	r2, [r4, #0]
 800401e:	d504      	bpl.n	800402a <__sflush_r+0x7e>
 8004020:	1c42      	adds	r2, r0, #1
 8004022:	d101      	bne.n	8004028 <__sflush_r+0x7c>
 8004024:	682b      	ldr	r3, [r5, #0]
 8004026:	b903      	cbnz	r3, 800402a <__sflush_r+0x7e>
 8004028:	6560      	str	r0, [r4, #84]	; 0x54
 800402a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800402c:	602f      	str	r7, [r5, #0]
 800402e:	2900      	cmp	r1, #0
 8004030:	d0c9      	beq.n	8003fc6 <__sflush_r+0x1a>
 8004032:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004036:	4299      	cmp	r1, r3
 8004038:	d002      	beq.n	8004040 <__sflush_r+0x94>
 800403a:	4628      	mov	r0, r5
 800403c:	f7ff febe 	bl	8003dbc <_free_r>
 8004040:	2000      	movs	r0, #0
 8004042:	6360      	str	r0, [r4, #52]	; 0x34
 8004044:	e7c0      	b.n	8003fc8 <__sflush_r+0x1c>
 8004046:	2301      	movs	r3, #1
 8004048:	4628      	mov	r0, r5
 800404a:	47b0      	blx	r6
 800404c:	1c41      	adds	r1, r0, #1
 800404e:	d1c8      	bne.n	8003fe2 <__sflush_r+0x36>
 8004050:	682b      	ldr	r3, [r5, #0]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d0c5      	beq.n	8003fe2 <__sflush_r+0x36>
 8004056:	2b1d      	cmp	r3, #29
 8004058:	d001      	beq.n	800405e <__sflush_r+0xb2>
 800405a:	2b16      	cmp	r3, #22
 800405c:	d101      	bne.n	8004062 <__sflush_r+0xb6>
 800405e:	602f      	str	r7, [r5, #0]
 8004060:	e7b1      	b.n	8003fc6 <__sflush_r+0x1a>
 8004062:	89a3      	ldrh	r3, [r4, #12]
 8004064:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004068:	81a3      	strh	r3, [r4, #12]
 800406a:	e7ad      	b.n	8003fc8 <__sflush_r+0x1c>
 800406c:	690f      	ldr	r7, [r1, #16]
 800406e:	2f00      	cmp	r7, #0
 8004070:	d0a9      	beq.n	8003fc6 <__sflush_r+0x1a>
 8004072:	0793      	lsls	r3, r2, #30
 8004074:	680e      	ldr	r6, [r1, #0]
 8004076:	bf08      	it	eq
 8004078:	694b      	ldreq	r3, [r1, #20]
 800407a:	600f      	str	r7, [r1, #0]
 800407c:	bf18      	it	ne
 800407e:	2300      	movne	r3, #0
 8004080:	eba6 0807 	sub.w	r8, r6, r7
 8004084:	608b      	str	r3, [r1, #8]
 8004086:	f1b8 0f00 	cmp.w	r8, #0
 800408a:	dd9c      	ble.n	8003fc6 <__sflush_r+0x1a>
 800408c:	6a21      	ldr	r1, [r4, #32]
 800408e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004090:	4643      	mov	r3, r8
 8004092:	463a      	mov	r2, r7
 8004094:	4628      	mov	r0, r5
 8004096:	47b0      	blx	r6
 8004098:	2800      	cmp	r0, #0
 800409a:	dc06      	bgt.n	80040aa <__sflush_r+0xfe>
 800409c:	89a3      	ldrh	r3, [r4, #12]
 800409e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040a2:	81a3      	strh	r3, [r4, #12]
 80040a4:	f04f 30ff 	mov.w	r0, #4294967295
 80040a8:	e78e      	b.n	8003fc8 <__sflush_r+0x1c>
 80040aa:	4407      	add	r7, r0
 80040ac:	eba8 0800 	sub.w	r8, r8, r0
 80040b0:	e7e9      	b.n	8004086 <__sflush_r+0xda>
 80040b2:	bf00      	nop
 80040b4:	dfbffffe 	.word	0xdfbffffe

080040b8 <_fflush_r>:
 80040b8:	b538      	push	{r3, r4, r5, lr}
 80040ba:	690b      	ldr	r3, [r1, #16]
 80040bc:	4605      	mov	r5, r0
 80040be:	460c      	mov	r4, r1
 80040c0:	b913      	cbnz	r3, 80040c8 <_fflush_r+0x10>
 80040c2:	2500      	movs	r5, #0
 80040c4:	4628      	mov	r0, r5
 80040c6:	bd38      	pop	{r3, r4, r5, pc}
 80040c8:	b118      	cbz	r0, 80040d2 <_fflush_r+0x1a>
 80040ca:	6a03      	ldr	r3, [r0, #32]
 80040cc:	b90b      	cbnz	r3, 80040d2 <_fflush_r+0x1a>
 80040ce:	f7ff fc91 	bl	80039f4 <__sinit>
 80040d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d0f3      	beq.n	80040c2 <_fflush_r+0xa>
 80040da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80040dc:	07d0      	lsls	r0, r2, #31
 80040de:	d404      	bmi.n	80040ea <_fflush_r+0x32>
 80040e0:	0599      	lsls	r1, r3, #22
 80040e2:	d402      	bmi.n	80040ea <_fflush_r+0x32>
 80040e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040e6:	f7ff fe67 	bl	8003db8 <__retarget_lock_acquire_recursive>
 80040ea:	4628      	mov	r0, r5
 80040ec:	4621      	mov	r1, r4
 80040ee:	f7ff ff5d 	bl	8003fac <__sflush_r>
 80040f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80040f4:	07da      	lsls	r2, r3, #31
 80040f6:	4605      	mov	r5, r0
 80040f8:	d4e4      	bmi.n	80040c4 <_fflush_r+0xc>
 80040fa:	89a3      	ldrh	r3, [r4, #12]
 80040fc:	059b      	lsls	r3, r3, #22
 80040fe:	d4e1      	bmi.n	80040c4 <_fflush_r+0xc>
 8004100:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004102:	f7ff fe5a 	bl	8003dba <__retarget_lock_release_recursive>
 8004106:	e7dd      	b.n	80040c4 <_fflush_r+0xc>

08004108 <__swhatbuf_r>:
 8004108:	b570      	push	{r4, r5, r6, lr}
 800410a:	460c      	mov	r4, r1
 800410c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004110:	2900      	cmp	r1, #0
 8004112:	b096      	sub	sp, #88	; 0x58
 8004114:	4615      	mov	r5, r2
 8004116:	461e      	mov	r6, r3
 8004118:	da0d      	bge.n	8004136 <__swhatbuf_r+0x2e>
 800411a:	89a3      	ldrh	r3, [r4, #12]
 800411c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004120:	f04f 0100 	mov.w	r1, #0
 8004124:	bf0c      	ite	eq
 8004126:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800412a:	2340      	movne	r3, #64	; 0x40
 800412c:	2000      	movs	r0, #0
 800412e:	6031      	str	r1, [r6, #0]
 8004130:	602b      	str	r3, [r5, #0]
 8004132:	b016      	add	sp, #88	; 0x58
 8004134:	bd70      	pop	{r4, r5, r6, pc}
 8004136:	466a      	mov	r2, sp
 8004138:	f000 f848 	bl	80041cc <_fstat_r>
 800413c:	2800      	cmp	r0, #0
 800413e:	dbec      	blt.n	800411a <__swhatbuf_r+0x12>
 8004140:	9901      	ldr	r1, [sp, #4]
 8004142:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004146:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800414a:	4259      	negs	r1, r3
 800414c:	4159      	adcs	r1, r3
 800414e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004152:	e7eb      	b.n	800412c <__swhatbuf_r+0x24>

08004154 <__smakebuf_r>:
 8004154:	898b      	ldrh	r3, [r1, #12]
 8004156:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004158:	079d      	lsls	r5, r3, #30
 800415a:	4606      	mov	r6, r0
 800415c:	460c      	mov	r4, r1
 800415e:	d507      	bpl.n	8004170 <__smakebuf_r+0x1c>
 8004160:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004164:	6023      	str	r3, [r4, #0]
 8004166:	6123      	str	r3, [r4, #16]
 8004168:	2301      	movs	r3, #1
 800416a:	6163      	str	r3, [r4, #20]
 800416c:	b002      	add	sp, #8
 800416e:	bd70      	pop	{r4, r5, r6, pc}
 8004170:	ab01      	add	r3, sp, #4
 8004172:	466a      	mov	r2, sp
 8004174:	f7ff ffc8 	bl	8004108 <__swhatbuf_r>
 8004178:	9900      	ldr	r1, [sp, #0]
 800417a:	4605      	mov	r5, r0
 800417c:	4630      	mov	r0, r6
 800417e:	f7ff fe89 	bl	8003e94 <_malloc_r>
 8004182:	b948      	cbnz	r0, 8004198 <__smakebuf_r+0x44>
 8004184:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004188:	059a      	lsls	r2, r3, #22
 800418a:	d4ef      	bmi.n	800416c <__smakebuf_r+0x18>
 800418c:	f023 0303 	bic.w	r3, r3, #3
 8004190:	f043 0302 	orr.w	r3, r3, #2
 8004194:	81a3      	strh	r3, [r4, #12]
 8004196:	e7e3      	b.n	8004160 <__smakebuf_r+0xc>
 8004198:	89a3      	ldrh	r3, [r4, #12]
 800419a:	6020      	str	r0, [r4, #0]
 800419c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041a0:	81a3      	strh	r3, [r4, #12]
 80041a2:	9b00      	ldr	r3, [sp, #0]
 80041a4:	6163      	str	r3, [r4, #20]
 80041a6:	9b01      	ldr	r3, [sp, #4]
 80041a8:	6120      	str	r0, [r4, #16]
 80041aa:	b15b      	cbz	r3, 80041c4 <__smakebuf_r+0x70>
 80041ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80041b0:	4630      	mov	r0, r6
 80041b2:	f000 f81d 	bl	80041f0 <_isatty_r>
 80041b6:	b128      	cbz	r0, 80041c4 <__smakebuf_r+0x70>
 80041b8:	89a3      	ldrh	r3, [r4, #12]
 80041ba:	f023 0303 	bic.w	r3, r3, #3
 80041be:	f043 0301 	orr.w	r3, r3, #1
 80041c2:	81a3      	strh	r3, [r4, #12]
 80041c4:	89a3      	ldrh	r3, [r4, #12]
 80041c6:	431d      	orrs	r5, r3
 80041c8:	81a5      	strh	r5, [r4, #12]
 80041ca:	e7cf      	b.n	800416c <__smakebuf_r+0x18>

080041cc <_fstat_r>:
 80041cc:	b538      	push	{r3, r4, r5, lr}
 80041ce:	4d07      	ldr	r5, [pc, #28]	; (80041ec <_fstat_r+0x20>)
 80041d0:	2300      	movs	r3, #0
 80041d2:	4604      	mov	r4, r0
 80041d4:	4608      	mov	r0, r1
 80041d6:	4611      	mov	r1, r2
 80041d8:	602b      	str	r3, [r5, #0]
 80041da:	f7fc fe68 	bl	8000eae <_fstat>
 80041de:	1c43      	adds	r3, r0, #1
 80041e0:	d102      	bne.n	80041e8 <_fstat_r+0x1c>
 80041e2:	682b      	ldr	r3, [r5, #0]
 80041e4:	b103      	cbz	r3, 80041e8 <_fstat_r+0x1c>
 80041e6:	6023      	str	r3, [r4, #0]
 80041e8:	bd38      	pop	{r3, r4, r5, pc}
 80041ea:	bf00      	nop
 80041ec:	20000264 	.word	0x20000264

080041f0 <_isatty_r>:
 80041f0:	b538      	push	{r3, r4, r5, lr}
 80041f2:	4d06      	ldr	r5, [pc, #24]	; (800420c <_isatty_r+0x1c>)
 80041f4:	2300      	movs	r3, #0
 80041f6:	4604      	mov	r4, r0
 80041f8:	4608      	mov	r0, r1
 80041fa:	602b      	str	r3, [r5, #0]
 80041fc:	f7fc fe67 	bl	8000ece <_isatty>
 8004200:	1c43      	adds	r3, r0, #1
 8004202:	d102      	bne.n	800420a <_isatty_r+0x1a>
 8004204:	682b      	ldr	r3, [r5, #0]
 8004206:	b103      	cbz	r3, 800420a <_isatty_r+0x1a>
 8004208:	6023      	str	r3, [r4, #0]
 800420a:	bd38      	pop	{r3, r4, r5, pc}
 800420c:	20000264 	.word	0x20000264

08004210 <_sbrk_r>:
 8004210:	b538      	push	{r3, r4, r5, lr}
 8004212:	4d06      	ldr	r5, [pc, #24]	; (800422c <_sbrk_r+0x1c>)
 8004214:	2300      	movs	r3, #0
 8004216:	4604      	mov	r4, r0
 8004218:	4608      	mov	r0, r1
 800421a:	602b      	str	r3, [r5, #0]
 800421c:	f7fc fe70 	bl	8000f00 <_sbrk>
 8004220:	1c43      	adds	r3, r0, #1
 8004222:	d102      	bne.n	800422a <_sbrk_r+0x1a>
 8004224:	682b      	ldr	r3, [r5, #0]
 8004226:	b103      	cbz	r3, 800422a <_sbrk_r+0x1a>
 8004228:	6023      	str	r3, [r4, #0]
 800422a:	bd38      	pop	{r3, r4, r5, pc}
 800422c:	20000264 	.word	0x20000264

08004230 <_init>:
 8004230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004232:	bf00      	nop
 8004234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004236:	bc08      	pop	{r3}
 8004238:	469e      	mov	lr, r3
 800423a:	4770      	bx	lr

0800423c <_fini>:
 800423c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800423e:	bf00      	nop
 8004240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004242:	bc08      	pop	{r3}
 8004244:	469e      	mov	lr, r3
 8004246:	4770      	bx	lr
