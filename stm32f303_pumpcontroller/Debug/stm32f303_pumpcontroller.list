
stm32f303_pumpcontroller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044a0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08004630  08004630  00014630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046b8  080046b8  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080046b8  080046b8  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080046b8  080046b8  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046b8  080046b8  000146b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046bc  080046bc  000146bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080046c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          000001f8  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000254  20000254  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000a7a0  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001b5a  00000000  00000000  0002a86f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000790  00000000  00000000  0002c3d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000005c4  00000000  00000000  0002cb60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001cfa1  00000000  00000000  0002d124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000b448  00000000  00000000  0004a0c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ace52  00000000  00000000  0005550d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002288  00000000  00000000  00102360  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  001045e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004618 	.word	0x08004618

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08004618 	.word	0x08004618

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// UART Receive Interrupt Callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a14      	ldr	r2, [pc, #80]	; (8000300 <HAL_UART_RxCpltCallback+0x60>)
 80002ae:	4293      	cmp	r3, r2
 80002b0:	d122      	bne.n	80002f8 <HAL_UART_RxCpltCallback+0x58>
    {
    	rxBuffer[2] = '\0'; // null-termination
 80002b2:	4b14      	ldr	r3, [pc, #80]	; (8000304 <HAL_UART_RxCpltCallback+0x64>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	709a      	strb	r2, [r3, #2]

        if (strcmp((char *)rxBuffer, "11") == 0)
 80002b8:	4913      	ldr	r1, [pc, #76]	; (8000308 <HAL_UART_RxCpltCallback+0x68>)
 80002ba:	4812      	ldr	r0, [pc, #72]	; (8000304 <HAL_UART_RxCpltCallback+0x64>)
 80002bc:	f7ff ff88 	bl	80001d0 <strcmp>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d106      	bne.n	80002d4 <HAL_UART_RxCpltCallback+0x34>
        {
            HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 80002c6:	2201      	movs	r2, #1
 80002c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002cc:	480f      	ldr	r0, [pc, #60]	; (800030c <HAL_UART_RxCpltCallback+0x6c>)
 80002ce:	f000 fe21 	bl	8000f14 <HAL_GPIO_WritePin>
 80002d2:	e00c      	b.n	80002ee <HAL_UART_RxCpltCallback+0x4e>
        }
        else if (strcmp ((char *)rxBuffer, "00") == 0)
 80002d4:	490e      	ldr	r1, [pc, #56]	; (8000310 <HAL_UART_RxCpltCallback+0x70>)
 80002d6:	480b      	ldr	r0, [pc, #44]	; (8000304 <HAL_UART_RxCpltCallback+0x64>)
 80002d8:	f7ff ff7a 	bl	80001d0 <strcmp>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d105      	bne.n	80002ee <HAL_UART_RxCpltCallback+0x4e>
        {
            HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 80002e2:	2200      	movs	r2, #0
 80002e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002e8:	4808      	ldr	r0, [pc, #32]	; (800030c <HAL_UART_RxCpltCallback+0x6c>)
 80002ea:	f000 fe13 	bl	8000f14 <HAL_GPIO_WritePin>
        }
        HAL_UART_Receive_IT(&huart2, rxBuffer, 2);
 80002ee:	2202      	movs	r2, #2
 80002f0:	4904      	ldr	r1, [pc, #16]	; (8000304 <HAL_UART_RxCpltCallback+0x64>)
 80002f2:	4808      	ldr	r0, [pc, #32]	; (8000314 <HAL_UART_RxCpltCallback+0x74>)
 80002f4:	f002 fb0c 	bl	8002910 <HAL_UART_Receive_IT>
    }
}
 80002f8:	bf00      	nop
 80002fa:	3708      	adds	r7, #8
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	40004400 	.word	0x40004400
 8000304:	20000100 	.word	0x20000100
 8000308:	08004630 	.word	0x08004630
 800030c:	48001000 	.word	0x48001000
 8000310:	08004634 	.word	0x08004634
 8000314:	20000078 	.word	0x20000078

08000318 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b086      	sub	sp, #24
 800031c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800031e:	f000 fa4f 	bl	80007c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000322:	f000 f843 	bl	80003ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000326:	f000 f8cb 	bl	80004c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800032a:	f000 f899 	bl	8000460 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 800032e:	2200      	movs	r2, #0
 8000330:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000334:	4817      	ldr	r0, [pc, #92]	; (8000394 <main+0x7c>)
 8000336:	f000 fded 	bl	8000f14 <HAL_GPIO_WritePin>
  HAL_UART_Receive_IT(&huart2, rxBuffer, 2);
 800033a:	2202      	movs	r2, #2
 800033c:	4916      	ldr	r1, [pc, #88]	; (8000398 <main+0x80>)
 800033e:	4817      	ldr	r0, [pc, #92]	; (800039c <main+0x84>)
 8000340:	f002 fae6 	bl	8002910 <HAL_UART_Receive_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //Read PC0 to check status motor changed
	  uint8_t currentstate = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 8000344:	2101      	movs	r1, #1
 8000346:	4816      	ldr	r0, [pc, #88]	; (80003a0 <main+0x88>)
 8000348:	f000 fdcc 	bl	8000ee4 <HAL_GPIO_ReadPin>
 800034c:	4603      	mov	r3, r0
 800034e:	75fb      	strb	r3, [r7, #23]

	  if (currentstate != motorState)
 8000350:	4b14      	ldr	r3, [pc, #80]	; (80003a4 <main+0x8c>)
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	b2db      	uxtb	r3, r3
 8000356:	7dfa      	ldrb	r2, [r7, #23]
 8000358:	429a      	cmp	r2, r3
 800035a:	d017      	beq.n	800038c <main+0x74>
	  {
		  motorState = currentstate;
 800035c:	4a11      	ldr	r2, [pc, #68]	; (80003a4 <main+0x8c>)
 800035e:	7dfb      	ldrb	r3, [r7, #23]
 8000360:	7013      	strb	r3, [r2, #0]
		  char msg[20];
		  sprintf(msg, "motor state: %d\r\n", motorState);
 8000362:	4b10      	ldr	r3, [pc, #64]	; (80003a4 <main+0x8c>)
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	b2db      	uxtb	r3, r3
 8000368:	461a      	mov	r2, r3
 800036a:	463b      	mov	r3, r7
 800036c:	490e      	ldr	r1, [pc, #56]	; (80003a8 <main+0x90>)
 800036e:	4618      	mov	r0, r3
 8000370:	f003 fcae 	bl	8003cd0 <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000374:	463b      	mov	r3, r7
 8000376:	4618      	mov	r0, r3
 8000378:	f7ff ff34 	bl	80001e4 <strlen>
 800037c:	4603      	mov	r3, r0
 800037e:	b29a      	uxth	r2, r3
 8000380:	4639      	mov	r1, r7
 8000382:	f04f 33ff 	mov.w	r3, #4294967295
 8000386:	4805      	ldr	r0, [pc, #20]	; (800039c <main+0x84>)
 8000388:	f002 fa38 	bl	80027fc <HAL_UART_Transmit>
	  }
	  HAL_Delay(10);
 800038c:	200a      	movs	r0, #10
 800038e:	f000 fa7d 	bl	800088c <HAL_Delay>
  {
 8000392:	e7d7      	b.n	8000344 <main+0x2c>
 8000394:	48001000 	.word	0x48001000
 8000398:	20000100 	.word	0x20000100
 800039c:	20000078 	.word	0x20000078
 80003a0:	48000800 	.word	0x48000800
 80003a4:	20000103 	.word	0x20000103
 80003a8:	08004638 	.word	0x08004638

080003ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b09e      	sub	sp, #120	; 0x78
 80003b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003b2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80003b6:	2228      	movs	r2, #40	; 0x28
 80003b8:	2100      	movs	r1, #0
 80003ba:	4618      	mov	r0, r3
 80003bc:	f003 fca8 	bl	8003d10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003c0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80003c4:	2200      	movs	r2, #0
 80003c6:	601a      	str	r2, [r3, #0]
 80003c8:	605a      	str	r2, [r3, #4]
 80003ca:	609a      	str	r2, [r3, #8]
 80003cc:	60da      	str	r2, [r3, #12]
 80003ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003d0:	463b      	mov	r3, r7
 80003d2:	223c      	movs	r2, #60	; 0x3c
 80003d4:	2100      	movs	r1, #0
 80003d6:	4618      	mov	r0, r3
 80003d8:	f003 fc9a 	bl	8003d10 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003dc:	2301      	movs	r3, #1
 80003de:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003e4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003e6:	2300      	movs	r3, #0
 80003e8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ea:	2301      	movs	r3, #1
 80003ec:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003ee:	2302      	movs	r3, #2
 80003f0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003f6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003f8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003fc:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003fe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000402:	4618      	mov	r0, r3
 8000404:	f000 fd9e 	bl	8000f44 <HAL_RCC_OscConfig>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800040e:	f000 f8bd 	bl	800058c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000412:	230f      	movs	r3, #15
 8000414:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000416:	2302      	movs	r3, #2
 8000418:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800041a:	2300      	movs	r3, #0
 800041c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800041e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000422:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000424:	2300      	movs	r3, #0
 8000426:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000428:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800042c:	2102      	movs	r1, #2
 800042e:	4618      	mov	r0, r3
 8000430:	f001 fdc6 	bl	8001fc0 <HAL_RCC_ClockConfig>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800043a:	f000 f8a7 	bl	800058c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800043e:	2302      	movs	r3, #2
 8000440:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000442:	2300      	movs	r3, #0
 8000444:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000446:	463b      	mov	r3, r7
 8000448:	4618      	mov	r0, r3
 800044a:	f001 ffd9 	bl	8002400 <HAL_RCCEx_PeriphCLKConfig>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d001      	beq.n	8000458 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000454:	f000 f89a 	bl	800058c <Error_Handler>
  }
}
 8000458:	bf00      	nop
 800045a:	3778      	adds	r7, #120	; 0x78
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}

08000460 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000464:	4b14      	ldr	r3, [pc, #80]	; (80004b8 <MX_USART2_UART_Init+0x58>)
 8000466:	4a15      	ldr	r2, [pc, #84]	; (80004bc <MX_USART2_UART_Init+0x5c>)
 8000468:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800046a:	4b13      	ldr	r3, [pc, #76]	; (80004b8 <MX_USART2_UART_Init+0x58>)
 800046c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000470:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000472:	4b11      	ldr	r3, [pc, #68]	; (80004b8 <MX_USART2_UART_Init+0x58>)
 8000474:	2200      	movs	r2, #0
 8000476:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000478:	4b0f      	ldr	r3, [pc, #60]	; (80004b8 <MX_USART2_UART_Init+0x58>)
 800047a:	2200      	movs	r2, #0
 800047c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800047e:	4b0e      	ldr	r3, [pc, #56]	; (80004b8 <MX_USART2_UART_Init+0x58>)
 8000480:	2200      	movs	r2, #0
 8000482:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000484:	4b0c      	ldr	r3, [pc, #48]	; (80004b8 <MX_USART2_UART_Init+0x58>)
 8000486:	220c      	movs	r2, #12
 8000488:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800048a:	4b0b      	ldr	r3, [pc, #44]	; (80004b8 <MX_USART2_UART_Init+0x58>)
 800048c:	2200      	movs	r2, #0
 800048e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000490:	4b09      	ldr	r3, [pc, #36]	; (80004b8 <MX_USART2_UART_Init+0x58>)
 8000492:	2200      	movs	r2, #0
 8000494:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000496:	4b08      	ldr	r3, [pc, #32]	; (80004b8 <MX_USART2_UART_Init+0x58>)
 8000498:	2200      	movs	r2, #0
 800049a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800049c:	4b06      	ldr	r3, [pc, #24]	; (80004b8 <MX_USART2_UART_Init+0x58>)
 800049e:	2200      	movs	r2, #0
 80004a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004a2:	4805      	ldr	r0, [pc, #20]	; (80004b8 <MX_USART2_UART_Init+0x58>)
 80004a4:	f002 f95c 	bl	8002760 <HAL_UART_Init>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80004ae:	f000 f86d 	bl	800058c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004b2:	bf00      	nop
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	20000078 	.word	0x20000078
 80004bc:	40004400 	.word	0x40004400

080004c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b08a      	sub	sp, #40	; 0x28
 80004c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c6:	f107 0314 	add.w	r3, r7, #20
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	605a      	str	r2, [r3, #4]
 80004d0:	609a      	str	r2, [r3, #8]
 80004d2:	60da      	str	r2, [r3, #12]
 80004d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004d6:	4b2a      	ldr	r3, [pc, #168]	; (8000580 <MX_GPIO_Init+0xc0>)
 80004d8:	695b      	ldr	r3, [r3, #20]
 80004da:	4a29      	ldr	r2, [pc, #164]	; (8000580 <MX_GPIO_Init+0xc0>)
 80004dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004e0:	6153      	str	r3, [r2, #20]
 80004e2:	4b27      	ldr	r3, [pc, #156]	; (8000580 <MX_GPIO_Init+0xc0>)
 80004e4:	695b      	ldr	r3, [r3, #20]
 80004e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004ea:	613b      	str	r3, [r7, #16]
 80004ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ee:	4b24      	ldr	r3, [pc, #144]	; (8000580 <MX_GPIO_Init+0xc0>)
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	4a23      	ldr	r2, [pc, #140]	; (8000580 <MX_GPIO_Init+0xc0>)
 80004f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80004f8:	6153      	str	r3, [r2, #20]
 80004fa:	4b21      	ldr	r3, [pc, #132]	; (8000580 <MX_GPIO_Init+0xc0>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000502:	60fb      	str	r3, [r7, #12]
 8000504:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000506:	4b1e      	ldr	r3, [pc, #120]	; (8000580 <MX_GPIO_Init+0xc0>)
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	4a1d      	ldr	r2, [pc, #116]	; (8000580 <MX_GPIO_Init+0xc0>)
 800050c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000510:	6153      	str	r3, [r2, #20]
 8000512:	4b1b      	ldr	r3, [pc, #108]	; (8000580 <MX_GPIO_Init+0xc0>)
 8000514:	695b      	ldr	r3, [r3, #20]
 8000516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800051a:	60bb      	str	r3, [r7, #8]
 800051c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800051e:	4b18      	ldr	r3, [pc, #96]	; (8000580 <MX_GPIO_Init+0xc0>)
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	4a17      	ldr	r2, [pc, #92]	; (8000580 <MX_GPIO_Init+0xc0>)
 8000524:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000528:	6153      	str	r3, [r2, #20]
 800052a:	4b15      	ldr	r3, [pc, #84]	; (8000580 <MX_GPIO_Init+0xc0>)
 800052c:	695b      	ldr	r3, [r3, #20]
 800052e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8000536:	2200      	movs	r2, #0
 8000538:	f44f 7100 	mov.w	r1, #512	; 0x200
 800053c:	4811      	ldr	r0, [pc, #68]	; (8000584 <MX_GPIO_Init+0xc4>)
 800053e:	f000 fce9 	bl	8000f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000542:	2303      	movs	r3, #3
 8000544:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000546:	2300      	movs	r3, #0
 8000548:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054a:	2300      	movs	r3, #0
 800054c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800054e:	f107 0314 	add.w	r3, r7, #20
 8000552:	4619      	mov	r1, r3
 8000554:	480c      	ldr	r0, [pc, #48]	; (8000588 <MX_GPIO_Init+0xc8>)
 8000556:	f000 fb4b 	bl	8000bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800055a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800055e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000560:	2301      	movs	r3, #1
 8000562:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000564:	2300      	movs	r3, #0
 8000566:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000568:	2300      	movs	r3, #0
 800056a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800056c:	f107 0314 	add.w	r3, r7, #20
 8000570:	4619      	mov	r1, r3
 8000572:	4804      	ldr	r0, [pc, #16]	; (8000584 <MX_GPIO_Init+0xc4>)
 8000574:	f000 fb3c 	bl	8000bf0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000578:	bf00      	nop
 800057a:	3728      	adds	r7, #40	; 0x28
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	40021000 	.word	0x40021000
 8000584:	48001000 	.word	0x48001000
 8000588:	48000800 	.word	0x48000800

0800058c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000590:	b672      	cpsid	i
}
 8000592:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000594:	e7fe      	b.n	8000594 <Error_Handler+0x8>
	...

08000598 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800059e:	4b0f      	ldr	r3, [pc, #60]	; (80005dc <HAL_MspInit+0x44>)
 80005a0:	699b      	ldr	r3, [r3, #24]
 80005a2:	4a0e      	ldr	r2, [pc, #56]	; (80005dc <HAL_MspInit+0x44>)
 80005a4:	f043 0301 	orr.w	r3, r3, #1
 80005a8:	6193      	str	r3, [r2, #24]
 80005aa:	4b0c      	ldr	r3, [pc, #48]	; (80005dc <HAL_MspInit+0x44>)
 80005ac:	699b      	ldr	r3, [r3, #24]
 80005ae:	f003 0301 	and.w	r3, r3, #1
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b6:	4b09      	ldr	r3, [pc, #36]	; (80005dc <HAL_MspInit+0x44>)
 80005b8:	69db      	ldr	r3, [r3, #28]
 80005ba:	4a08      	ldr	r2, [pc, #32]	; (80005dc <HAL_MspInit+0x44>)
 80005bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c0:	61d3      	str	r3, [r2, #28]
 80005c2:	4b06      	ldr	r3, [pc, #24]	; (80005dc <HAL_MspInit+0x44>)
 80005c4:	69db      	ldr	r3, [r3, #28]
 80005c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ca:	603b      	str	r3, [r7, #0]
 80005cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ce:	bf00      	nop
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	40021000 	.word	0x40021000

080005e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08a      	sub	sp, #40	; 0x28
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e8:	f107 0314 	add.w	r3, r7, #20
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a1b      	ldr	r2, [pc, #108]	; (800066c <HAL_UART_MspInit+0x8c>)
 80005fe:	4293      	cmp	r3, r2
 8000600:	d130      	bne.n	8000664 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000602:	4b1b      	ldr	r3, [pc, #108]	; (8000670 <HAL_UART_MspInit+0x90>)
 8000604:	69db      	ldr	r3, [r3, #28]
 8000606:	4a1a      	ldr	r2, [pc, #104]	; (8000670 <HAL_UART_MspInit+0x90>)
 8000608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800060c:	61d3      	str	r3, [r2, #28]
 800060e:	4b18      	ldr	r3, [pc, #96]	; (8000670 <HAL_UART_MspInit+0x90>)
 8000610:	69db      	ldr	r3, [r3, #28]
 8000612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000616:	613b      	str	r3, [r7, #16]
 8000618:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800061a:	4b15      	ldr	r3, [pc, #84]	; (8000670 <HAL_UART_MspInit+0x90>)
 800061c:	695b      	ldr	r3, [r3, #20]
 800061e:	4a14      	ldr	r2, [pc, #80]	; (8000670 <HAL_UART_MspInit+0x90>)
 8000620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000624:	6153      	str	r3, [r2, #20]
 8000626:	4b12      	ldr	r3, [pc, #72]	; (8000670 <HAL_UART_MspInit+0x90>)
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000632:	230c      	movs	r3, #12
 8000634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000636:	2302      	movs	r3, #2
 8000638:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063a:	2300      	movs	r3, #0
 800063c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800063e:	2303      	movs	r3, #3
 8000640:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000642:	2307      	movs	r3, #7
 8000644:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000646:	f107 0314 	add.w	r3, r7, #20
 800064a:	4619      	mov	r1, r3
 800064c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000650:	f000 face 	bl	8000bf0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000654:	2200      	movs	r2, #0
 8000656:	2100      	movs	r1, #0
 8000658:	2026      	movs	r0, #38	; 0x26
 800065a:	f000 fa16 	bl	8000a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800065e:	2026      	movs	r0, #38	; 0x26
 8000660:	f000 fa2f 	bl	8000ac2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000664:	bf00      	nop
 8000666:	3728      	adds	r7, #40	; 0x28
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40004400 	.word	0x40004400
 8000670:	40021000 	.word	0x40021000

08000674 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000678:	e7fe      	b.n	8000678 <NMI_Handler+0x4>

0800067a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800067a:	b480      	push	{r7}
 800067c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800067e:	e7fe      	b.n	800067e <HardFault_Handler+0x4>

08000680 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000684:	e7fe      	b.n	8000684 <MemManage_Handler+0x4>

08000686 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000686:	b480      	push	{r7}
 8000688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800068a:	e7fe      	b.n	800068a <BusFault_Handler+0x4>

0800068c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000690:	e7fe      	b.n	8000690 <UsageFault_Handler+0x4>

08000692 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000692:	b480      	push	{r7}
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000696:	bf00      	nop
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr

080006a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006a4:	bf00      	nop
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr

080006ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ae:	b480      	push	{r7}
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006b2:	bf00      	nop
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr

080006bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006c0:	f000 f8c4 	bl	800084c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80006cc:	4802      	ldr	r0, [pc, #8]	; (80006d8 <USART2_IRQHandler+0x10>)
 80006ce:	f002 f963 	bl	8002998 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000078 	.word	0x20000078

080006dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006e4:	4a14      	ldr	r2, [pc, #80]	; (8000738 <_sbrk+0x5c>)
 80006e6:	4b15      	ldr	r3, [pc, #84]	; (800073c <_sbrk+0x60>)
 80006e8:	1ad3      	subs	r3, r2, r3
 80006ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006f0:	4b13      	ldr	r3, [pc, #76]	; (8000740 <_sbrk+0x64>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d102      	bne.n	80006fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006f8:	4b11      	ldr	r3, [pc, #68]	; (8000740 <_sbrk+0x64>)
 80006fa:	4a12      	ldr	r2, [pc, #72]	; (8000744 <_sbrk+0x68>)
 80006fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006fe:	4b10      	ldr	r3, [pc, #64]	; (8000740 <_sbrk+0x64>)
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4413      	add	r3, r2
 8000706:	693a      	ldr	r2, [r7, #16]
 8000708:	429a      	cmp	r2, r3
 800070a:	d207      	bcs.n	800071c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800070c:	f003 fb08 	bl	8003d20 <__errno>
 8000710:	4603      	mov	r3, r0
 8000712:	220c      	movs	r2, #12
 8000714:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000716:	f04f 33ff 	mov.w	r3, #4294967295
 800071a:	e009      	b.n	8000730 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800071c:	4b08      	ldr	r3, [pc, #32]	; (8000740 <_sbrk+0x64>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000722:	4b07      	ldr	r3, [pc, #28]	; (8000740 <_sbrk+0x64>)
 8000724:	681a      	ldr	r2, [r3, #0]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	4413      	add	r3, r2
 800072a:	4a05      	ldr	r2, [pc, #20]	; (8000740 <_sbrk+0x64>)
 800072c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800072e:	68fb      	ldr	r3, [r7, #12]
}
 8000730:	4618      	mov	r0, r3
 8000732:	3718      	adds	r7, #24
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	2000a000 	.word	0x2000a000
 800073c:	00000400 	.word	0x00000400
 8000740:	20000104 	.word	0x20000104
 8000744:	20000258 	.word	0x20000258

08000748 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <SystemInit+0x20>)
 800074e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000752:	4a05      	ldr	r2, [pc, #20]	; (8000768 <SystemInit+0x20>)
 8000754:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000758:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800075c:	bf00      	nop
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	e000ed00 	.word	0xe000ed00

0800076c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800076c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007a4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000770:	f7ff ffea 	bl	8000748 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000774:	480c      	ldr	r0, [pc, #48]	; (80007a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000776:	490d      	ldr	r1, [pc, #52]	; (80007ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000778:	4a0d      	ldr	r2, [pc, #52]	; (80007b0 <LoopForever+0xe>)
  movs r3, #0
 800077a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800077c:	e002      	b.n	8000784 <LoopCopyDataInit>

0800077e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800077e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000780:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000782:	3304      	adds	r3, #4

08000784 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000784:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000786:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000788:	d3f9      	bcc.n	800077e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800078a:	4a0a      	ldr	r2, [pc, #40]	; (80007b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800078c:	4c0a      	ldr	r4, [pc, #40]	; (80007b8 <LoopForever+0x16>)
  movs r3, #0
 800078e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000790:	e001      	b.n	8000796 <LoopFillZerobss>

08000792 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000792:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000794:	3204      	adds	r2, #4

08000796 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000796:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000798:	d3fb      	bcc.n	8000792 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800079a:	f003 fac7 	bl	8003d2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800079e:	f7ff fdbb 	bl	8000318 <main>

080007a2 <LoopForever>:

LoopForever:
    b LoopForever
 80007a2:	e7fe      	b.n	80007a2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007a4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80007a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007ac:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80007b0:	080046c0 	.word	0x080046c0
  ldr r2, =_sbss
 80007b4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80007b8:	20000254 	.word	0x20000254

080007bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007bc:	e7fe      	b.n	80007bc <ADC1_2_IRQHandler>
	...

080007c0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007c4:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <HAL_Init+0x28>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a07      	ldr	r2, [pc, #28]	; (80007e8 <HAL_Init+0x28>)
 80007ca:	f043 0310 	orr.w	r3, r3, #16
 80007ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007d0:	2003      	movs	r0, #3
 80007d2:	f000 f94f 	bl	8000a74 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007d6:	200f      	movs	r0, #15
 80007d8:	f000 f808 	bl	80007ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007dc:	f7ff fedc 	bl	8000598 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007e0:	2300      	movs	r3, #0
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40022000 	.word	0x40022000

080007ec <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007f4:	4b12      	ldr	r3, [pc, #72]	; (8000840 <HAL_InitTick+0x54>)
 80007f6:	681a      	ldr	r2, [r3, #0]
 80007f8:	4b12      	ldr	r3, [pc, #72]	; (8000844 <HAL_InitTick+0x58>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	4619      	mov	r1, r3
 80007fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000802:	fbb3 f3f1 	udiv	r3, r3, r1
 8000806:	fbb2 f3f3 	udiv	r3, r2, r3
 800080a:	4618      	mov	r0, r3
 800080c:	f000 f967 	bl	8000ade <HAL_SYSTICK_Config>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000816:	2301      	movs	r3, #1
 8000818:	e00e      	b.n	8000838 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	2b0f      	cmp	r3, #15
 800081e:	d80a      	bhi.n	8000836 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000820:	2200      	movs	r2, #0
 8000822:	6879      	ldr	r1, [r7, #4]
 8000824:	f04f 30ff 	mov.w	r0, #4294967295
 8000828:	f000 f92f 	bl	8000a8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800082c:	4a06      	ldr	r2, [pc, #24]	; (8000848 <HAL_InitTick+0x5c>)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000832:	2300      	movs	r3, #0
 8000834:	e000      	b.n	8000838 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000836:	2301      	movs	r3, #1
}
 8000838:	4618      	mov	r0, r3
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	20000000 	.word	0x20000000
 8000844:	20000008 	.word	0x20000008
 8000848:	20000004 	.word	0x20000004

0800084c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000850:	4b06      	ldr	r3, [pc, #24]	; (800086c <HAL_IncTick+0x20>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	461a      	mov	r2, r3
 8000856:	4b06      	ldr	r3, [pc, #24]	; (8000870 <HAL_IncTick+0x24>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4413      	add	r3, r2
 800085c:	4a04      	ldr	r2, [pc, #16]	; (8000870 <HAL_IncTick+0x24>)
 800085e:	6013      	str	r3, [r2, #0]
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	20000008 	.word	0x20000008
 8000870:	20000108 	.word	0x20000108

08000874 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  return uwTick;  
 8000878:	4b03      	ldr	r3, [pc, #12]	; (8000888 <HAL_GetTick+0x14>)
 800087a:	681b      	ldr	r3, [r3, #0]
}
 800087c:	4618      	mov	r0, r3
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	20000108 	.word	0x20000108

0800088c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000894:	f7ff ffee 	bl	8000874 <HAL_GetTick>
 8000898:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008a4:	d005      	beq.n	80008b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008a6:	4b0a      	ldr	r3, [pc, #40]	; (80008d0 <HAL_Delay+0x44>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	461a      	mov	r2, r3
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	4413      	add	r3, r2
 80008b0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80008b2:	bf00      	nop
 80008b4:	f7ff ffde 	bl	8000874 <HAL_GetTick>
 80008b8:	4602      	mov	r2, r0
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	1ad3      	subs	r3, r2, r3
 80008be:	68fa      	ldr	r2, [r7, #12]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	d8f7      	bhi.n	80008b4 <HAL_Delay+0x28>
  {
  }
}
 80008c4:	bf00      	nop
 80008c6:	bf00      	nop
 80008c8:	3710      	adds	r7, #16
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20000008 	.word	0x20000008

080008d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b085      	sub	sp, #20
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	f003 0307 	and.w	r3, r3, #7
 80008e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008e4:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <__NVIC_SetPriorityGrouping+0x44>)
 80008e6:	68db      	ldr	r3, [r3, #12]
 80008e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ea:	68ba      	ldr	r2, [r7, #8]
 80008ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008f0:	4013      	ands	r3, r2
 80008f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000904:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000906:	4a04      	ldr	r2, [pc, #16]	; (8000918 <__NVIC_SetPriorityGrouping+0x44>)
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	60d3      	str	r3, [r2, #12]
}
 800090c:	bf00      	nop
 800090e:	3714      	adds	r7, #20
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	e000ed00 	.word	0xe000ed00

0800091c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000920:	4b04      	ldr	r3, [pc, #16]	; (8000934 <__NVIC_GetPriorityGrouping+0x18>)
 8000922:	68db      	ldr	r3, [r3, #12]
 8000924:	0a1b      	lsrs	r3, r3, #8
 8000926:	f003 0307 	and.w	r3, r3, #7
}
 800092a:	4618      	mov	r0, r3
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr
 8000934:	e000ed00 	.word	0xe000ed00

08000938 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000946:	2b00      	cmp	r3, #0
 8000948:	db0b      	blt.n	8000962 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	f003 021f 	and.w	r2, r3, #31
 8000950:	4907      	ldr	r1, [pc, #28]	; (8000970 <__NVIC_EnableIRQ+0x38>)
 8000952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000956:	095b      	lsrs	r3, r3, #5
 8000958:	2001      	movs	r0, #1
 800095a:	fa00 f202 	lsl.w	r2, r0, r2
 800095e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000962:	bf00      	nop
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	e000e100 	.word	0xe000e100

08000974 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	6039      	str	r1, [r7, #0]
 800097e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000984:	2b00      	cmp	r3, #0
 8000986:	db0a      	blt.n	800099e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	b2da      	uxtb	r2, r3
 800098c:	490c      	ldr	r1, [pc, #48]	; (80009c0 <__NVIC_SetPriority+0x4c>)
 800098e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000992:	0112      	lsls	r2, r2, #4
 8000994:	b2d2      	uxtb	r2, r2
 8000996:	440b      	add	r3, r1
 8000998:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800099c:	e00a      	b.n	80009b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	b2da      	uxtb	r2, r3
 80009a2:	4908      	ldr	r1, [pc, #32]	; (80009c4 <__NVIC_SetPriority+0x50>)
 80009a4:	79fb      	ldrb	r3, [r7, #7]
 80009a6:	f003 030f 	and.w	r3, r3, #15
 80009aa:	3b04      	subs	r3, #4
 80009ac:	0112      	lsls	r2, r2, #4
 80009ae:	b2d2      	uxtb	r2, r2
 80009b0:	440b      	add	r3, r1
 80009b2:	761a      	strb	r2, [r3, #24]
}
 80009b4:	bf00      	nop
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr
 80009c0:	e000e100 	.word	0xe000e100
 80009c4:	e000ed00 	.word	0xe000ed00

080009c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b089      	sub	sp, #36	; 0x24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	60b9      	str	r1, [r7, #8]
 80009d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	f003 0307 	and.w	r3, r3, #7
 80009da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009dc:	69fb      	ldr	r3, [r7, #28]
 80009de:	f1c3 0307 	rsb	r3, r3, #7
 80009e2:	2b04      	cmp	r3, #4
 80009e4:	bf28      	it	cs
 80009e6:	2304      	movcs	r3, #4
 80009e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	3304      	adds	r3, #4
 80009ee:	2b06      	cmp	r3, #6
 80009f0:	d902      	bls.n	80009f8 <NVIC_EncodePriority+0x30>
 80009f2:	69fb      	ldr	r3, [r7, #28]
 80009f4:	3b03      	subs	r3, #3
 80009f6:	e000      	b.n	80009fa <NVIC_EncodePriority+0x32>
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009fc:	f04f 32ff 	mov.w	r2, #4294967295
 8000a00:	69bb      	ldr	r3, [r7, #24]
 8000a02:	fa02 f303 	lsl.w	r3, r2, r3
 8000a06:	43da      	mvns	r2, r3
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	401a      	ands	r2, r3
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a10:	f04f 31ff 	mov.w	r1, #4294967295
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1a:	43d9      	mvns	r1, r3
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a20:	4313      	orrs	r3, r2
         );
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3724      	adds	r7, #36	; 0x24
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
	...

08000a30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	3b01      	subs	r3, #1
 8000a3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a40:	d301      	bcc.n	8000a46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a42:	2301      	movs	r3, #1
 8000a44:	e00f      	b.n	8000a66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a46:	4a0a      	ldr	r2, [pc, #40]	; (8000a70 <SysTick_Config+0x40>)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	3b01      	subs	r3, #1
 8000a4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a4e:	210f      	movs	r1, #15
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	f7ff ff8e 	bl	8000974 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a58:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <SysTick_Config+0x40>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a5e:	4b04      	ldr	r3, [pc, #16]	; (8000a70 <SysTick_Config+0x40>)
 8000a60:	2207      	movs	r2, #7
 8000a62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a64:	2300      	movs	r3, #0
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	e000e010 	.word	0xe000e010

08000a74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a7c:	6878      	ldr	r0, [r7, #4]
 8000a7e:	f7ff ff29 	bl	80008d4 <__NVIC_SetPriorityGrouping>
}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b086      	sub	sp, #24
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	4603      	mov	r3, r0
 8000a92:	60b9      	str	r1, [r7, #8]
 8000a94:	607a      	str	r2, [r7, #4]
 8000a96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a9c:	f7ff ff3e 	bl	800091c <__NVIC_GetPriorityGrouping>
 8000aa0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aa2:	687a      	ldr	r2, [r7, #4]
 8000aa4:	68b9      	ldr	r1, [r7, #8]
 8000aa6:	6978      	ldr	r0, [r7, #20]
 8000aa8:	f7ff ff8e 	bl	80009c8 <NVIC_EncodePriority>
 8000aac:	4602      	mov	r2, r0
 8000aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ab2:	4611      	mov	r1, r2
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff ff5d 	bl	8000974 <__NVIC_SetPriority>
}
 8000aba:	bf00      	nop
 8000abc:	3718      	adds	r7, #24
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b082      	sub	sp, #8
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	4603      	mov	r3, r0
 8000aca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff ff31 	bl	8000938 <__NVIC_EnableIRQ>
}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b082      	sub	sp, #8
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f7ff ffa2 	bl	8000a30 <SysTick_Config>
 8000aec:	4603      	mov	r3, r0
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000af6:	b480      	push	{r7}
 8000af8:	b083      	sub	sp, #12
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d101      	bne.n	8000b08 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000b04:	2301      	movs	r3, #1
 8000b06:	e02e      	b.n	8000b66 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b0e:	2b02      	cmp	r3, #2
 8000b10:	d008      	beq.n	8000b24 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2204      	movs	r2, #4
 8000b16:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8000b20:	2301      	movs	r3, #1
 8000b22:	e020      	b.n	8000b66 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f022 020e 	bic.w	r2, r2, #14
 8000b32:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f022 0201 	bic.w	r2, r2, #1
 8000b42:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b4c:	2101      	movs	r1, #1
 8000b4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b52:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2201      	movs	r2, #1
 8000b58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2200      	movs	r2, #0
 8000b60:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000b64:	2300      	movs	r3, #0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr

08000b72 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b084      	sub	sp, #16
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b84:	2b02      	cmp	r3, #2
 8000b86:	d005      	beq.n	8000b94 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2204      	movs	r2, #4
 8000b8c:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	73fb      	strb	r3, [r7, #15]
 8000b92:	e027      	b.n	8000be4 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f022 020e 	bic.w	r2, r2, #14
 8000ba2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f022 0201 	bic.w	r2, r2, #1
 8000bb2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	fa01 f202 	lsl.w	r2, r1, r2
 8000bc2:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2200      	movs	r2, #0
 8000bd0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d003      	beq.n	8000be4 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	4798      	blx	r3
    }
  }
  return status;
 8000be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3710      	adds	r7, #16
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b087      	sub	sp, #28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bfe:	e154      	b.n	8000eaa <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	2101      	movs	r1, #1
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	f000 8146 	beq.w	8000ea4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f003 0303 	and.w	r3, r3, #3
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d005      	beq.n	8000c30 <HAL_GPIO_Init+0x40>
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	f003 0303 	and.w	r3, r3, #3
 8000c2c:	2b02      	cmp	r3, #2
 8000c2e:	d130      	bne.n	8000c92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	689b      	ldr	r3, [r3, #8]
 8000c34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	005b      	lsls	r3, r3, #1
 8000c3a:	2203      	movs	r2, #3
 8000c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c40:	43db      	mvns	r3, r3
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	4013      	ands	r3, r2
 8000c46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	68da      	ldr	r2, [r3, #12]
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	693a      	ldr	r2, [r7, #16]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	693a      	ldr	r2, [r7, #16]
 8000c5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c66:	2201      	movs	r2, #1
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6e:	43db      	mvns	r3, r3
 8000c70:	693a      	ldr	r2, [r7, #16]
 8000c72:	4013      	ands	r3, r2
 8000c74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	091b      	lsrs	r3, r3, #4
 8000c7c:	f003 0201 	and.w	r2, r3, #1
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	fa02 f303 	lsl.w	r3, r2, r3
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	f003 0303 	and.w	r3, r3, #3
 8000c9a:	2b03      	cmp	r3, #3
 8000c9c:	d017      	beq.n	8000cce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	68db      	ldr	r3, [r3, #12]
 8000ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	2203      	movs	r2, #3
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	693a      	ldr	r2, [r7, #16]
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	689a      	ldr	r2, [r3, #8]
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f003 0303 	and.w	r3, r3, #3
 8000cd6:	2b02      	cmp	r3, #2
 8000cd8:	d123      	bne.n	8000d22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	08da      	lsrs	r2, r3, #3
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	3208      	adds	r2, #8
 8000ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	f003 0307 	and.w	r3, r3, #7
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	220f      	movs	r2, #15
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	43db      	mvns	r3, r3
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	691a      	ldr	r2, [r3, #16]
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	f003 0307 	and.w	r3, r3, #7
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	08da      	lsrs	r2, r3, #3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3208      	adds	r2, #8
 8000d1c:	6939      	ldr	r1, [r7, #16]
 8000d1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	2203      	movs	r2, #3
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	43db      	mvns	r3, r3
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	4013      	ands	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f003 0203 	and.w	r2, r3, #3
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f000 80a0 	beq.w	8000ea4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d64:	4b58      	ldr	r3, [pc, #352]	; (8000ec8 <HAL_GPIO_Init+0x2d8>)
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	4a57      	ldr	r2, [pc, #348]	; (8000ec8 <HAL_GPIO_Init+0x2d8>)
 8000d6a:	f043 0301 	orr.w	r3, r3, #1
 8000d6e:	6193      	str	r3, [r2, #24]
 8000d70:	4b55      	ldr	r3, [pc, #340]	; (8000ec8 <HAL_GPIO_Init+0x2d8>)
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	f003 0301 	and.w	r3, r3, #1
 8000d78:	60bb      	str	r3, [r7, #8]
 8000d7a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d7c:	4a53      	ldr	r2, [pc, #332]	; (8000ecc <HAL_GPIO_Init+0x2dc>)
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	089b      	lsrs	r3, r3, #2
 8000d82:	3302      	adds	r3, #2
 8000d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	f003 0303 	and.w	r3, r3, #3
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	220f      	movs	r2, #15
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000da6:	d019      	beq.n	8000ddc <HAL_GPIO_Init+0x1ec>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	4a49      	ldr	r2, [pc, #292]	; (8000ed0 <HAL_GPIO_Init+0x2e0>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d013      	beq.n	8000dd8 <HAL_GPIO_Init+0x1e8>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4a48      	ldr	r2, [pc, #288]	; (8000ed4 <HAL_GPIO_Init+0x2e4>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d00d      	beq.n	8000dd4 <HAL_GPIO_Init+0x1e4>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	4a47      	ldr	r2, [pc, #284]	; (8000ed8 <HAL_GPIO_Init+0x2e8>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d007      	beq.n	8000dd0 <HAL_GPIO_Init+0x1e0>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4a46      	ldr	r2, [pc, #280]	; (8000edc <HAL_GPIO_Init+0x2ec>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d101      	bne.n	8000dcc <HAL_GPIO_Init+0x1dc>
 8000dc8:	2304      	movs	r3, #4
 8000dca:	e008      	b.n	8000dde <HAL_GPIO_Init+0x1ee>
 8000dcc:	2305      	movs	r3, #5
 8000dce:	e006      	b.n	8000dde <HAL_GPIO_Init+0x1ee>
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	e004      	b.n	8000dde <HAL_GPIO_Init+0x1ee>
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	e002      	b.n	8000dde <HAL_GPIO_Init+0x1ee>
 8000dd8:	2301      	movs	r3, #1
 8000dda:	e000      	b.n	8000dde <HAL_GPIO_Init+0x1ee>
 8000ddc:	2300      	movs	r3, #0
 8000dde:	697a      	ldr	r2, [r7, #20]
 8000de0:	f002 0203 	and.w	r2, r2, #3
 8000de4:	0092      	lsls	r2, r2, #2
 8000de6:	4093      	lsls	r3, r2
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000dee:	4937      	ldr	r1, [pc, #220]	; (8000ecc <HAL_GPIO_Init+0x2dc>)
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	089b      	lsrs	r3, r3, #2
 8000df4:	3302      	adds	r3, #2
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dfc:	4b38      	ldr	r3, [pc, #224]	; (8000ee0 <HAL_GPIO_Init+0x2f0>)
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	43db      	mvns	r3, r3
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d003      	beq.n	8000e20 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e20:	4a2f      	ldr	r2, [pc, #188]	; (8000ee0 <HAL_GPIO_Init+0x2f0>)
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e26:	4b2e      	ldr	r3, [pc, #184]	; (8000ee0 <HAL_GPIO_Init+0x2f0>)
 8000e28:	68db      	ldr	r3, [r3, #12]
 8000e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	43db      	mvns	r3, r3
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	4013      	ands	r3, r2
 8000e34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d003      	beq.n	8000e4a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e4a:	4a25      	ldr	r2, [pc, #148]	; (8000ee0 <HAL_GPIO_Init+0x2f0>)
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e50:	4b23      	ldr	r3, [pc, #140]	; (8000ee0 <HAL_GPIO_Init+0x2f0>)
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d003      	beq.n	8000e74 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e74:	4a1a      	ldr	r2, [pc, #104]	; (8000ee0 <HAL_GPIO_Init+0x2f0>)
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e7a:	4b19      	ldr	r3, [pc, #100]	; (8000ee0 <HAL_GPIO_Init+0x2f0>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	43db      	mvns	r3, r3
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	4013      	ands	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d003      	beq.n	8000e9e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e9e:	4a10      	ldr	r2, [pc, #64]	; (8000ee0 <HAL_GPIO_Init+0x2f0>)
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	f47f aea3 	bne.w	8000c00 <HAL_GPIO_Init+0x10>
  }
}
 8000eba:	bf00      	nop
 8000ebc:	bf00      	nop
 8000ebe:	371c      	adds	r7, #28
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	40021000 	.word	0x40021000
 8000ecc:	40010000 	.word	0x40010000
 8000ed0:	48000400 	.word	0x48000400
 8000ed4:	48000800 	.word	0x48000800
 8000ed8:	48000c00 	.word	0x48000c00
 8000edc:	48001000 	.word	0x48001000
 8000ee0:	40010400 	.word	0x40010400

08000ee4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	460b      	mov	r3, r1
 8000eee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	691a      	ldr	r2, [r3, #16]
 8000ef4:	887b      	ldrh	r3, [r7, #2]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d002      	beq.n	8000f02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000efc:	2301      	movs	r3, #1
 8000efe:	73fb      	strb	r3, [r7, #15]
 8000f00:	e001      	b.n	8000f06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f02:	2300      	movs	r3, #0
 8000f04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3714      	adds	r7, #20
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	807b      	strh	r3, [r7, #2]
 8000f20:	4613      	mov	r3, r2
 8000f22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f24:	787b      	ldrb	r3, [r7, #1]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d003      	beq.n	8000f32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f2a:	887a      	ldrh	r2, [r7, #2]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f30:	e002      	b.n	8000f38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f32:	887a      	ldrh	r2, [r7, #2]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f38:	bf00      	nop
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f50:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f54:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d102      	bne.n	8000f6a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000f64:	2301      	movs	r3, #1
 8000f66:	f001 b823 	b.w	8001fb0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	f000 817d 	beq.w	800127a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f80:	4bbc      	ldr	r3, [pc, #752]	; (8001274 <HAL_RCC_OscConfig+0x330>)
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f003 030c 	and.w	r3, r3, #12
 8000f88:	2b04      	cmp	r3, #4
 8000f8a:	d00c      	beq.n	8000fa6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f8c:	4bb9      	ldr	r3, [pc, #740]	; (8001274 <HAL_RCC_OscConfig+0x330>)
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f003 030c 	and.w	r3, r3, #12
 8000f94:	2b08      	cmp	r3, #8
 8000f96:	d15c      	bne.n	8001052 <HAL_RCC_OscConfig+0x10e>
 8000f98:	4bb6      	ldr	r3, [pc, #728]	; (8001274 <HAL_RCC_OscConfig+0x330>)
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fa4:	d155      	bne.n	8001052 <HAL_RCC_OscConfig+0x10e>
 8000fa6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000faa:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fae:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000fb2:	fa93 f3a3 	rbit	r3, r3
 8000fb6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000fba:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fbe:	fab3 f383 	clz	r3, r3
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	095b      	lsrs	r3, r3, #5
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d102      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x94>
 8000fd2:	4ba8      	ldr	r3, [pc, #672]	; (8001274 <HAL_RCC_OscConfig+0x330>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	e015      	b.n	8001004 <HAL_RCC_OscConfig+0xc0>
 8000fd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fdc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fe0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000fe4:	fa93 f3a3 	rbit	r3, r3
 8000fe8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000fec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ff0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000ff4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000ff8:	fa93 f3a3 	rbit	r3, r3
 8000ffc:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001000:	4b9c      	ldr	r3, [pc, #624]	; (8001274 <HAL_RCC_OscConfig+0x330>)
 8001002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001004:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001008:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800100c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001010:	fa92 f2a2 	rbit	r2, r2
 8001014:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001018:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800101c:	fab2 f282 	clz	r2, r2
 8001020:	b2d2      	uxtb	r2, r2
 8001022:	f042 0220 	orr.w	r2, r2, #32
 8001026:	b2d2      	uxtb	r2, r2
 8001028:	f002 021f 	and.w	r2, r2, #31
 800102c:	2101      	movs	r1, #1
 800102e:	fa01 f202 	lsl.w	r2, r1, r2
 8001032:	4013      	ands	r3, r2
 8001034:	2b00      	cmp	r3, #0
 8001036:	f000 811f 	beq.w	8001278 <HAL_RCC_OscConfig+0x334>
 800103a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800103e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	2b00      	cmp	r3, #0
 8001048:	f040 8116 	bne.w	8001278 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800104c:	2301      	movs	r3, #1
 800104e:	f000 bfaf 	b.w	8001fb0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001052:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001056:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001062:	d106      	bne.n	8001072 <HAL_RCC_OscConfig+0x12e>
 8001064:	4b83      	ldr	r3, [pc, #524]	; (8001274 <HAL_RCC_OscConfig+0x330>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a82      	ldr	r2, [pc, #520]	; (8001274 <HAL_RCC_OscConfig+0x330>)
 800106a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800106e:	6013      	str	r3, [r2, #0]
 8001070:	e036      	b.n	80010e0 <HAL_RCC_OscConfig+0x19c>
 8001072:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001076:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d10c      	bne.n	800109c <HAL_RCC_OscConfig+0x158>
 8001082:	4b7c      	ldr	r3, [pc, #496]	; (8001274 <HAL_RCC_OscConfig+0x330>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a7b      	ldr	r2, [pc, #492]	; (8001274 <HAL_RCC_OscConfig+0x330>)
 8001088:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800108c:	6013      	str	r3, [r2, #0]
 800108e:	4b79      	ldr	r3, [pc, #484]	; (8001274 <HAL_RCC_OscConfig+0x330>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a78      	ldr	r2, [pc, #480]	; (8001274 <HAL_RCC_OscConfig+0x330>)
 8001094:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001098:	6013      	str	r3, [r2, #0]
 800109a:	e021      	b.n	80010e0 <HAL_RCC_OscConfig+0x19c>
 800109c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010ac:	d10c      	bne.n	80010c8 <HAL_RCC_OscConfig+0x184>
 80010ae:	4b71      	ldr	r3, [pc, #452]	; (8001274 <HAL_RCC_OscConfig+0x330>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a70      	ldr	r2, [pc, #448]	; (8001274 <HAL_RCC_OscConfig+0x330>)
 80010b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010b8:	6013      	str	r3, [r2, #0]
 80010ba:	4b6e      	ldr	r3, [pc, #440]	; (8001274 <HAL_RCC_OscConfig+0x330>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a6d      	ldr	r2, [pc, #436]	; (8001274 <HAL_RCC_OscConfig+0x330>)
 80010c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010c4:	6013      	str	r3, [r2, #0]
 80010c6:	e00b      	b.n	80010e0 <HAL_RCC_OscConfig+0x19c>
 80010c8:	4b6a      	ldr	r3, [pc, #424]	; (8001274 <HAL_RCC_OscConfig+0x330>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a69      	ldr	r2, [pc, #420]	; (8001274 <HAL_RCC_OscConfig+0x330>)
 80010ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010d2:	6013      	str	r3, [r2, #0]
 80010d4:	4b67      	ldr	r3, [pc, #412]	; (8001274 <HAL_RCC_OscConfig+0x330>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a66      	ldr	r2, [pc, #408]	; (8001274 <HAL_RCC_OscConfig+0x330>)
 80010da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010de:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010e0:	4b64      	ldr	r3, [pc, #400]	; (8001274 <HAL_RCC_OscConfig+0x330>)
 80010e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010e4:	f023 020f 	bic.w	r2, r3, #15
 80010e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	495f      	ldr	r1, [pc, #380]	; (8001274 <HAL_RCC_OscConfig+0x330>)
 80010f6:	4313      	orrs	r3, r2
 80010f8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d059      	beq.n	80011be <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800110a:	f7ff fbb3 	bl	8000874 <HAL_GetTick>
 800110e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001112:	e00a      	b.n	800112a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001114:	f7ff fbae 	bl	8000874 <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	2b64      	cmp	r3, #100	; 0x64
 8001122:	d902      	bls.n	800112a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001124:	2303      	movs	r3, #3
 8001126:	f000 bf43 	b.w	8001fb0 <HAL_RCC_OscConfig+0x106c>
 800112a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800112e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001132:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001136:	fa93 f3a3 	rbit	r3, r3
 800113a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800113e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001142:	fab3 f383 	clz	r3, r3
 8001146:	b2db      	uxtb	r3, r3
 8001148:	095b      	lsrs	r3, r3, #5
 800114a:	b2db      	uxtb	r3, r3
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	b2db      	uxtb	r3, r3
 8001152:	2b01      	cmp	r3, #1
 8001154:	d102      	bne.n	800115c <HAL_RCC_OscConfig+0x218>
 8001156:	4b47      	ldr	r3, [pc, #284]	; (8001274 <HAL_RCC_OscConfig+0x330>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	e015      	b.n	8001188 <HAL_RCC_OscConfig+0x244>
 800115c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001160:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001164:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001168:	fa93 f3a3 	rbit	r3, r3
 800116c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001170:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001174:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001178:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800117c:	fa93 f3a3 	rbit	r3, r3
 8001180:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001184:	4b3b      	ldr	r3, [pc, #236]	; (8001274 <HAL_RCC_OscConfig+0x330>)
 8001186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001188:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800118c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001190:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001194:	fa92 f2a2 	rbit	r2, r2
 8001198:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800119c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80011a0:	fab2 f282 	clz	r2, r2
 80011a4:	b2d2      	uxtb	r2, r2
 80011a6:	f042 0220 	orr.w	r2, r2, #32
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	f002 021f 	and.w	r2, r2, #31
 80011b0:	2101      	movs	r1, #1
 80011b2:	fa01 f202 	lsl.w	r2, r1, r2
 80011b6:	4013      	ands	r3, r2
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d0ab      	beq.n	8001114 <HAL_RCC_OscConfig+0x1d0>
 80011bc:	e05d      	b.n	800127a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011be:	f7ff fb59 	bl	8000874 <HAL_GetTick>
 80011c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011c6:	e00a      	b.n	80011de <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011c8:	f7ff fb54 	bl	8000874 <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	2b64      	cmp	r3, #100	; 0x64
 80011d6:	d902      	bls.n	80011de <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80011d8:	2303      	movs	r3, #3
 80011da:	f000 bee9 	b.w	8001fb0 <HAL_RCC_OscConfig+0x106c>
 80011de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011e2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80011ea:	fa93 f3a3 	rbit	r3, r3
 80011ee:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80011f2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011f6:	fab3 f383 	clz	r3, r3
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	095b      	lsrs	r3, r3, #5
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	b2db      	uxtb	r3, r3
 8001206:	2b01      	cmp	r3, #1
 8001208:	d102      	bne.n	8001210 <HAL_RCC_OscConfig+0x2cc>
 800120a:	4b1a      	ldr	r3, [pc, #104]	; (8001274 <HAL_RCC_OscConfig+0x330>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	e015      	b.n	800123c <HAL_RCC_OscConfig+0x2f8>
 8001210:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001214:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001218:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800121c:	fa93 f3a3 	rbit	r3, r3
 8001220:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001224:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001228:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800122c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001230:	fa93 f3a3 	rbit	r3, r3
 8001234:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001238:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <HAL_RCC_OscConfig+0x330>)
 800123a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001240:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001244:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001248:	fa92 f2a2 	rbit	r2, r2
 800124c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001250:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001254:	fab2 f282 	clz	r2, r2
 8001258:	b2d2      	uxtb	r2, r2
 800125a:	f042 0220 	orr.w	r2, r2, #32
 800125e:	b2d2      	uxtb	r2, r2
 8001260:	f002 021f 	and.w	r2, r2, #31
 8001264:	2101      	movs	r1, #1
 8001266:	fa01 f202 	lsl.w	r2, r1, r2
 800126a:	4013      	ands	r3, r2
 800126c:	2b00      	cmp	r3, #0
 800126e:	d1ab      	bne.n	80011c8 <HAL_RCC_OscConfig+0x284>
 8001270:	e003      	b.n	800127a <HAL_RCC_OscConfig+0x336>
 8001272:	bf00      	nop
 8001274:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001278:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800127a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800127e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	2b00      	cmp	r3, #0
 800128c:	f000 817d 	beq.w	800158a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001290:	4ba6      	ldr	r3, [pc, #664]	; (800152c <HAL_RCC_OscConfig+0x5e8>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f003 030c 	and.w	r3, r3, #12
 8001298:	2b00      	cmp	r3, #0
 800129a:	d00b      	beq.n	80012b4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800129c:	4ba3      	ldr	r3, [pc, #652]	; (800152c <HAL_RCC_OscConfig+0x5e8>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f003 030c 	and.w	r3, r3, #12
 80012a4:	2b08      	cmp	r3, #8
 80012a6:	d172      	bne.n	800138e <HAL_RCC_OscConfig+0x44a>
 80012a8:	4ba0      	ldr	r3, [pc, #640]	; (800152c <HAL_RCC_OscConfig+0x5e8>)
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d16c      	bne.n	800138e <HAL_RCC_OscConfig+0x44a>
 80012b4:	2302      	movs	r3, #2
 80012b6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ba:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80012be:	fa93 f3a3 	rbit	r3, r3
 80012c2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80012c6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ca:	fab3 f383 	clz	r3, r3
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	095b      	lsrs	r3, r3, #5
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d102      	bne.n	80012e4 <HAL_RCC_OscConfig+0x3a0>
 80012de:	4b93      	ldr	r3, [pc, #588]	; (800152c <HAL_RCC_OscConfig+0x5e8>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	e013      	b.n	800130c <HAL_RCC_OscConfig+0x3c8>
 80012e4:	2302      	movs	r3, #2
 80012e6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ea:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80012ee:	fa93 f3a3 	rbit	r3, r3
 80012f2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80012f6:	2302      	movs	r3, #2
 80012f8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80012fc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001300:	fa93 f3a3 	rbit	r3, r3
 8001304:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001308:	4b88      	ldr	r3, [pc, #544]	; (800152c <HAL_RCC_OscConfig+0x5e8>)
 800130a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800130c:	2202      	movs	r2, #2
 800130e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001312:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001316:	fa92 f2a2 	rbit	r2, r2
 800131a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800131e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001322:	fab2 f282 	clz	r2, r2
 8001326:	b2d2      	uxtb	r2, r2
 8001328:	f042 0220 	orr.w	r2, r2, #32
 800132c:	b2d2      	uxtb	r2, r2
 800132e:	f002 021f 	and.w	r2, r2, #31
 8001332:	2101      	movs	r1, #1
 8001334:	fa01 f202 	lsl.w	r2, r1, r2
 8001338:	4013      	ands	r3, r2
 800133a:	2b00      	cmp	r3, #0
 800133c:	d00a      	beq.n	8001354 <HAL_RCC_OscConfig+0x410>
 800133e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001342:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	691b      	ldr	r3, [r3, #16]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d002      	beq.n	8001354 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	f000 be2e 	b.w	8001fb0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001354:	4b75      	ldr	r3, [pc, #468]	; (800152c <HAL_RCC_OscConfig+0x5e8>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800135c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001360:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	695b      	ldr	r3, [r3, #20]
 8001368:	21f8      	movs	r1, #248	; 0xf8
 800136a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800136e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001372:	fa91 f1a1 	rbit	r1, r1
 8001376:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800137a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800137e:	fab1 f181 	clz	r1, r1
 8001382:	b2c9      	uxtb	r1, r1
 8001384:	408b      	lsls	r3, r1
 8001386:	4969      	ldr	r1, [pc, #420]	; (800152c <HAL_RCC_OscConfig+0x5e8>)
 8001388:	4313      	orrs	r3, r2
 800138a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800138c:	e0fd      	b.n	800158a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800138e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001392:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	691b      	ldr	r3, [r3, #16]
 800139a:	2b00      	cmp	r3, #0
 800139c:	f000 8088 	beq.w	80014b0 <HAL_RCC_OscConfig+0x56c>
 80013a0:	2301      	movs	r3, #1
 80013a2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013a6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80013aa:	fa93 f3a3 	rbit	r3, r3
 80013ae:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80013b2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013b6:	fab3 f383 	clz	r3, r3
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80013c0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	461a      	mov	r2, r3
 80013c8:	2301      	movs	r3, #1
 80013ca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013cc:	f7ff fa52 	bl	8000874 <HAL_GetTick>
 80013d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d4:	e00a      	b.n	80013ec <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013d6:	f7ff fa4d 	bl	8000874 <HAL_GetTick>
 80013da:	4602      	mov	r2, r0
 80013dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d902      	bls.n	80013ec <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	f000 bde2 	b.w	8001fb0 <HAL_RCC_OscConfig+0x106c>
 80013ec:	2302      	movs	r3, #2
 80013ee:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013f2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80013f6:	fa93 f3a3 	rbit	r3, r3
 80013fa:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80013fe:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001402:	fab3 f383 	clz	r3, r3
 8001406:	b2db      	uxtb	r3, r3
 8001408:	095b      	lsrs	r3, r3, #5
 800140a:	b2db      	uxtb	r3, r3
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	b2db      	uxtb	r3, r3
 8001412:	2b01      	cmp	r3, #1
 8001414:	d102      	bne.n	800141c <HAL_RCC_OscConfig+0x4d8>
 8001416:	4b45      	ldr	r3, [pc, #276]	; (800152c <HAL_RCC_OscConfig+0x5e8>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	e013      	b.n	8001444 <HAL_RCC_OscConfig+0x500>
 800141c:	2302      	movs	r3, #2
 800141e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001422:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001426:	fa93 f3a3 	rbit	r3, r3
 800142a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800142e:	2302      	movs	r3, #2
 8001430:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001434:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001438:	fa93 f3a3 	rbit	r3, r3
 800143c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001440:	4b3a      	ldr	r3, [pc, #232]	; (800152c <HAL_RCC_OscConfig+0x5e8>)
 8001442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001444:	2202      	movs	r2, #2
 8001446:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800144a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800144e:	fa92 f2a2 	rbit	r2, r2
 8001452:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001456:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800145a:	fab2 f282 	clz	r2, r2
 800145e:	b2d2      	uxtb	r2, r2
 8001460:	f042 0220 	orr.w	r2, r2, #32
 8001464:	b2d2      	uxtb	r2, r2
 8001466:	f002 021f 	and.w	r2, r2, #31
 800146a:	2101      	movs	r1, #1
 800146c:	fa01 f202 	lsl.w	r2, r1, r2
 8001470:	4013      	ands	r3, r2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d0af      	beq.n	80013d6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001476:	4b2d      	ldr	r3, [pc, #180]	; (800152c <HAL_RCC_OscConfig+0x5e8>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800147e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001482:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	695b      	ldr	r3, [r3, #20]
 800148a:	21f8      	movs	r1, #248	; 0xf8
 800148c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001490:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001494:	fa91 f1a1 	rbit	r1, r1
 8001498:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800149c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80014a0:	fab1 f181 	clz	r1, r1
 80014a4:	b2c9      	uxtb	r1, r1
 80014a6:	408b      	lsls	r3, r1
 80014a8:	4920      	ldr	r1, [pc, #128]	; (800152c <HAL_RCC_OscConfig+0x5e8>)
 80014aa:	4313      	orrs	r3, r2
 80014ac:	600b      	str	r3, [r1, #0]
 80014ae:	e06c      	b.n	800158a <HAL_RCC_OscConfig+0x646>
 80014b0:	2301      	movs	r3, #1
 80014b2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80014ba:	fa93 f3a3 	rbit	r3, r3
 80014be:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80014c2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014c6:	fab3 f383 	clz	r3, r3
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80014d0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	461a      	mov	r2, r3
 80014d8:	2300      	movs	r3, #0
 80014da:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014dc:	f7ff f9ca 	bl	8000874 <HAL_GetTick>
 80014e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014e4:	e00a      	b.n	80014fc <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014e6:	f7ff f9c5 	bl	8000874 <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d902      	bls.n	80014fc <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	f000 bd5a 	b.w	8001fb0 <HAL_RCC_OscConfig+0x106c>
 80014fc:	2302      	movs	r3, #2
 80014fe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001502:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001506:	fa93 f3a3 	rbit	r3, r3
 800150a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800150e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001512:	fab3 f383 	clz	r3, r3
 8001516:	b2db      	uxtb	r3, r3
 8001518:	095b      	lsrs	r3, r3, #5
 800151a:	b2db      	uxtb	r3, r3
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	b2db      	uxtb	r3, r3
 8001522:	2b01      	cmp	r3, #1
 8001524:	d104      	bne.n	8001530 <HAL_RCC_OscConfig+0x5ec>
 8001526:	4b01      	ldr	r3, [pc, #4]	; (800152c <HAL_RCC_OscConfig+0x5e8>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	e015      	b.n	8001558 <HAL_RCC_OscConfig+0x614>
 800152c:	40021000 	.word	0x40021000
 8001530:	2302      	movs	r3, #2
 8001532:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001536:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800153a:	fa93 f3a3 	rbit	r3, r3
 800153e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001542:	2302      	movs	r3, #2
 8001544:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001548:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800154c:	fa93 f3a3 	rbit	r3, r3
 8001550:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001554:	4bc8      	ldr	r3, [pc, #800]	; (8001878 <HAL_RCC_OscConfig+0x934>)
 8001556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001558:	2202      	movs	r2, #2
 800155a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800155e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001562:	fa92 f2a2 	rbit	r2, r2
 8001566:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800156a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800156e:	fab2 f282 	clz	r2, r2
 8001572:	b2d2      	uxtb	r2, r2
 8001574:	f042 0220 	orr.w	r2, r2, #32
 8001578:	b2d2      	uxtb	r2, r2
 800157a:	f002 021f 	and.w	r2, r2, #31
 800157e:	2101      	movs	r1, #1
 8001580:	fa01 f202 	lsl.w	r2, r1, r2
 8001584:	4013      	ands	r3, r2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1ad      	bne.n	80014e6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800158a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800158e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0308 	and.w	r3, r3, #8
 800159a:	2b00      	cmp	r3, #0
 800159c:	f000 8110 	beq.w	80017c0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d079      	beq.n	80016a4 <HAL_RCC_OscConfig+0x760>
 80015b0:	2301      	movs	r3, #1
 80015b2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80015ba:	fa93 f3a3 	rbit	r3, r3
 80015be:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80015c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015c6:	fab3 f383 	clz	r3, r3
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	461a      	mov	r2, r3
 80015ce:	4bab      	ldr	r3, [pc, #684]	; (800187c <HAL_RCC_OscConfig+0x938>)
 80015d0:	4413      	add	r3, r2
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	461a      	mov	r2, r3
 80015d6:	2301      	movs	r3, #1
 80015d8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015da:	f7ff f94b 	bl	8000874 <HAL_GetTick>
 80015de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015e2:	e00a      	b.n	80015fa <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015e4:	f7ff f946 	bl	8000874 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d902      	bls.n	80015fa <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	f000 bcdb 	b.w	8001fb0 <HAL_RCC_OscConfig+0x106c>
 80015fa:	2302      	movs	r3, #2
 80015fc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001600:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001604:	fa93 f3a3 	rbit	r3, r3
 8001608:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800160c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001610:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001614:	2202      	movs	r2, #2
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800161c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	fa93 f2a3 	rbit	r2, r3
 8001626:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800162a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001634:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001638:	2202      	movs	r2, #2
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001640:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	fa93 f2a3 	rbit	r2, r3
 800164a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800164e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001652:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001654:	4b88      	ldr	r3, [pc, #544]	; (8001878 <HAL_RCC_OscConfig+0x934>)
 8001656:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001658:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800165c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001660:	2102      	movs	r1, #2
 8001662:	6019      	str	r1, [r3, #0]
 8001664:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001668:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	fa93 f1a3 	rbit	r1, r3
 8001672:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001676:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800167a:	6019      	str	r1, [r3, #0]
  return result;
 800167c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001680:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	fab3 f383 	clz	r3, r3
 800168a:	b2db      	uxtb	r3, r3
 800168c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001690:	b2db      	uxtb	r3, r3
 8001692:	f003 031f 	and.w	r3, r3, #31
 8001696:	2101      	movs	r1, #1
 8001698:	fa01 f303 	lsl.w	r3, r1, r3
 800169c:	4013      	ands	r3, r2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d0a0      	beq.n	80015e4 <HAL_RCC_OscConfig+0x6a0>
 80016a2:	e08d      	b.n	80017c0 <HAL_RCC_OscConfig+0x87c>
 80016a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016a8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80016ac:	2201      	movs	r2, #1
 80016ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016b4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	fa93 f2a3 	rbit	r2, r3
 80016be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016c2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80016c6:	601a      	str	r2, [r3, #0]
  return result;
 80016c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016cc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80016d0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016d2:	fab3 f383 	clz	r3, r3
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	461a      	mov	r2, r3
 80016da:	4b68      	ldr	r3, [pc, #416]	; (800187c <HAL_RCC_OscConfig+0x938>)
 80016dc:	4413      	add	r3, r2
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	461a      	mov	r2, r3
 80016e2:	2300      	movs	r3, #0
 80016e4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e6:	f7ff f8c5 	bl	8000874 <HAL_GetTick>
 80016ea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016ee:	e00a      	b.n	8001706 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016f0:	f7ff f8c0 	bl	8000874 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d902      	bls.n	8001706 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	f000 bc55 	b.w	8001fb0 <HAL_RCC_OscConfig+0x106c>
 8001706:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800170a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800170e:	2202      	movs	r2, #2
 8001710:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001712:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001716:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	fa93 f2a3 	rbit	r2, r3
 8001720:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001724:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800172e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001732:	2202      	movs	r2, #2
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800173a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	fa93 f2a3 	rbit	r2, r3
 8001744:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001748:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001752:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001756:	2202      	movs	r2, #2
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800175e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	fa93 f2a3 	rbit	r2, r3
 8001768:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800176c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001770:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001772:	4b41      	ldr	r3, [pc, #260]	; (8001878 <HAL_RCC_OscConfig+0x934>)
 8001774:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001776:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800177a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800177e:	2102      	movs	r1, #2
 8001780:	6019      	str	r1, [r3, #0]
 8001782:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001786:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	fa93 f1a3 	rbit	r1, r3
 8001790:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001794:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001798:	6019      	str	r1, [r3, #0]
  return result;
 800179a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800179e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	fab3 f383 	clz	r3, r3
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	f003 031f 	and.w	r3, r3, #31
 80017b4:	2101      	movs	r1, #1
 80017b6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ba:	4013      	ands	r3, r2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d197      	bne.n	80016f0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0304 	and.w	r3, r3, #4
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	f000 81a1 	beq.w	8001b18 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017d6:	2300      	movs	r3, #0
 80017d8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017dc:	4b26      	ldr	r3, [pc, #152]	; (8001878 <HAL_RCC_OscConfig+0x934>)
 80017de:	69db      	ldr	r3, [r3, #28]
 80017e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d116      	bne.n	8001816 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017e8:	4b23      	ldr	r3, [pc, #140]	; (8001878 <HAL_RCC_OscConfig+0x934>)
 80017ea:	69db      	ldr	r3, [r3, #28]
 80017ec:	4a22      	ldr	r2, [pc, #136]	; (8001878 <HAL_RCC_OscConfig+0x934>)
 80017ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f2:	61d3      	str	r3, [r2, #28]
 80017f4:	4b20      	ldr	r3, [pc, #128]	; (8001878 <HAL_RCC_OscConfig+0x934>)
 80017f6:	69db      	ldr	r3, [r3, #28]
 80017f8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80017fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001800:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800180a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800180e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001810:	2301      	movs	r3, #1
 8001812:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001816:	4b1a      	ldr	r3, [pc, #104]	; (8001880 <HAL_RCC_OscConfig+0x93c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800181e:	2b00      	cmp	r3, #0
 8001820:	d11a      	bne.n	8001858 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001822:	4b17      	ldr	r3, [pc, #92]	; (8001880 <HAL_RCC_OscConfig+0x93c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a16      	ldr	r2, [pc, #88]	; (8001880 <HAL_RCC_OscConfig+0x93c>)
 8001828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800182c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800182e:	f7ff f821 	bl	8000874 <HAL_GetTick>
 8001832:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001836:	e009      	b.n	800184c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001838:	f7ff f81c 	bl	8000874 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b64      	cmp	r3, #100	; 0x64
 8001846:	d901      	bls.n	800184c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e3b1      	b.n	8001fb0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800184c:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <HAL_RCC_OscConfig+0x93c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001854:	2b00      	cmp	r3, #0
 8001856:	d0ef      	beq.n	8001838 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001858:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800185c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d10d      	bne.n	8001884 <HAL_RCC_OscConfig+0x940>
 8001868:	4b03      	ldr	r3, [pc, #12]	; (8001878 <HAL_RCC_OscConfig+0x934>)
 800186a:	6a1b      	ldr	r3, [r3, #32]
 800186c:	4a02      	ldr	r2, [pc, #8]	; (8001878 <HAL_RCC_OscConfig+0x934>)
 800186e:	f043 0301 	orr.w	r3, r3, #1
 8001872:	6213      	str	r3, [r2, #32]
 8001874:	e03c      	b.n	80018f0 <HAL_RCC_OscConfig+0x9ac>
 8001876:	bf00      	nop
 8001878:	40021000 	.word	0x40021000
 800187c:	10908120 	.word	0x10908120
 8001880:	40007000 	.word	0x40007000
 8001884:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001888:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d10c      	bne.n	80018ae <HAL_RCC_OscConfig+0x96a>
 8001894:	4bc1      	ldr	r3, [pc, #772]	; (8001b9c <HAL_RCC_OscConfig+0xc58>)
 8001896:	6a1b      	ldr	r3, [r3, #32]
 8001898:	4ac0      	ldr	r2, [pc, #768]	; (8001b9c <HAL_RCC_OscConfig+0xc58>)
 800189a:	f023 0301 	bic.w	r3, r3, #1
 800189e:	6213      	str	r3, [r2, #32]
 80018a0:	4bbe      	ldr	r3, [pc, #760]	; (8001b9c <HAL_RCC_OscConfig+0xc58>)
 80018a2:	6a1b      	ldr	r3, [r3, #32]
 80018a4:	4abd      	ldr	r2, [pc, #756]	; (8001b9c <HAL_RCC_OscConfig+0xc58>)
 80018a6:	f023 0304 	bic.w	r3, r3, #4
 80018aa:	6213      	str	r3, [r2, #32]
 80018ac:	e020      	b.n	80018f0 <HAL_RCC_OscConfig+0x9ac>
 80018ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	2b05      	cmp	r3, #5
 80018bc:	d10c      	bne.n	80018d8 <HAL_RCC_OscConfig+0x994>
 80018be:	4bb7      	ldr	r3, [pc, #732]	; (8001b9c <HAL_RCC_OscConfig+0xc58>)
 80018c0:	6a1b      	ldr	r3, [r3, #32]
 80018c2:	4ab6      	ldr	r2, [pc, #728]	; (8001b9c <HAL_RCC_OscConfig+0xc58>)
 80018c4:	f043 0304 	orr.w	r3, r3, #4
 80018c8:	6213      	str	r3, [r2, #32]
 80018ca:	4bb4      	ldr	r3, [pc, #720]	; (8001b9c <HAL_RCC_OscConfig+0xc58>)
 80018cc:	6a1b      	ldr	r3, [r3, #32]
 80018ce:	4ab3      	ldr	r2, [pc, #716]	; (8001b9c <HAL_RCC_OscConfig+0xc58>)
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	6213      	str	r3, [r2, #32]
 80018d6:	e00b      	b.n	80018f0 <HAL_RCC_OscConfig+0x9ac>
 80018d8:	4bb0      	ldr	r3, [pc, #704]	; (8001b9c <HAL_RCC_OscConfig+0xc58>)
 80018da:	6a1b      	ldr	r3, [r3, #32]
 80018dc:	4aaf      	ldr	r2, [pc, #700]	; (8001b9c <HAL_RCC_OscConfig+0xc58>)
 80018de:	f023 0301 	bic.w	r3, r3, #1
 80018e2:	6213      	str	r3, [r2, #32]
 80018e4:	4bad      	ldr	r3, [pc, #692]	; (8001b9c <HAL_RCC_OscConfig+0xc58>)
 80018e6:	6a1b      	ldr	r3, [r3, #32]
 80018e8:	4aac      	ldr	r2, [pc, #688]	; (8001b9c <HAL_RCC_OscConfig+0xc58>)
 80018ea:	f023 0304 	bic.w	r3, r3, #4
 80018ee:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	f000 8081 	beq.w	8001a04 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001902:	f7fe ffb7 	bl	8000874 <HAL_GetTick>
 8001906:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800190a:	e00b      	b.n	8001924 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800190c:	f7fe ffb2 	bl	8000874 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	f241 3288 	movw	r2, #5000	; 0x1388
 800191c:	4293      	cmp	r3, r2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e345      	b.n	8001fb0 <HAL_RCC_OscConfig+0x106c>
 8001924:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001928:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800192c:	2202      	movs	r2, #2
 800192e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001930:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001934:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	fa93 f2a3 	rbit	r2, r3
 800193e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001942:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800194c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001950:	2202      	movs	r2, #2
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001958:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	fa93 f2a3 	rbit	r2, r3
 8001962:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001966:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800196a:	601a      	str	r2, [r3, #0]
  return result;
 800196c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001970:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001974:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001976:	fab3 f383 	clz	r3, r3
 800197a:	b2db      	uxtb	r3, r3
 800197c:	095b      	lsrs	r3, r3, #5
 800197e:	b2db      	uxtb	r3, r3
 8001980:	f043 0302 	orr.w	r3, r3, #2
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d102      	bne.n	8001990 <HAL_RCC_OscConfig+0xa4c>
 800198a:	4b84      	ldr	r3, [pc, #528]	; (8001b9c <HAL_RCC_OscConfig+0xc58>)
 800198c:	6a1b      	ldr	r3, [r3, #32]
 800198e:	e013      	b.n	80019b8 <HAL_RCC_OscConfig+0xa74>
 8001990:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001994:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001998:	2202      	movs	r2, #2
 800199a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	fa93 f2a3 	rbit	r2, r3
 80019aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ae:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	4b79      	ldr	r3, [pc, #484]	; (8001b9c <HAL_RCC_OscConfig+0xc58>)
 80019b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019bc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80019c0:	2102      	movs	r1, #2
 80019c2:	6011      	str	r1, [r2, #0]
 80019c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019c8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80019cc:	6812      	ldr	r2, [r2, #0]
 80019ce:	fa92 f1a2 	rbit	r1, r2
 80019d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019d6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80019da:	6011      	str	r1, [r2, #0]
  return result;
 80019dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019e0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80019e4:	6812      	ldr	r2, [r2, #0]
 80019e6:	fab2 f282 	clz	r2, r2
 80019ea:	b2d2      	uxtb	r2, r2
 80019ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019f0:	b2d2      	uxtb	r2, r2
 80019f2:	f002 021f 	and.w	r2, r2, #31
 80019f6:	2101      	movs	r1, #1
 80019f8:	fa01 f202 	lsl.w	r2, r1, r2
 80019fc:	4013      	ands	r3, r2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d084      	beq.n	800190c <HAL_RCC_OscConfig+0x9c8>
 8001a02:	e07f      	b.n	8001b04 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a04:	f7fe ff36 	bl	8000874 <HAL_GetTick>
 8001a08:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a0c:	e00b      	b.n	8001a26 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a0e:	f7fe ff31 	bl	8000874 <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e2c4      	b.n	8001fb0 <HAL_RCC_OscConfig+0x106c>
 8001a26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a2a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001a2e:	2202      	movs	r2, #2
 8001a30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a36:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	fa93 f2a3 	rbit	r2, r3
 8001a40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a44:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a4e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001a52:	2202      	movs	r2, #2
 8001a54:	601a      	str	r2, [r3, #0]
 8001a56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a5a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	fa93 f2a3 	rbit	r2, r3
 8001a64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a68:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001a6c:	601a      	str	r2, [r3, #0]
  return result;
 8001a6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a72:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001a76:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a78:	fab3 f383 	clz	r3, r3
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	095b      	lsrs	r3, r3, #5
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	f043 0302 	orr.w	r3, r3, #2
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d102      	bne.n	8001a92 <HAL_RCC_OscConfig+0xb4e>
 8001a8c:	4b43      	ldr	r3, [pc, #268]	; (8001b9c <HAL_RCC_OscConfig+0xc58>)
 8001a8e:	6a1b      	ldr	r3, [r3, #32]
 8001a90:	e013      	b.n	8001aba <HAL_RCC_OscConfig+0xb76>
 8001a92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a96:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001a9a:	2202      	movs	r2, #2
 8001a9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	fa93 f2a3 	rbit	r2, r3
 8001aac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	4b39      	ldr	r3, [pc, #228]	; (8001b9c <HAL_RCC_OscConfig+0xc58>)
 8001ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001abe:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001ac2:	2102      	movs	r1, #2
 8001ac4:	6011      	str	r1, [r2, #0]
 8001ac6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001aca:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001ace:	6812      	ldr	r2, [r2, #0]
 8001ad0:	fa92 f1a2 	rbit	r1, r2
 8001ad4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ad8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001adc:	6011      	str	r1, [r2, #0]
  return result;
 8001ade:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ae2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001ae6:	6812      	ldr	r2, [r2, #0]
 8001ae8:	fab2 f282 	clz	r2, r2
 8001aec:	b2d2      	uxtb	r2, r2
 8001aee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001af2:	b2d2      	uxtb	r2, r2
 8001af4:	f002 021f 	and.w	r2, r2, #31
 8001af8:	2101      	movs	r1, #1
 8001afa:	fa01 f202 	lsl.w	r2, r1, r2
 8001afe:	4013      	ands	r3, r2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d184      	bne.n	8001a0e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b04:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d105      	bne.n	8001b18 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b0c:	4b23      	ldr	r3, [pc, #140]	; (8001b9c <HAL_RCC_OscConfig+0xc58>)
 8001b0e:	69db      	ldr	r3, [r3, #28]
 8001b10:	4a22      	ldr	r2, [pc, #136]	; (8001b9c <HAL_RCC_OscConfig+0xc58>)
 8001b12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b16:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b1c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	69db      	ldr	r3, [r3, #28]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f000 8242 	beq.w	8001fae <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b2a:	4b1c      	ldr	r3, [pc, #112]	; (8001b9c <HAL_RCC_OscConfig+0xc58>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f003 030c 	and.w	r3, r3, #12
 8001b32:	2b08      	cmp	r3, #8
 8001b34:	f000 8213 	beq.w	8001f5e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b3c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	69db      	ldr	r3, [r3, #28]
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	f040 8162 	bne.w	8001e0e <HAL_RCC_OscConfig+0xeca>
 8001b4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b4e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001b52:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b5c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	fa93 f2a3 	rbit	r2, r3
 8001b66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b6a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001b6e:	601a      	str	r2, [r3, #0]
  return result;
 8001b70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b74:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001b78:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b7a:	fab3 f383 	clz	r3, r3
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b84:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b90:	f7fe fe70 	bl	8000874 <HAL_GetTick>
 8001b94:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b98:	e00c      	b.n	8001bb4 <HAL_RCC_OscConfig+0xc70>
 8001b9a:	bf00      	nop
 8001b9c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ba0:	f7fe fe68 	bl	8000874 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e1fd      	b.n	8001fb0 <HAL_RCC_OscConfig+0x106c>
 8001bb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001bbc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	fa93 f2a3 	rbit	r2, r3
 8001bd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001bd8:	601a      	str	r2, [r3, #0]
  return result;
 8001bda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bde:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001be2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001be4:	fab3 f383 	clz	r3, r3
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	095b      	lsrs	r3, r3, #5
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	f043 0301 	orr.w	r3, r3, #1
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d102      	bne.n	8001bfe <HAL_RCC_OscConfig+0xcba>
 8001bf8:	4bb0      	ldr	r3, [pc, #704]	; (8001ebc <HAL_RCC_OscConfig+0xf78>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	e027      	b.n	8001c4e <HAL_RCC_OscConfig+0xd0a>
 8001bfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c02:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001c06:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c10:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	fa93 f2a3 	rbit	r2, r3
 8001c1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c1e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c28:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001c2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c36:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	fa93 f2a3 	rbit	r2, r3
 8001c40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c44:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	4b9c      	ldr	r3, [pc, #624]	; (8001ebc <HAL_RCC_OscConfig+0xf78>)
 8001c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c52:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001c56:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c5a:	6011      	str	r1, [r2, #0]
 8001c5c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c60:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001c64:	6812      	ldr	r2, [r2, #0]
 8001c66:	fa92 f1a2 	rbit	r1, r2
 8001c6a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c6e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001c72:	6011      	str	r1, [r2, #0]
  return result;
 8001c74:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c78:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001c7c:	6812      	ldr	r2, [r2, #0]
 8001c7e:	fab2 f282 	clz	r2, r2
 8001c82:	b2d2      	uxtb	r2, r2
 8001c84:	f042 0220 	orr.w	r2, r2, #32
 8001c88:	b2d2      	uxtb	r2, r2
 8001c8a:	f002 021f 	and.w	r2, r2, #31
 8001c8e:	2101      	movs	r1, #1
 8001c90:	fa01 f202 	lsl.w	r2, r1, r2
 8001c94:	4013      	ands	r3, r2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d182      	bne.n	8001ba0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c9a:	4b88      	ldr	r3, [pc, #544]	; (8001ebc <HAL_RCC_OscConfig+0xf78>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ca2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001cae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6a1b      	ldr	r3, [r3, #32]
 8001cba:	430b      	orrs	r3, r1
 8001cbc:	497f      	ldr	r1, [pc, #508]	; (8001ebc <HAL_RCC_OscConfig+0xf78>)
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	604b      	str	r3, [r1, #4]
 8001cc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001cca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001cce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	fa93 f2a3 	rbit	r2, r3
 8001cde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001ce6:	601a      	str	r2, [r3, #0]
  return result;
 8001ce8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cec:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001cf0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cf2:	fab3 f383 	clz	r3, r3
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001cfc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	461a      	mov	r2, r3
 8001d04:	2301      	movs	r3, #1
 8001d06:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d08:	f7fe fdb4 	bl	8000874 <HAL_GetTick>
 8001d0c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d10:	e009      	b.n	8001d26 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d12:	f7fe fdaf 	bl	8000874 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e144      	b.n	8001fb0 <HAL_RCC_OscConfig+0x106c>
 8001d26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d2a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001d2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d38:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	fa93 f2a3 	rbit	r2, r3
 8001d42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d46:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001d4a:	601a      	str	r2, [r3, #0]
  return result;
 8001d4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d50:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001d54:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d56:	fab3 f383 	clz	r3, r3
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	095b      	lsrs	r3, r3, #5
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	f043 0301 	orr.w	r3, r3, #1
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d102      	bne.n	8001d70 <HAL_RCC_OscConfig+0xe2c>
 8001d6a:	4b54      	ldr	r3, [pc, #336]	; (8001ebc <HAL_RCC_OscConfig+0xf78>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	e027      	b.n	8001dc0 <HAL_RCC_OscConfig+0xe7c>
 8001d70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d74:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001d78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d82:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	fa93 f2a3 	rbit	r2, r3
 8001d8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d90:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d9a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001d9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	fa93 f2a3 	rbit	r2, r3
 8001db2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001db6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	4b3f      	ldr	r3, [pc, #252]	; (8001ebc <HAL_RCC_OscConfig+0xf78>)
 8001dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dc4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001dc8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001dcc:	6011      	str	r1, [r2, #0]
 8001dce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dd2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001dd6:	6812      	ldr	r2, [r2, #0]
 8001dd8:	fa92 f1a2 	rbit	r1, r2
 8001ddc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001de0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001de4:	6011      	str	r1, [r2, #0]
  return result;
 8001de6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dea:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001dee:	6812      	ldr	r2, [r2, #0]
 8001df0:	fab2 f282 	clz	r2, r2
 8001df4:	b2d2      	uxtb	r2, r2
 8001df6:	f042 0220 	orr.w	r2, r2, #32
 8001dfa:	b2d2      	uxtb	r2, r2
 8001dfc:	f002 021f 	and.w	r2, r2, #31
 8001e00:	2101      	movs	r1, #1
 8001e02:	fa01 f202 	lsl.w	r2, r1, r2
 8001e06:	4013      	ands	r3, r2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d082      	beq.n	8001d12 <HAL_RCC_OscConfig+0xdce>
 8001e0c:	e0cf      	b.n	8001fae <HAL_RCC_OscConfig+0x106a>
 8001e0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e12:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001e16:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e20:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	fa93 f2a3 	rbit	r2, r3
 8001e2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e2e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001e32:	601a      	str	r2, [r3, #0]
  return result;
 8001e34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e38:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001e3c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e3e:	fab3 f383 	clz	r3, r3
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e48:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	461a      	mov	r2, r3
 8001e50:	2300      	movs	r3, #0
 8001e52:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e54:	f7fe fd0e 	bl	8000874 <HAL_GetTick>
 8001e58:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e5c:	e009      	b.n	8001e72 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e5e:	f7fe fd09 	bl	8000874 <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e09e      	b.n	8001fb0 <HAL_RCC_OscConfig+0x106c>
 8001e72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e76:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001e7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e84:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	fa93 f2a3 	rbit	r2, r3
 8001e8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e92:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001e96:	601a      	str	r2, [r3, #0]
  return result;
 8001e98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e9c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001ea0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ea2:	fab3 f383 	clz	r3, r3
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	095b      	lsrs	r3, r3, #5
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	f043 0301 	orr.w	r3, r3, #1
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d104      	bne.n	8001ec0 <HAL_RCC_OscConfig+0xf7c>
 8001eb6:	4b01      	ldr	r3, [pc, #4]	; (8001ebc <HAL_RCC_OscConfig+0xf78>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	e029      	b.n	8001f10 <HAL_RCC_OscConfig+0xfcc>
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ec4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001ec8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ecc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ece:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ed2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	fa93 f2a3 	rbit	r2, r3
 8001edc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eea:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001eee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ef8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	fa93 f2a3 	rbit	r2, r3
 8001f02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f06:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	4b2b      	ldr	r3, [pc, #172]	; (8001fbc <HAL_RCC_OscConfig+0x1078>)
 8001f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f10:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f14:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001f18:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001f1c:	6011      	str	r1, [r2, #0]
 8001f1e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f22:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001f26:	6812      	ldr	r2, [r2, #0]
 8001f28:	fa92 f1a2 	rbit	r1, r2
 8001f2c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f30:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001f34:	6011      	str	r1, [r2, #0]
  return result;
 8001f36:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f3a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001f3e:	6812      	ldr	r2, [r2, #0]
 8001f40:	fab2 f282 	clz	r2, r2
 8001f44:	b2d2      	uxtb	r2, r2
 8001f46:	f042 0220 	orr.w	r2, r2, #32
 8001f4a:	b2d2      	uxtb	r2, r2
 8001f4c:	f002 021f 	and.w	r2, r2, #31
 8001f50:	2101      	movs	r1, #1
 8001f52:	fa01 f202 	lsl.w	r2, r1, r2
 8001f56:	4013      	ands	r3, r2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d180      	bne.n	8001e5e <HAL_RCC_OscConfig+0xf1a>
 8001f5c:	e027      	b.n	8001fae <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d101      	bne.n	8001f72 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e01e      	b.n	8001fb0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f72:	4b12      	ldr	r3, [pc, #72]	; (8001fbc <HAL_RCC_OscConfig+0x1078>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f7a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001f7e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6a1b      	ldr	r3, [r3, #32]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d10b      	bne.n	8001faa <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001f92:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001f96:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d001      	beq.n	8001fae <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e000      	b.n	8001fb0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40021000 	.word	0x40021000

08001fc0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b09e      	sub	sp, #120	; 0x78
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d101      	bne.n	8001fd8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e162      	b.n	800229e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fd8:	4b90      	ldr	r3, [pc, #576]	; (800221c <HAL_RCC_ClockConfig+0x25c>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0307 	and.w	r3, r3, #7
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d910      	bls.n	8002008 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fe6:	4b8d      	ldr	r3, [pc, #564]	; (800221c <HAL_RCC_ClockConfig+0x25c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f023 0207 	bic.w	r2, r3, #7
 8001fee:	498b      	ldr	r1, [pc, #556]	; (800221c <HAL_RCC_ClockConfig+0x25c>)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ff6:	4b89      	ldr	r3, [pc, #548]	; (800221c <HAL_RCC_ClockConfig+0x25c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	429a      	cmp	r2, r3
 8002002:	d001      	beq.n	8002008 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e14a      	b.n	800229e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d008      	beq.n	8002026 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002014:	4b82      	ldr	r3, [pc, #520]	; (8002220 <HAL_RCC_ClockConfig+0x260>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	497f      	ldr	r1, [pc, #508]	; (8002220 <HAL_RCC_ClockConfig+0x260>)
 8002022:	4313      	orrs	r3, r2
 8002024:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b00      	cmp	r3, #0
 8002030:	f000 80dc 	beq.w	80021ec <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d13c      	bne.n	80020b6 <HAL_RCC_ClockConfig+0xf6>
 800203c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002040:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002042:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002044:	fa93 f3a3 	rbit	r3, r3
 8002048:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800204a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800204c:	fab3 f383 	clz	r3, r3
 8002050:	b2db      	uxtb	r3, r3
 8002052:	095b      	lsrs	r3, r3, #5
 8002054:	b2db      	uxtb	r3, r3
 8002056:	f043 0301 	orr.w	r3, r3, #1
 800205a:	b2db      	uxtb	r3, r3
 800205c:	2b01      	cmp	r3, #1
 800205e:	d102      	bne.n	8002066 <HAL_RCC_ClockConfig+0xa6>
 8002060:	4b6f      	ldr	r3, [pc, #444]	; (8002220 <HAL_RCC_ClockConfig+0x260>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	e00f      	b.n	8002086 <HAL_RCC_ClockConfig+0xc6>
 8002066:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800206a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800206e:	fa93 f3a3 	rbit	r3, r3
 8002072:	667b      	str	r3, [r7, #100]	; 0x64
 8002074:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002078:	663b      	str	r3, [r7, #96]	; 0x60
 800207a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800207c:	fa93 f3a3 	rbit	r3, r3
 8002080:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002082:	4b67      	ldr	r3, [pc, #412]	; (8002220 <HAL_RCC_ClockConfig+0x260>)
 8002084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002086:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800208a:	65ba      	str	r2, [r7, #88]	; 0x58
 800208c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800208e:	fa92 f2a2 	rbit	r2, r2
 8002092:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002094:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002096:	fab2 f282 	clz	r2, r2
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	f042 0220 	orr.w	r2, r2, #32
 80020a0:	b2d2      	uxtb	r2, r2
 80020a2:	f002 021f 	and.w	r2, r2, #31
 80020a6:	2101      	movs	r1, #1
 80020a8:	fa01 f202 	lsl.w	r2, r1, r2
 80020ac:	4013      	ands	r3, r2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d17b      	bne.n	80021aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e0f3      	b.n	800229e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d13c      	bne.n	8002138 <HAL_RCC_ClockConfig+0x178>
 80020be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020c2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020c6:	fa93 f3a3 	rbit	r3, r3
 80020ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80020cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ce:	fab3 f383 	clz	r3, r3
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	095b      	lsrs	r3, r3, #5
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	f043 0301 	orr.w	r3, r3, #1
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d102      	bne.n	80020e8 <HAL_RCC_ClockConfig+0x128>
 80020e2:	4b4f      	ldr	r3, [pc, #316]	; (8002220 <HAL_RCC_ClockConfig+0x260>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	e00f      	b.n	8002108 <HAL_RCC_ClockConfig+0x148>
 80020e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020ec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020f0:	fa93 f3a3 	rbit	r3, r3
 80020f4:	647b      	str	r3, [r7, #68]	; 0x44
 80020f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020fa:	643b      	str	r3, [r7, #64]	; 0x40
 80020fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020fe:	fa93 f3a3 	rbit	r3, r3
 8002102:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002104:	4b46      	ldr	r3, [pc, #280]	; (8002220 <HAL_RCC_ClockConfig+0x260>)
 8002106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002108:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800210c:	63ba      	str	r2, [r7, #56]	; 0x38
 800210e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002110:	fa92 f2a2 	rbit	r2, r2
 8002114:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002116:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002118:	fab2 f282 	clz	r2, r2
 800211c:	b2d2      	uxtb	r2, r2
 800211e:	f042 0220 	orr.w	r2, r2, #32
 8002122:	b2d2      	uxtb	r2, r2
 8002124:	f002 021f 	and.w	r2, r2, #31
 8002128:	2101      	movs	r1, #1
 800212a:	fa01 f202 	lsl.w	r2, r1, r2
 800212e:	4013      	ands	r3, r2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d13a      	bne.n	80021aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e0b2      	b.n	800229e <HAL_RCC_ClockConfig+0x2de>
 8002138:	2302      	movs	r3, #2
 800213a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800213e:	fa93 f3a3 	rbit	r3, r3
 8002142:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002146:	fab3 f383 	clz	r3, r3
 800214a:	b2db      	uxtb	r3, r3
 800214c:	095b      	lsrs	r3, r3, #5
 800214e:	b2db      	uxtb	r3, r3
 8002150:	f043 0301 	orr.w	r3, r3, #1
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b01      	cmp	r3, #1
 8002158:	d102      	bne.n	8002160 <HAL_RCC_ClockConfig+0x1a0>
 800215a:	4b31      	ldr	r3, [pc, #196]	; (8002220 <HAL_RCC_ClockConfig+0x260>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	e00d      	b.n	800217c <HAL_RCC_ClockConfig+0x1bc>
 8002160:	2302      	movs	r3, #2
 8002162:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002166:	fa93 f3a3 	rbit	r3, r3
 800216a:	627b      	str	r3, [r7, #36]	; 0x24
 800216c:	2302      	movs	r3, #2
 800216e:	623b      	str	r3, [r7, #32]
 8002170:	6a3b      	ldr	r3, [r7, #32]
 8002172:	fa93 f3a3 	rbit	r3, r3
 8002176:	61fb      	str	r3, [r7, #28]
 8002178:	4b29      	ldr	r3, [pc, #164]	; (8002220 <HAL_RCC_ClockConfig+0x260>)
 800217a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217c:	2202      	movs	r2, #2
 800217e:	61ba      	str	r2, [r7, #24]
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	fa92 f2a2 	rbit	r2, r2
 8002186:	617a      	str	r2, [r7, #20]
  return result;
 8002188:	697a      	ldr	r2, [r7, #20]
 800218a:	fab2 f282 	clz	r2, r2
 800218e:	b2d2      	uxtb	r2, r2
 8002190:	f042 0220 	orr.w	r2, r2, #32
 8002194:	b2d2      	uxtb	r2, r2
 8002196:	f002 021f 	and.w	r2, r2, #31
 800219a:	2101      	movs	r1, #1
 800219c:	fa01 f202 	lsl.w	r2, r1, r2
 80021a0:	4013      	ands	r3, r2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d101      	bne.n	80021aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e079      	b.n	800229e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021aa:	4b1d      	ldr	r3, [pc, #116]	; (8002220 <HAL_RCC_ClockConfig+0x260>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f023 0203 	bic.w	r2, r3, #3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	491a      	ldr	r1, [pc, #104]	; (8002220 <HAL_RCC_ClockConfig+0x260>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021bc:	f7fe fb5a 	bl	8000874 <HAL_GetTick>
 80021c0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021c2:	e00a      	b.n	80021da <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021c4:	f7fe fb56 	bl	8000874 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e061      	b.n	800229e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021da:	4b11      	ldr	r3, [pc, #68]	; (8002220 <HAL_RCC_ClockConfig+0x260>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f003 020c 	and.w	r2, r3, #12
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d1eb      	bne.n	80021c4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021ec:	4b0b      	ldr	r3, [pc, #44]	; (800221c <HAL_RCC_ClockConfig+0x25c>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0307 	and.w	r3, r3, #7
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d214      	bcs.n	8002224 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021fa:	4b08      	ldr	r3, [pc, #32]	; (800221c <HAL_RCC_ClockConfig+0x25c>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f023 0207 	bic.w	r2, r3, #7
 8002202:	4906      	ldr	r1, [pc, #24]	; (800221c <HAL_RCC_ClockConfig+0x25c>)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	4313      	orrs	r3, r2
 8002208:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800220a:	4b04      	ldr	r3, [pc, #16]	; (800221c <HAL_RCC_ClockConfig+0x25c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	429a      	cmp	r2, r3
 8002216:	d005      	beq.n	8002224 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e040      	b.n	800229e <HAL_RCC_ClockConfig+0x2de>
 800221c:	40022000 	.word	0x40022000
 8002220:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0304 	and.w	r3, r3, #4
 800222c:	2b00      	cmp	r3, #0
 800222e:	d008      	beq.n	8002242 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002230:	4b1d      	ldr	r3, [pc, #116]	; (80022a8 <HAL_RCC_ClockConfig+0x2e8>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	491a      	ldr	r1, [pc, #104]	; (80022a8 <HAL_RCC_ClockConfig+0x2e8>)
 800223e:	4313      	orrs	r3, r2
 8002240:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0308 	and.w	r3, r3, #8
 800224a:	2b00      	cmp	r3, #0
 800224c:	d009      	beq.n	8002262 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800224e:	4b16      	ldr	r3, [pc, #88]	; (80022a8 <HAL_RCC_ClockConfig+0x2e8>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	4912      	ldr	r1, [pc, #72]	; (80022a8 <HAL_RCC_ClockConfig+0x2e8>)
 800225e:	4313      	orrs	r3, r2
 8002260:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002262:	f000 f829 	bl	80022b8 <HAL_RCC_GetSysClockFreq>
 8002266:	4601      	mov	r1, r0
 8002268:	4b0f      	ldr	r3, [pc, #60]	; (80022a8 <HAL_RCC_ClockConfig+0x2e8>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002270:	22f0      	movs	r2, #240	; 0xf0
 8002272:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	fa92 f2a2 	rbit	r2, r2
 800227a:	60fa      	str	r2, [r7, #12]
  return result;
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	fab2 f282 	clz	r2, r2
 8002282:	b2d2      	uxtb	r2, r2
 8002284:	40d3      	lsrs	r3, r2
 8002286:	4a09      	ldr	r2, [pc, #36]	; (80022ac <HAL_RCC_ClockConfig+0x2ec>)
 8002288:	5cd3      	ldrb	r3, [r2, r3]
 800228a:	fa21 f303 	lsr.w	r3, r1, r3
 800228e:	4a08      	ldr	r2, [pc, #32]	; (80022b0 <HAL_RCC_ClockConfig+0x2f0>)
 8002290:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002292:	4b08      	ldr	r3, [pc, #32]	; (80022b4 <HAL_RCC_ClockConfig+0x2f4>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f7fe faa8 	bl	80007ec <HAL_InitTick>
  
  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3778      	adds	r7, #120	; 0x78
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40021000 	.word	0x40021000
 80022ac:	0800464c 	.word	0x0800464c
 80022b0:	20000000 	.word	0x20000000
 80022b4:	20000004 	.word	0x20000004

080022b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b087      	sub	sp, #28
 80022bc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022be:	2300      	movs	r3, #0
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	2300      	movs	r3, #0
 80022c4:	60bb      	str	r3, [r7, #8]
 80022c6:	2300      	movs	r3, #0
 80022c8:	617b      	str	r3, [r7, #20]
 80022ca:	2300      	movs	r3, #0
 80022cc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80022ce:	2300      	movs	r3, #0
 80022d0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80022d2:	4b1e      	ldr	r3, [pc, #120]	; (800234c <HAL_RCC_GetSysClockFreq+0x94>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f003 030c 	and.w	r3, r3, #12
 80022de:	2b04      	cmp	r3, #4
 80022e0:	d002      	beq.n	80022e8 <HAL_RCC_GetSysClockFreq+0x30>
 80022e2:	2b08      	cmp	r3, #8
 80022e4:	d003      	beq.n	80022ee <HAL_RCC_GetSysClockFreq+0x36>
 80022e6:	e026      	b.n	8002336 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022e8:	4b19      	ldr	r3, [pc, #100]	; (8002350 <HAL_RCC_GetSysClockFreq+0x98>)
 80022ea:	613b      	str	r3, [r7, #16]
      break;
 80022ec:	e026      	b.n	800233c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	0c9b      	lsrs	r3, r3, #18
 80022f2:	f003 030f 	and.w	r3, r3, #15
 80022f6:	4a17      	ldr	r2, [pc, #92]	; (8002354 <HAL_RCC_GetSysClockFreq+0x9c>)
 80022f8:	5cd3      	ldrb	r3, [r2, r3]
 80022fa:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80022fc:	4b13      	ldr	r3, [pc, #76]	; (800234c <HAL_RCC_GetSysClockFreq+0x94>)
 80022fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002300:	f003 030f 	and.w	r3, r3, #15
 8002304:	4a14      	ldr	r2, [pc, #80]	; (8002358 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002306:	5cd3      	ldrb	r3, [r2, r3]
 8002308:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d008      	beq.n	8002326 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002314:	4a0e      	ldr	r2, [pc, #56]	; (8002350 <HAL_RCC_GetSysClockFreq+0x98>)
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	fbb2 f2f3 	udiv	r2, r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	fb02 f303 	mul.w	r3, r2, r3
 8002322:	617b      	str	r3, [r7, #20]
 8002324:	e004      	b.n	8002330 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a0c      	ldr	r2, [pc, #48]	; (800235c <HAL_RCC_GetSysClockFreq+0xa4>)
 800232a:	fb02 f303 	mul.w	r3, r2, r3
 800232e:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	613b      	str	r3, [r7, #16]
      break;
 8002334:	e002      	b.n	800233c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002336:	4b06      	ldr	r3, [pc, #24]	; (8002350 <HAL_RCC_GetSysClockFreq+0x98>)
 8002338:	613b      	str	r3, [r7, #16]
      break;
 800233a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800233c:	693b      	ldr	r3, [r7, #16]
}
 800233e:	4618      	mov	r0, r3
 8002340:	371c      	adds	r7, #28
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	40021000 	.word	0x40021000
 8002350:	007a1200 	.word	0x007a1200
 8002354:	08004664 	.word	0x08004664
 8002358:	08004674 	.word	0x08004674
 800235c:	003d0900 	.word	0x003d0900

08002360 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002364:	4b03      	ldr	r3, [pc, #12]	; (8002374 <HAL_RCC_GetHCLKFreq+0x14>)
 8002366:	681b      	ldr	r3, [r3, #0]
}
 8002368:	4618      	mov	r0, r3
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	20000000 	.word	0x20000000

08002378 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800237e:	f7ff ffef 	bl	8002360 <HAL_RCC_GetHCLKFreq>
 8002382:	4601      	mov	r1, r0
 8002384:	4b0b      	ldr	r3, [pc, #44]	; (80023b4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800238c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002390:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	fa92 f2a2 	rbit	r2, r2
 8002398:	603a      	str	r2, [r7, #0]
  return result;
 800239a:	683a      	ldr	r2, [r7, #0]
 800239c:	fab2 f282 	clz	r2, r2
 80023a0:	b2d2      	uxtb	r2, r2
 80023a2:	40d3      	lsrs	r3, r2
 80023a4:	4a04      	ldr	r2, [pc, #16]	; (80023b8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80023a6:	5cd3      	ldrb	r3, [r2, r3]
 80023a8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80023ac:	4618      	mov	r0, r3
 80023ae:	3708      	adds	r7, #8
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40021000 	.word	0x40021000
 80023b8:	0800465c 	.word	0x0800465c

080023bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80023c2:	f7ff ffcd 	bl	8002360 <HAL_RCC_GetHCLKFreq>
 80023c6:	4601      	mov	r1, r0
 80023c8:	4b0b      	ldr	r3, [pc, #44]	; (80023f8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80023d0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80023d4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	fa92 f2a2 	rbit	r2, r2
 80023dc:	603a      	str	r2, [r7, #0]
  return result;
 80023de:	683a      	ldr	r2, [r7, #0]
 80023e0:	fab2 f282 	clz	r2, r2
 80023e4:	b2d2      	uxtb	r2, r2
 80023e6:	40d3      	lsrs	r3, r2
 80023e8:	4a04      	ldr	r2, [pc, #16]	; (80023fc <HAL_RCC_GetPCLK2Freq+0x40>)
 80023ea:	5cd3      	ldrb	r3, [r2, r3]
 80023ec:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80023f0:	4618      	mov	r0, r3
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40021000 	.word	0x40021000
 80023fc:	0800465c 	.word	0x0800465c

08002400 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b092      	sub	sp, #72	; 0x48
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002408:	2300      	movs	r3, #0
 800240a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800240c:	2300      	movs	r3, #0
 800240e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002410:	2300      	movs	r3, #0
 8002412:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800241e:	2b00      	cmp	r3, #0
 8002420:	f000 80d4 	beq.w	80025cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002424:	4b4e      	ldr	r3, [pc, #312]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002426:	69db      	ldr	r3, [r3, #28]
 8002428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d10e      	bne.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002430:	4b4b      	ldr	r3, [pc, #300]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002432:	69db      	ldr	r3, [r3, #28]
 8002434:	4a4a      	ldr	r2, [pc, #296]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002436:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800243a:	61d3      	str	r3, [r2, #28]
 800243c:	4b48      	ldr	r3, [pc, #288]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800243e:	69db      	ldr	r3, [r3, #28]
 8002440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002444:	60bb      	str	r3, [r7, #8]
 8002446:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002448:	2301      	movs	r3, #1
 800244a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800244e:	4b45      	ldr	r3, [pc, #276]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002456:	2b00      	cmp	r3, #0
 8002458:	d118      	bne.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800245a:	4b42      	ldr	r3, [pc, #264]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a41      	ldr	r2, [pc, #260]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002464:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002466:	f7fe fa05 	bl	8000874 <HAL_GetTick>
 800246a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800246c:	e008      	b.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800246e:	f7fe fa01 	bl	8000874 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b64      	cmp	r3, #100	; 0x64
 800247a:	d901      	bls.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e169      	b.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002480:	4b38      	ldr	r3, [pc, #224]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0f0      	beq.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800248c:	4b34      	ldr	r3, [pc, #208]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800248e:	6a1b      	ldr	r3, [r3, #32]
 8002490:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002494:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002498:	2b00      	cmp	r3, #0
 800249a:	f000 8084 	beq.w	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d07c      	beq.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80024ac:	4b2c      	ldr	r3, [pc, #176]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024ba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024be:	fa93 f3a3 	rbit	r3, r3
 80024c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80024c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80024c6:	fab3 f383 	clz	r3, r3
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	461a      	mov	r2, r3
 80024ce:	4b26      	ldr	r3, [pc, #152]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80024d0:	4413      	add	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	461a      	mov	r2, r3
 80024d6:	2301      	movs	r3, #1
 80024d8:	6013      	str	r3, [r2, #0]
 80024da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024e2:	fa93 f3a3 	rbit	r3, r3
 80024e6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80024e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024ea:	fab3 f383 	clz	r3, r3
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	461a      	mov	r2, r3
 80024f2:	4b1d      	ldr	r3, [pc, #116]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80024f4:	4413      	add	r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	461a      	mov	r2, r3
 80024fa:	2300      	movs	r3, #0
 80024fc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80024fe:	4a18      	ldr	r2, [pc, #96]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002502:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d04b      	beq.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250e:	f7fe f9b1 	bl	8000874 <HAL_GetTick>
 8002512:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002514:	e00a      	b.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002516:	f7fe f9ad 	bl	8000874 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	f241 3288 	movw	r2, #5000	; 0x1388
 8002524:	4293      	cmp	r3, r2
 8002526:	d901      	bls.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e113      	b.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800252c:	2302      	movs	r3, #2
 800252e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002532:	fa93 f3a3 	rbit	r3, r3
 8002536:	627b      	str	r3, [r7, #36]	; 0x24
 8002538:	2302      	movs	r3, #2
 800253a:	623b      	str	r3, [r7, #32]
 800253c:	6a3b      	ldr	r3, [r7, #32]
 800253e:	fa93 f3a3 	rbit	r3, r3
 8002542:	61fb      	str	r3, [r7, #28]
  return result;
 8002544:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002546:	fab3 f383 	clz	r3, r3
 800254a:	b2db      	uxtb	r3, r3
 800254c:	095b      	lsrs	r3, r3, #5
 800254e:	b2db      	uxtb	r3, r3
 8002550:	f043 0302 	orr.w	r3, r3, #2
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d108      	bne.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800255a:	4b01      	ldr	r3, [pc, #4]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	e00d      	b.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002560:	40021000 	.word	0x40021000
 8002564:	40007000 	.word	0x40007000
 8002568:	10908100 	.word	0x10908100
 800256c:	2302      	movs	r3, #2
 800256e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	fa93 f3a3 	rbit	r3, r3
 8002576:	617b      	str	r3, [r7, #20]
 8002578:	4b78      	ldr	r3, [pc, #480]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800257a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257c:	2202      	movs	r2, #2
 800257e:	613a      	str	r2, [r7, #16]
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	fa92 f2a2 	rbit	r2, r2
 8002586:	60fa      	str	r2, [r7, #12]
  return result;
 8002588:	68fa      	ldr	r2, [r7, #12]
 800258a:	fab2 f282 	clz	r2, r2
 800258e:	b2d2      	uxtb	r2, r2
 8002590:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002594:	b2d2      	uxtb	r2, r2
 8002596:	f002 021f 	and.w	r2, r2, #31
 800259a:	2101      	movs	r1, #1
 800259c:	fa01 f202 	lsl.w	r2, r1, r2
 80025a0:	4013      	ands	r3, r2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d0b7      	beq.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80025a6:	4b6d      	ldr	r3, [pc, #436]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	496a      	ldr	r1, [pc, #424]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025b8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d105      	bne.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025c0:	4b66      	ldr	r3, [pc, #408]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025c2:	69db      	ldr	r3, [r3, #28]
 80025c4:	4a65      	ldr	r2, [pc, #404]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025ca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d008      	beq.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025d8:	4b60      	ldr	r3, [pc, #384]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025dc:	f023 0203 	bic.w	r2, r3, #3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	495d      	ldr	r1, [pc, #372]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d008      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025f6:	4b59      	ldr	r3, [pc, #356]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	4956      	ldr	r1, [pc, #344]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002604:	4313      	orrs	r3, r2
 8002606:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0304 	and.w	r3, r3, #4
 8002610:	2b00      	cmp	r3, #0
 8002612:	d008      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002614:	4b51      	ldr	r3, [pc, #324]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002618:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	494e      	ldr	r1, [pc, #312]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002622:	4313      	orrs	r3, r2
 8002624:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0320 	and.w	r3, r3, #32
 800262e:	2b00      	cmp	r3, #0
 8002630:	d008      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002632:	4b4a      	ldr	r3, [pc, #296]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002636:	f023 0210 	bic.w	r2, r3, #16
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	4947      	ldr	r1, [pc, #284]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002640:	4313      	orrs	r3, r2
 8002642:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d008      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002650:	4b42      	ldr	r3, [pc, #264]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800265c:	493f      	ldr	r1, [pc, #252]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800265e:	4313      	orrs	r3, r2
 8002660:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800266a:	2b00      	cmp	r3, #0
 800266c:	d008      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800266e:	4b3b      	ldr	r3, [pc, #236]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	f023 0220 	bic.w	r2, r3, #32
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a1b      	ldr	r3, [r3, #32]
 800267a:	4938      	ldr	r1, [pc, #224]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800267c:	4313      	orrs	r3, r2
 800267e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0308 	and.w	r3, r3, #8
 8002688:	2b00      	cmp	r3, #0
 800268a:	d008      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800268c:	4b33      	ldr	r3, [pc, #204]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800268e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002690:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	695b      	ldr	r3, [r3, #20]
 8002698:	4930      	ldr	r1, [pc, #192]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800269a:	4313      	orrs	r3, r2
 800269c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0310 	and.w	r3, r3, #16
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d008      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80026aa:	4b2c      	ldr	r3, [pc, #176]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	4929      	ldr	r1, [pc, #164]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d008      	beq.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026c8:	4b24      	ldr	r3, [pc, #144]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d4:	4921      	ldr	r1, [pc, #132]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d008      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80026e6:	4b1d      	ldr	r3, [pc, #116]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ea:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f2:	491a      	ldr	r1, [pc, #104]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002700:	2b00      	cmp	r3, #0
 8002702:	d008      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002704:	4b15      	ldr	r3, [pc, #84]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002708:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002710:	4912      	ldr	r1, [pc, #72]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002712:	4313      	orrs	r3, r2
 8002714:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d008      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002722:	4b0e      	ldr	r3, [pc, #56]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002726:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272e:	490b      	ldr	r1, [pc, #44]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002730:	4313      	orrs	r3, r2
 8002732:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d008      	beq.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002740:	4b06      	ldr	r3, [pc, #24]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002744:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800274c:	4903      	ldr	r1, [pc, #12]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800274e:	4313      	orrs	r3, r2
 8002750:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3748      	adds	r7, #72	; 0x48
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40021000 	.word	0x40021000

08002760 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e040      	b.n	80027f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002776:	2b00      	cmp	r3, #0
 8002778:	d106      	bne.n	8002788 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f7fd ff2c 	bl	80005e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2224      	movs	r2, #36	; 0x24
 800278c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 0201 	bic.w	r2, r2, #1
 800279c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d002      	beq.n	80027ac <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 fdd0 	bl	800334c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 fbf9 	bl	8002fa4 <UART_SetConfig>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d101      	bne.n	80027bc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e01b      	b.n	80027f4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	685a      	ldr	r2, [r3, #4]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	689a      	ldr	r2, [r3, #8]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f042 0201 	orr.w	r2, r2, #1
 80027ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f000 fe4f 	bl	8003490 <UART_CheckIdleState>
 80027f2:	4603      	mov	r3, r0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3708      	adds	r7, #8
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b08a      	sub	sp, #40	; 0x28
 8002800:	af02      	add	r7, sp, #8
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	603b      	str	r3, [r7, #0]
 8002808:	4613      	mov	r3, r2
 800280a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002810:	2b20      	cmp	r3, #32
 8002812:	d178      	bne.n	8002906 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d002      	beq.n	8002820 <HAL_UART_Transmit+0x24>
 800281a:	88fb      	ldrh	r3, [r7, #6]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d101      	bne.n	8002824 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e071      	b.n	8002908 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2221      	movs	r2, #33	; 0x21
 8002830:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002832:	f7fe f81f 	bl	8000874 <HAL_GetTick>
 8002836:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	88fa      	ldrh	r2, [r7, #6]
 800283c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	88fa      	ldrh	r2, [r7, #6]
 8002844:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002850:	d108      	bne.n	8002864 <HAL_UART_Transmit+0x68>
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d104      	bne.n	8002864 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800285a:	2300      	movs	r3, #0
 800285c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	61bb      	str	r3, [r7, #24]
 8002862:	e003      	b.n	800286c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002868:	2300      	movs	r3, #0
 800286a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800286c:	e030      	b.n	80028d0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	9300      	str	r3, [sp, #0]
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	2200      	movs	r2, #0
 8002876:	2180      	movs	r1, #128	; 0x80
 8002878:	68f8      	ldr	r0, [r7, #12]
 800287a:	f000 feb1 	bl	80035e0 <UART_WaitOnFlagUntilTimeout>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d004      	beq.n	800288e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2220      	movs	r2, #32
 8002888:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e03c      	b.n	8002908 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10b      	bne.n	80028ac <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	881a      	ldrh	r2, [r3, #0]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028a0:	b292      	uxth	r2, r2
 80028a2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	3302      	adds	r3, #2
 80028a8:	61bb      	str	r3, [r7, #24]
 80028aa:	e008      	b.n	80028be <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	781a      	ldrb	r2, [r3, #0]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	b292      	uxth	r2, r2
 80028b6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	3301      	adds	r3, #1
 80028bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	3b01      	subs	r3, #1
 80028c8:	b29a      	uxth	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1c8      	bne.n	800286e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	9300      	str	r3, [sp, #0]
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	2200      	movs	r2, #0
 80028e4:	2140      	movs	r1, #64	; 0x40
 80028e6:	68f8      	ldr	r0, [r7, #12]
 80028e8:	f000 fe7a 	bl	80035e0 <UART_WaitOnFlagUntilTimeout>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d004      	beq.n	80028fc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2220      	movs	r2, #32
 80028f6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e005      	b.n	8002908 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2220      	movs	r2, #32
 8002900:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002902:	2300      	movs	r3, #0
 8002904:	e000      	b.n	8002908 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002906:	2302      	movs	r3, #2
  }
}
 8002908:	4618      	mov	r0, r3
 800290a:	3720      	adds	r7, #32
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b08a      	sub	sp, #40	; 0x28
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	4613      	mov	r3, r2
 800291c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002924:	2b20      	cmp	r3, #32
 8002926:	d132      	bne.n	800298e <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d002      	beq.n	8002934 <HAL_UART_Receive_IT+0x24>
 800292e:	88fb      	ldrh	r3, [r7, #6]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d101      	bne.n	8002938 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e02b      	b.n	8002990 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2200      	movs	r2, #0
 800293c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d018      	beq.n	800297e <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	e853 3f00 	ldrex	r3, [r3]
 8002958:	613b      	str	r3, [r7, #16]
   return(result);
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002960:	627b      	str	r3, [r7, #36]	; 0x24
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	461a      	mov	r2, r3
 8002968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296a:	623b      	str	r3, [r7, #32]
 800296c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800296e:	69f9      	ldr	r1, [r7, #28]
 8002970:	6a3a      	ldr	r2, [r7, #32]
 8002972:	e841 2300 	strex	r3, r2, [r1]
 8002976:	61bb      	str	r3, [r7, #24]
   return(result);
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1e6      	bne.n	800294c <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800297e:	88fb      	ldrh	r3, [r7, #6]
 8002980:	461a      	mov	r2, r3
 8002982:	68b9      	ldr	r1, [r7, #8]
 8002984:	68f8      	ldr	r0, [r7, #12]
 8002986:	f000 fe99 	bl	80036bc <UART_Start_Receive_IT>
 800298a:	4603      	mov	r3, r0
 800298c:	e000      	b.n	8002990 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800298e:	2302      	movs	r3, #2
  }
}
 8002990:	4618      	mov	r0, r3
 8002992:	3728      	adds	r7, #40	; 0x28
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b0ba      	sub	sp, #232	; 0xe8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	69db      	ldr	r3, [r3, #28]
 80029a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80029be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80029c2:	f640 030f 	movw	r3, #2063	; 0x80f
 80029c6:	4013      	ands	r3, r2
 80029c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80029cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d115      	bne.n	8002a00 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80029d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029d8:	f003 0320 	and.w	r3, r3, #32
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d00f      	beq.n	8002a00 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80029e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029e4:	f003 0320 	and.w	r3, r3, #32
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d009      	beq.n	8002a00 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 82ab 	beq.w	8002f4c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	4798      	blx	r3
      }
      return;
 80029fe:	e2a5      	b.n	8002f4c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002a00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f000 8117 	beq.w	8002c38 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002a0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d106      	bne.n	8002a24 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002a16:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002a1a:	4b85      	ldr	r3, [pc, #532]	; (8002c30 <HAL_UART_IRQHandler+0x298>)
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f000 810a 	beq.w	8002c38 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002a24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d011      	beq.n	8002a54 <HAL_UART_IRQHandler+0xbc>
 8002a30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00b      	beq.n	8002a54 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2201      	movs	r2, #1
 8002a42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a4a:	f043 0201 	orr.w	r2, r3, #1
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d011      	beq.n	8002a84 <HAL_UART_IRQHandler+0xec>
 8002a60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00b      	beq.n	8002a84 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2202      	movs	r2, #2
 8002a72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a7a:	f043 0204 	orr.w	r2, r3, #4
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a88:	f003 0304 	and.w	r3, r3, #4
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d011      	beq.n	8002ab4 <HAL_UART_IRQHandler+0x11c>
 8002a90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d00b      	beq.n	8002ab4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2204      	movs	r2, #4
 8002aa2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002aaa:	f043 0202 	orr.w	r2, r3, #2
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002ab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ab8:	f003 0308 	and.w	r3, r3, #8
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d017      	beq.n	8002af0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002ac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ac4:	f003 0320 	and.w	r3, r3, #32
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d105      	bne.n	8002ad8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002acc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ad0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d00b      	beq.n	8002af0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2208      	movs	r2, #8
 8002ade:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ae6:	f043 0208 	orr.w	r2, r3, #8
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002af0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002af4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d012      	beq.n	8002b22 <HAL_UART_IRQHandler+0x18a>
 8002afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00c      	beq.n	8002b22 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b18:	f043 0220 	orr.w	r2, r3, #32
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f000 8211 	beq.w	8002f50 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b32:	f003 0320 	and.w	r3, r3, #32
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00d      	beq.n	8002b56 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002b3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b3e:	f003 0320 	and.w	r3, r3, #32
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d007      	beq.n	8002b56 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b6a:	2b40      	cmp	r3, #64	; 0x40
 8002b6c:	d005      	beq.n	8002b7a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002b6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b72:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d04f      	beq.n	8002c1a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 fe52 	bl	8003824 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b8a:	2b40      	cmp	r3, #64	; 0x40
 8002b8c:	d141      	bne.n	8002c12 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	3308      	adds	r3, #8
 8002b94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b9c:	e853 3f00 	ldrex	r3, [r3]
 8002ba0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002ba4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ba8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	3308      	adds	r3, #8
 8002bb6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002bba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002bbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bc2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002bc6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002bca:	e841 2300 	strex	r3, r2, [r1]
 8002bce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002bd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1d9      	bne.n	8002b8e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d013      	beq.n	8002c0a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002be6:	4a13      	ldr	r2, [pc, #76]	; (8002c34 <HAL_UART_IRQHandler+0x29c>)
 8002be8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7fd ffbf 	bl	8000b72 <HAL_DMA_Abort_IT>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d017      	beq.n	8002c2a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002c04:	4610      	mov	r0, r2
 8002c06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c08:	e00f      	b.n	8002c2a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 f9b4 	bl	8002f78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c10:	e00b      	b.n	8002c2a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 f9b0 	bl	8002f78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c18:	e007      	b.n	8002c2a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 f9ac 	bl	8002f78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002c28:	e192      	b.n	8002f50 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c2a:	bf00      	nop
    return;
 8002c2c:	e190      	b.n	8002f50 <HAL_UART_IRQHandler+0x5b8>
 8002c2e:	bf00      	nop
 8002c30:	04000120 	.word	0x04000120
 8002c34:	080038ed 	.word	0x080038ed

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	f040 814b 	bne.w	8002ed8 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c46:	f003 0310 	and.w	r3, r3, #16
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f000 8144 	beq.w	8002ed8 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002c50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c54:	f003 0310 	and.w	r3, r3, #16
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 813d 	beq.w	8002ed8 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2210      	movs	r2, #16
 8002c64:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c70:	2b40      	cmp	r3, #64	; 0x40
 8002c72:	f040 80b5 	bne.w	8002de0 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002c82:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f000 8164 	beq.w	8002f54 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002c92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c96:	429a      	cmp	r2, r3
 8002c98:	f080 815c 	bcs.w	8002f54 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002ca2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	2b20      	cmp	r3, #32
 8002cae:	f000 8086 	beq.w	8002dbe <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002cbe:	e853 3f00 	ldrex	r3, [r3]
 8002cc2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002cc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002cca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002cdc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002ce0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ce4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002ce8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002cec:	e841 2300 	strex	r3, r2, [r1]
 8002cf0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002cf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d1da      	bne.n	8002cb2 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	3308      	adds	r3, #8
 8002d02:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d06:	e853 3f00 	ldrex	r3, [r3]
 8002d0a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002d0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d0e:	f023 0301 	bic.w	r3, r3, #1
 8002d12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	3308      	adds	r3, #8
 8002d1c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002d20:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002d24:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d26:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002d28:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002d2c:	e841 2300 	strex	r3, r2, [r1]
 8002d30:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002d32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1e1      	bne.n	8002cfc <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	3308      	adds	r3, #8
 8002d3e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d42:	e853 3f00 	ldrex	r3, [r3]
 8002d46:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002d48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	3308      	adds	r3, #8
 8002d58:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002d5c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002d5e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d60:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002d62:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d64:	e841 2300 	strex	r3, r2, [r1]
 8002d68:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002d6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d1e3      	bne.n	8002d38 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2220      	movs	r2, #32
 8002d74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d86:	e853 3f00 	ldrex	r3, [r3]
 8002d8a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002d8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d8e:	f023 0310 	bic.w	r3, r3, #16
 8002d92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002da0:	65bb      	str	r3, [r7, #88]	; 0x58
 8002da2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002da4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002da6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002da8:	e841 2300 	strex	r3, r2, [r1]
 8002dac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002dae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d1e4      	bne.n	8002d7e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7fd fe9c 	bl	8000af6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2202      	movs	r2, #2
 8002dc2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f000 f8d7 	bl	8002f8c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002dde:	e0b9      	b.n	8002f54 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	f000 80ab 	beq.w	8002f58 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8002e02:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f000 80a6 	beq.w	8002f58 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e14:	e853 3f00 	ldrex	r3, [r3]
 8002e18:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	461a      	mov	r2, r3
 8002e2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002e2e:	647b      	str	r3, [r7, #68]	; 0x44
 8002e30:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e32:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002e34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e36:	e841 2300 	strex	r3, r2, [r1]
 8002e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002e3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d1e4      	bne.n	8002e0c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	3308      	adds	r3, #8
 8002e48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4c:	e853 3f00 	ldrex	r3, [r3]
 8002e50:	623b      	str	r3, [r7, #32]
   return(result);
 8002e52:	6a3b      	ldr	r3, [r7, #32]
 8002e54:	f023 0301 	bic.w	r3, r3, #1
 8002e58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	3308      	adds	r3, #8
 8002e62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002e66:	633a      	str	r2, [r7, #48]	; 0x30
 8002e68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e6e:	e841 2300 	strex	r3, r2, [r1]
 8002e72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1e3      	bne.n	8002e42 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2220      	movs	r2, #32
 8002e7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	e853 3f00 	ldrex	r3, [r3]
 8002e9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f023 0310 	bic.w	r3, r3, #16
 8002ea2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	461a      	mov	r2, r3
 8002eac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002eb0:	61fb      	str	r3, [r7, #28]
 8002eb2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eb4:	69b9      	ldr	r1, [r7, #24]
 8002eb6:	69fa      	ldr	r2, [r7, #28]
 8002eb8:	e841 2300 	strex	r3, r2, [r1]
 8002ebc:	617b      	str	r3, [r7, #20]
   return(result);
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1e4      	bne.n	8002e8e <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002eca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ece:	4619      	mov	r1, r3
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 f85b 	bl	8002f8c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002ed6:	e03f      	b.n	8002f58 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002edc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00e      	beq.n	8002f02 <HAL_UART_IRQHandler+0x56a>
 8002ee4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ee8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d008      	beq.n	8002f02 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002ef8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 fede 	bl	8003cbc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002f00:	e02d      	b.n	8002f5e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00e      	beq.n	8002f2c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002f0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d008      	beq.n	8002f2c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d01c      	beq.n	8002f5c <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	4798      	blx	r3
    }
    return;
 8002f2a:	e017      	b.n	8002f5c <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d012      	beq.n	8002f5e <HAL_UART_IRQHandler+0x5c6>
 8002f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00c      	beq.n	8002f5e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 fce7 	bl	8003918 <UART_EndTransmit_IT>
    return;
 8002f4a:	e008      	b.n	8002f5e <HAL_UART_IRQHandler+0x5c6>
      return;
 8002f4c:	bf00      	nop
 8002f4e:	e006      	b.n	8002f5e <HAL_UART_IRQHandler+0x5c6>
    return;
 8002f50:	bf00      	nop
 8002f52:	e004      	b.n	8002f5e <HAL_UART_IRQHandler+0x5c6>
      return;
 8002f54:	bf00      	nop
 8002f56:	e002      	b.n	8002f5e <HAL_UART_IRQHandler+0x5c6>
      return;
 8002f58:	bf00      	nop
 8002f5a:	e000      	b.n	8002f5e <HAL_UART_IRQHandler+0x5c6>
    return;
 8002f5c:	bf00      	nop
  }

}
 8002f5e:	37e8      	adds	r7, #232	; 0xe8
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	460b      	mov	r3, r1
 8002f96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f98:	bf00      	nop
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b088      	sub	sp, #32
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fac:	2300      	movs	r3, #0
 8002fae:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	431a      	orrs	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	69db      	ldr	r3, [r3, #28]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002fd2:	f023 030c 	bic.w	r3, r3, #12
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	6812      	ldr	r2, [r2, #0]
 8002fda:	6979      	ldr	r1, [r7, #20]
 8002fdc:	430b      	orrs	r3, r1
 8002fde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	68da      	ldr	r2, [r3, #12]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a1b      	ldr	r3, [r3, #32]
 8003000:	697a      	ldr	r2, [r7, #20]
 8003002:	4313      	orrs	r3, r2
 8003004:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	697a      	ldr	r2, [r7, #20]
 8003016:	430a      	orrs	r2, r1
 8003018:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4aa7      	ldr	r2, [pc, #668]	; (80032bc <UART_SetConfig+0x318>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d120      	bne.n	8003066 <UART_SetConfig+0xc2>
 8003024:	4ba6      	ldr	r3, [pc, #664]	; (80032c0 <UART_SetConfig+0x31c>)
 8003026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003028:	f003 0303 	and.w	r3, r3, #3
 800302c:	2b03      	cmp	r3, #3
 800302e:	d817      	bhi.n	8003060 <UART_SetConfig+0xbc>
 8003030:	a201      	add	r2, pc, #4	; (adr r2, 8003038 <UART_SetConfig+0x94>)
 8003032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003036:	bf00      	nop
 8003038:	08003049 	.word	0x08003049
 800303c:	08003055 	.word	0x08003055
 8003040:	0800305b 	.word	0x0800305b
 8003044:	0800304f 	.word	0x0800304f
 8003048:	2301      	movs	r3, #1
 800304a:	77fb      	strb	r3, [r7, #31]
 800304c:	e0b5      	b.n	80031ba <UART_SetConfig+0x216>
 800304e:	2302      	movs	r3, #2
 8003050:	77fb      	strb	r3, [r7, #31]
 8003052:	e0b2      	b.n	80031ba <UART_SetConfig+0x216>
 8003054:	2304      	movs	r3, #4
 8003056:	77fb      	strb	r3, [r7, #31]
 8003058:	e0af      	b.n	80031ba <UART_SetConfig+0x216>
 800305a:	2308      	movs	r3, #8
 800305c:	77fb      	strb	r3, [r7, #31]
 800305e:	e0ac      	b.n	80031ba <UART_SetConfig+0x216>
 8003060:	2310      	movs	r3, #16
 8003062:	77fb      	strb	r3, [r7, #31]
 8003064:	e0a9      	b.n	80031ba <UART_SetConfig+0x216>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a96      	ldr	r2, [pc, #600]	; (80032c4 <UART_SetConfig+0x320>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d124      	bne.n	80030ba <UART_SetConfig+0x116>
 8003070:	4b93      	ldr	r3, [pc, #588]	; (80032c0 <UART_SetConfig+0x31c>)
 8003072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003074:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003078:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800307c:	d011      	beq.n	80030a2 <UART_SetConfig+0xfe>
 800307e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003082:	d817      	bhi.n	80030b4 <UART_SetConfig+0x110>
 8003084:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003088:	d011      	beq.n	80030ae <UART_SetConfig+0x10a>
 800308a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800308e:	d811      	bhi.n	80030b4 <UART_SetConfig+0x110>
 8003090:	2b00      	cmp	r3, #0
 8003092:	d003      	beq.n	800309c <UART_SetConfig+0xf8>
 8003094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003098:	d006      	beq.n	80030a8 <UART_SetConfig+0x104>
 800309a:	e00b      	b.n	80030b4 <UART_SetConfig+0x110>
 800309c:	2300      	movs	r3, #0
 800309e:	77fb      	strb	r3, [r7, #31]
 80030a0:	e08b      	b.n	80031ba <UART_SetConfig+0x216>
 80030a2:	2302      	movs	r3, #2
 80030a4:	77fb      	strb	r3, [r7, #31]
 80030a6:	e088      	b.n	80031ba <UART_SetConfig+0x216>
 80030a8:	2304      	movs	r3, #4
 80030aa:	77fb      	strb	r3, [r7, #31]
 80030ac:	e085      	b.n	80031ba <UART_SetConfig+0x216>
 80030ae:	2308      	movs	r3, #8
 80030b0:	77fb      	strb	r3, [r7, #31]
 80030b2:	e082      	b.n	80031ba <UART_SetConfig+0x216>
 80030b4:	2310      	movs	r3, #16
 80030b6:	77fb      	strb	r3, [r7, #31]
 80030b8:	e07f      	b.n	80031ba <UART_SetConfig+0x216>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a82      	ldr	r2, [pc, #520]	; (80032c8 <UART_SetConfig+0x324>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d124      	bne.n	800310e <UART_SetConfig+0x16a>
 80030c4:	4b7e      	ldr	r3, [pc, #504]	; (80032c0 <UART_SetConfig+0x31c>)
 80030c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80030cc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80030d0:	d011      	beq.n	80030f6 <UART_SetConfig+0x152>
 80030d2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80030d6:	d817      	bhi.n	8003108 <UART_SetConfig+0x164>
 80030d8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80030dc:	d011      	beq.n	8003102 <UART_SetConfig+0x15e>
 80030de:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80030e2:	d811      	bhi.n	8003108 <UART_SetConfig+0x164>
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d003      	beq.n	80030f0 <UART_SetConfig+0x14c>
 80030e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80030ec:	d006      	beq.n	80030fc <UART_SetConfig+0x158>
 80030ee:	e00b      	b.n	8003108 <UART_SetConfig+0x164>
 80030f0:	2300      	movs	r3, #0
 80030f2:	77fb      	strb	r3, [r7, #31]
 80030f4:	e061      	b.n	80031ba <UART_SetConfig+0x216>
 80030f6:	2302      	movs	r3, #2
 80030f8:	77fb      	strb	r3, [r7, #31]
 80030fa:	e05e      	b.n	80031ba <UART_SetConfig+0x216>
 80030fc:	2304      	movs	r3, #4
 80030fe:	77fb      	strb	r3, [r7, #31]
 8003100:	e05b      	b.n	80031ba <UART_SetConfig+0x216>
 8003102:	2308      	movs	r3, #8
 8003104:	77fb      	strb	r3, [r7, #31]
 8003106:	e058      	b.n	80031ba <UART_SetConfig+0x216>
 8003108:	2310      	movs	r3, #16
 800310a:	77fb      	strb	r3, [r7, #31]
 800310c:	e055      	b.n	80031ba <UART_SetConfig+0x216>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a6e      	ldr	r2, [pc, #440]	; (80032cc <UART_SetConfig+0x328>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d124      	bne.n	8003162 <UART_SetConfig+0x1be>
 8003118:	4b69      	ldr	r3, [pc, #420]	; (80032c0 <UART_SetConfig+0x31c>)
 800311a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003120:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003124:	d011      	beq.n	800314a <UART_SetConfig+0x1a6>
 8003126:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800312a:	d817      	bhi.n	800315c <UART_SetConfig+0x1b8>
 800312c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003130:	d011      	beq.n	8003156 <UART_SetConfig+0x1b2>
 8003132:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003136:	d811      	bhi.n	800315c <UART_SetConfig+0x1b8>
 8003138:	2b00      	cmp	r3, #0
 800313a:	d003      	beq.n	8003144 <UART_SetConfig+0x1a0>
 800313c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003140:	d006      	beq.n	8003150 <UART_SetConfig+0x1ac>
 8003142:	e00b      	b.n	800315c <UART_SetConfig+0x1b8>
 8003144:	2300      	movs	r3, #0
 8003146:	77fb      	strb	r3, [r7, #31]
 8003148:	e037      	b.n	80031ba <UART_SetConfig+0x216>
 800314a:	2302      	movs	r3, #2
 800314c:	77fb      	strb	r3, [r7, #31]
 800314e:	e034      	b.n	80031ba <UART_SetConfig+0x216>
 8003150:	2304      	movs	r3, #4
 8003152:	77fb      	strb	r3, [r7, #31]
 8003154:	e031      	b.n	80031ba <UART_SetConfig+0x216>
 8003156:	2308      	movs	r3, #8
 8003158:	77fb      	strb	r3, [r7, #31]
 800315a:	e02e      	b.n	80031ba <UART_SetConfig+0x216>
 800315c:	2310      	movs	r3, #16
 800315e:	77fb      	strb	r3, [r7, #31]
 8003160:	e02b      	b.n	80031ba <UART_SetConfig+0x216>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a5a      	ldr	r2, [pc, #360]	; (80032d0 <UART_SetConfig+0x32c>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d124      	bne.n	80031b6 <UART_SetConfig+0x212>
 800316c:	4b54      	ldr	r3, [pc, #336]	; (80032c0 <UART_SetConfig+0x31c>)
 800316e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003170:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003174:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003178:	d011      	beq.n	800319e <UART_SetConfig+0x1fa>
 800317a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800317e:	d817      	bhi.n	80031b0 <UART_SetConfig+0x20c>
 8003180:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003184:	d011      	beq.n	80031aa <UART_SetConfig+0x206>
 8003186:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800318a:	d811      	bhi.n	80031b0 <UART_SetConfig+0x20c>
 800318c:	2b00      	cmp	r3, #0
 800318e:	d003      	beq.n	8003198 <UART_SetConfig+0x1f4>
 8003190:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003194:	d006      	beq.n	80031a4 <UART_SetConfig+0x200>
 8003196:	e00b      	b.n	80031b0 <UART_SetConfig+0x20c>
 8003198:	2300      	movs	r3, #0
 800319a:	77fb      	strb	r3, [r7, #31]
 800319c:	e00d      	b.n	80031ba <UART_SetConfig+0x216>
 800319e:	2302      	movs	r3, #2
 80031a0:	77fb      	strb	r3, [r7, #31]
 80031a2:	e00a      	b.n	80031ba <UART_SetConfig+0x216>
 80031a4:	2304      	movs	r3, #4
 80031a6:	77fb      	strb	r3, [r7, #31]
 80031a8:	e007      	b.n	80031ba <UART_SetConfig+0x216>
 80031aa:	2308      	movs	r3, #8
 80031ac:	77fb      	strb	r3, [r7, #31]
 80031ae:	e004      	b.n	80031ba <UART_SetConfig+0x216>
 80031b0:	2310      	movs	r3, #16
 80031b2:	77fb      	strb	r3, [r7, #31]
 80031b4:	e001      	b.n	80031ba <UART_SetConfig+0x216>
 80031b6:	2310      	movs	r3, #16
 80031b8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031c2:	d15b      	bne.n	800327c <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 80031c4:	7ffb      	ldrb	r3, [r7, #31]
 80031c6:	2b08      	cmp	r3, #8
 80031c8:	d827      	bhi.n	800321a <UART_SetConfig+0x276>
 80031ca:	a201      	add	r2, pc, #4	; (adr r2, 80031d0 <UART_SetConfig+0x22c>)
 80031cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031d0:	080031f5 	.word	0x080031f5
 80031d4:	080031fd 	.word	0x080031fd
 80031d8:	08003205 	.word	0x08003205
 80031dc:	0800321b 	.word	0x0800321b
 80031e0:	0800320b 	.word	0x0800320b
 80031e4:	0800321b 	.word	0x0800321b
 80031e8:	0800321b 	.word	0x0800321b
 80031ec:	0800321b 	.word	0x0800321b
 80031f0:	08003213 	.word	0x08003213
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031f4:	f7ff f8c0 	bl	8002378 <HAL_RCC_GetPCLK1Freq>
 80031f8:	61b8      	str	r0, [r7, #24]
        break;
 80031fa:	e013      	b.n	8003224 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031fc:	f7ff f8de 	bl	80023bc <HAL_RCC_GetPCLK2Freq>
 8003200:	61b8      	str	r0, [r7, #24]
        break;
 8003202:	e00f      	b.n	8003224 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003204:	4b33      	ldr	r3, [pc, #204]	; (80032d4 <UART_SetConfig+0x330>)
 8003206:	61bb      	str	r3, [r7, #24]
        break;
 8003208:	e00c      	b.n	8003224 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800320a:	f7ff f855 	bl	80022b8 <HAL_RCC_GetSysClockFreq>
 800320e:	61b8      	str	r0, [r7, #24]
        break;
 8003210:	e008      	b.n	8003224 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003212:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003216:	61bb      	str	r3, [r7, #24]
        break;
 8003218:	e004      	b.n	8003224 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800321a:	2300      	movs	r3, #0
 800321c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	77bb      	strb	r3, [r7, #30]
        break;
 8003222:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	2b00      	cmp	r3, #0
 8003228:	f000 8082 	beq.w	8003330 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	005a      	lsls	r2, r3, #1
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	085b      	lsrs	r3, r3, #1
 8003236:	441a      	add	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003240:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	2b0f      	cmp	r3, #15
 8003246:	d916      	bls.n	8003276 <UART_SetConfig+0x2d2>
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800324e:	d212      	bcs.n	8003276 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	b29b      	uxth	r3, r3
 8003254:	f023 030f 	bic.w	r3, r3, #15
 8003258:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	085b      	lsrs	r3, r3, #1
 800325e:	b29b      	uxth	r3, r3
 8003260:	f003 0307 	and.w	r3, r3, #7
 8003264:	b29a      	uxth	r2, r3
 8003266:	89fb      	ldrh	r3, [r7, #14]
 8003268:	4313      	orrs	r3, r2
 800326a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	89fa      	ldrh	r2, [r7, #14]
 8003272:	60da      	str	r2, [r3, #12]
 8003274:	e05c      	b.n	8003330 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	77bb      	strb	r3, [r7, #30]
 800327a:	e059      	b.n	8003330 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800327c:	7ffb      	ldrb	r3, [r7, #31]
 800327e:	2b08      	cmp	r3, #8
 8003280:	d835      	bhi.n	80032ee <UART_SetConfig+0x34a>
 8003282:	a201      	add	r2, pc, #4	; (adr r2, 8003288 <UART_SetConfig+0x2e4>)
 8003284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003288:	080032ad 	.word	0x080032ad
 800328c:	080032b5 	.word	0x080032b5
 8003290:	080032d9 	.word	0x080032d9
 8003294:	080032ef 	.word	0x080032ef
 8003298:	080032df 	.word	0x080032df
 800329c:	080032ef 	.word	0x080032ef
 80032a0:	080032ef 	.word	0x080032ef
 80032a4:	080032ef 	.word	0x080032ef
 80032a8:	080032e7 	.word	0x080032e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032ac:	f7ff f864 	bl	8002378 <HAL_RCC_GetPCLK1Freq>
 80032b0:	61b8      	str	r0, [r7, #24]
        break;
 80032b2:	e021      	b.n	80032f8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032b4:	f7ff f882 	bl	80023bc <HAL_RCC_GetPCLK2Freq>
 80032b8:	61b8      	str	r0, [r7, #24]
        break;
 80032ba:	e01d      	b.n	80032f8 <UART_SetConfig+0x354>
 80032bc:	40013800 	.word	0x40013800
 80032c0:	40021000 	.word	0x40021000
 80032c4:	40004400 	.word	0x40004400
 80032c8:	40004800 	.word	0x40004800
 80032cc:	40004c00 	.word	0x40004c00
 80032d0:	40005000 	.word	0x40005000
 80032d4:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032d8:	4b1b      	ldr	r3, [pc, #108]	; (8003348 <UART_SetConfig+0x3a4>)
 80032da:	61bb      	str	r3, [r7, #24]
        break;
 80032dc:	e00c      	b.n	80032f8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032de:	f7fe ffeb 	bl	80022b8 <HAL_RCC_GetSysClockFreq>
 80032e2:	61b8      	str	r0, [r7, #24]
        break;
 80032e4:	e008      	b.n	80032f8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032ea:	61bb      	str	r3, [r7, #24]
        break;
 80032ec:	e004      	b.n	80032f8 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80032ee:	2300      	movs	r3, #0
 80032f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	77bb      	strb	r3, [r7, #30]
        break;
 80032f6:	bf00      	nop
    }

    if (pclk != 0U)
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d018      	beq.n	8003330 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	085a      	lsrs	r2, r3, #1
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	441a      	add	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003310:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	2b0f      	cmp	r3, #15
 8003316:	d909      	bls.n	800332c <UART_SetConfig+0x388>
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800331e:	d205      	bcs.n	800332c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	b29a      	uxth	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	60da      	str	r2, [r3, #12]
 800332a:	e001      	b.n	8003330 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800333c:	7fbb      	ldrb	r3, [r7, #30]
}
 800333e:	4618      	mov	r0, r3
 8003340:	3720      	adds	r7, #32
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	007a1200 	.word	0x007a1200

0800334c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003358:	f003 0308 	and.w	r3, r3, #8
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00a      	beq.n	8003376 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	430a      	orrs	r2, r1
 8003374:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00a      	beq.n	8003398 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	430a      	orrs	r2, r1
 8003396:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339c:	f003 0302 	and.w	r3, r3, #2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00a      	beq.n	80033ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	430a      	orrs	r2, r1
 80033b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033be:	f003 0304 	and.w	r3, r3, #4
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00a      	beq.n	80033dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	430a      	orrs	r2, r1
 80033da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e0:	f003 0310 	and.w	r3, r3, #16
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00a      	beq.n	80033fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	430a      	orrs	r2, r1
 80033fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003402:	f003 0320 	and.w	r3, r3, #32
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00a      	beq.n	8003420 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	430a      	orrs	r2, r1
 800341e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003428:	2b00      	cmp	r3, #0
 800342a:	d01a      	beq.n	8003462 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	430a      	orrs	r2, r1
 8003440:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800344a:	d10a      	bne.n	8003462 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	430a      	orrs	r2, r1
 8003460:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00a      	beq.n	8003484 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	430a      	orrs	r2, r1
 8003482:	605a      	str	r2, [r3, #4]
  }
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b098      	sub	sp, #96	; 0x60
 8003494:	af02      	add	r7, sp, #8
 8003496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034a0:	f7fd f9e8 	bl	8000874 <HAL_GetTick>
 80034a4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0308 	and.w	r3, r3, #8
 80034b0:	2b08      	cmp	r3, #8
 80034b2:	d12e      	bne.n	8003512 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034b8:	9300      	str	r3, [sp, #0]
 80034ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034bc:	2200      	movs	r2, #0
 80034be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 f88c 	bl	80035e0 <UART_WaitOnFlagUntilTimeout>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d021      	beq.n	8003512 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d6:	e853 3f00 	ldrex	r3, [r3]
 80034da:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80034dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034e2:	653b      	str	r3, [r7, #80]	; 0x50
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	461a      	mov	r2, r3
 80034ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034ec:	647b      	str	r3, [r7, #68]	; 0x44
 80034ee:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80034f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034f4:	e841 2300 	strex	r3, r2, [r1]
 80034f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80034fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1e6      	bne.n	80034ce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2220      	movs	r2, #32
 8003504:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e062      	b.n	80035d8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0304 	and.w	r3, r3, #4
 800351c:	2b04      	cmp	r3, #4
 800351e:	d149      	bne.n	80035b4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003520:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003528:	2200      	movs	r2, #0
 800352a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 f856 	bl	80035e0 <UART_WaitOnFlagUntilTimeout>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d03c      	beq.n	80035b4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003542:	e853 3f00 	ldrex	r3, [r3]
 8003546:	623b      	str	r3, [r7, #32]
   return(result);
 8003548:	6a3b      	ldr	r3, [r7, #32]
 800354a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800354e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	461a      	mov	r2, r3
 8003556:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003558:	633b      	str	r3, [r7, #48]	; 0x30
 800355a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800355c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800355e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003560:	e841 2300 	strex	r3, r2, [r1]
 8003564:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1e6      	bne.n	800353a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	3308      	adds	r3, #8
 8003572:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	e853 3f00 	ldrex	r3, [r3]
 800357a:	60fb      	str	r3, [r7, #12]
   return(result);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f023 0301 	bic.w	r3, r3, #1
 8003582:	64bb      	str	r3, [r7, #72]	; 0x48
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	3308      	adds	r3, #8
 800358a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800358c:	61fa      	str	r2, [r7, #28]
 800358e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003590:	69b9      	ldr	r1, [r7, #24]
 8003592:	69fa      	ldr	r2, [r7, #28]
 8003594:	e841 2300 	strex	r3, r2, [r1]
 8003598:	617b      	str	r3, [r7, #20]
   return(result);
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d1e5      	bne.n	800356c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2220      	movs	r2, #32
 80035a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e011      	b.n	80035d8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2220      	movs	r2, #32
 80035b8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2220      	movs	r2, #32
 80035be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3758      	adds	r7, #88	; 0x58
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	603b      	str	r3, [r7, #0]
 80035ec:	4613      	mov	r3, r2
 80035ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035f0:	e04f      	b.n	8003692 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f8:	d04b      	beq.n	8003692 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035fa:	f7fd f93b 	bl	8000874 <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	429a      	cmp	r2, r3
 8003608:	d302      	bcc.n	8003610 <UART_WaitOnFlagUntilTimeout+0x30>
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d101      	bne.n	8003614 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e04e      	b.n	80036b2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0304 	and.w	r3, r3, #4
 800361e:	2b00      	cmp	r3, #0
 8003620:	d037      	beq.n	8003692 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	2b80      	cmp	r3, #128	; 0x80
 8003626:	d034      	beq.n	8003692 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	2b40      	cmp	r3, #64	; 0x40
 800362c:	d031      	beq.n	8003692 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	69db      	ldr	r3, [r3, #28]
 8003634:	f003 0308 	and.w	r3, r3, #8
 8003638:	2b08      	cmp	r3, #8
 800363a:	d110      	bne.n	800365e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2208      	movs	r2, #8
 8003642:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f000 f8ed 	bl	8003824 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2208      	movs	r2, #8
 800364e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e029      	b.n	80036b2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	69db      	ldr	r3, [r3, #28]
 8003664:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003668:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800366c:	d111      	bne.n	8003692 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003676:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003678:	68f8      	ldr	r0, [r7, #12]
 800367a:	f000 f8d3 	bl	8003824 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2220      	movs	r2, #32
 8003682:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e00f      	b.n	80036b2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	69da      	ldr	r2, [r3, #28]
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	4013      	ands	r3, r2
 800369c:	68ba      	ldr	r2, [r7, #8]
 800369e:	429a      	cmp	r2, r3
 80036a0:	bf0c      	ite	eq
 80036a2:	2301      	moveq	r3, #1
 80036a4:	2300      	movne	r3, #0
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	461a      	mov	r2, r3
 80036aa:	79fb      	ldrb	r3, [r7, #7]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d0a0      	beq.n	80035f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
	...

080036bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036bc:	b480      	push	{r7}
 80036be:	b097      	sub	sp, #92	; 0x5c
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	4613      	mov	r3, r2
 80036c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	68ba      	ldr	r2, [r7, #8]
 80036ce:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	88fa      	ldrh	r2, [r7, #6]
 80036d4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	88fa      	ldrh	r2, [r7, #6]
 80036dc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036ee:	d10e      	bne.n	800370e <UART_Start_Receive_IT+0x52>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d105      	bne.n	8003704 <UART_Start_Receive_IT+0x48>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f240 12ff 	movw	r2, #511	; 0x1ff
 80036fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003702:	e01a      	b.n	800373a <UART_Start_Receive_IT+0x7e>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	22ff      	movs	r2, #255	; 0xff
 8003708:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800370c:	e015      	b.n	800373a <UART_Start_Receive_IT+0x7e>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d10d      	bne.n	8003732 <UART_Start_Receive_IT+0x76>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d104      	bne.n	8003728 <UART_Start_Receive_IT+0x6c>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	22ff      	movs	r2, #255	; 0xff
 8003722:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003726:	e008      	b.n	800373a <UART_Start_Receive_IT+0x7e>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	227f      	movs	r2, #127	; 0x7f
 800372c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003730:	e003      	b.n	800373a <UART_Start_Receive_IT+0x7e>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2222      	movs	r2, #34	; 0x22
 8003746:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	3308      	adds	r3, #8
 8003750:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003754:	e853 3f00 	ldrex	r3, [r3]
 8003758:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800375a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800375c:	f043 0301 	orr.w	r3, r3, #1
 8003760:	657b      	str	r3, [r7, #84]	; 0x54
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	3308      	adds	r3, #8
 8003768:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800376a:	64ba      	str	r2, [r7, #72]	; 0x48
 800376c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800376e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003770:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003772:	e841 2300 	strex	r3, r2, [r1]
 8003776:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003778:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1e5      	bne.n	800374a <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003786:	d107      	bne.n	8003798 <UART_Start_Receive_IT+0xdc>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d103      	bne.n	8003798 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	4a22      	ldr	r2, [pc, #136]	; (800381c <UART_Start_Receive_IT+0x160>)
 8003794:	669a      	str	r2, [r3, #104]	; 0x68
 8003796:	e002      	b.n	800379e <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	4a21      	ldr	r2, [pc, #132]	; (8003820 <UART_Start_Receive_IT+0x164>)
 800379c:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d019      	beq.n	80037da <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ae:	e853 3f00 	ldrex	r3, [r3]
 80037b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80037ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	461a      	mov	r2, r3
 80037c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037c4:	637b      	str	r3, [r7, #52]	; 0x34
 80037c6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037cc:	e841 2300 	strex	r3, r2, [r1]
 80037d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80037d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1e6      	bne.n	80037a6 <UART_Start_Receive_IT+0xea>
 80037d8:	e018      	b.n	800380c <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	e853 3f00 	ldrex	r3, [r3]
 80037e6:	613b      	str	r3, [r7, #16]
   return(result);
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	f043 0320 	orr.w	r3, r3, #32
 80037ee:	653b      	str	r3, [r7, #80]	; 0x50
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	461a      	mov	r2, r3
 80037f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037f8:	623b      	str	r3, [r7, #32]
 80037fa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037fc:	69f9      	ldr	r1, [r7, #28]
 80037fe:	6a3a      	ldr	r2, [r7, #32]
 8003800:	e841 2300 	strex	r3, r2, [r1]
 8003804:	61bb      	str	r3, [r7, #24]
   return(result);
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1e6      	bne.n	80037da <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	375c      	adds	r7, #92	; 0x5c
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	08003b15 	.word	0x08003b15
 8003820:	0800396d 	.word	0x0800396d

08003824 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003824:	b480      	push	{r7}
 8003826:	b095      	sub	sp, #84	; 0x54
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003834:	e853 3f00 	ldrex	r3, [r3]
 8003838:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800383a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003840:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	461a      	mov	r2, r3
 8003848:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800384a:	643b      	str	r3, [r7, #64]	; 0x40
 800384c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800384e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003850:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003852:	e841 2300 	strex	r3, r2, [r1]
 8003856:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1e6      	bne.n	800382c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	3308      	adds	r3, #8
 8003864:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003866:	6a3b      	ldr	r3, [r7, #32]
 8003868:	e853 3f00 	ldrex	r3, [r3]
 800386c:	61fb      	str	r3, [r7, #28]
   return(result);
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	f023 0301 	bic.w	r3, r3, #1
 8003874:	64bb      	str	r3, [r7, #72]	; 0x48
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	3308      	adds	r3, #8
 800387c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800387e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003880:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003882:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003886:	e841 2300 	strex	r3, r2, [r1]
 800388a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800388c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1e5      	bne.n	800385e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003896:	2b01      	cmp	r3, #1
 8003898:	d118      	bne.n	80038cc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	e853 3f00 	ldrex	r3, [r3]
 80038a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	f023 0310 	bic.w	r3, r3, #16
 80038ae:	647b      	str	r3, [r7, #68]	; 0x44
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	461a      	mov	r2, r3
 80038b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038b8:	61bb      	str	r3, [r7, #24]
 80038ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038bc:	6979      	ldr	r1, [r7, #20]
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	e841 2300 	strex	r3, r2, [r1]
 80038c4:	613b      	str	r3, [r7, #16]
   return(result);
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1e6      	bne.n	800389a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2220      	movs	r2, #32
 80038d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	669a      	str	r2, [r3, #104]	; 0x68
}
 80038e0:	bf00      	nop
 80038e2:	3754      	adds	r7, #84	; 0x54
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2200      	movs	r2, #0
 8003906:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	f7ff fb34 	bl	8002f78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003910:	bf00      	nop
 8003912:	3710      	adds	r7, #16
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b088      	sub	sp, #32
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	e853 3f00 	ldrex	r3, [r3]
 800392c:	60bb      	str	r3, [r7, #8]
   return(result);
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003934:	61fb      	str	r3, [r7, #28]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	461a      	mov	r2, r3
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	61bb      	str	r3, [r7, #24]
 8003940:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003942:	6979      	ldr	r1, [r7, #20]
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	e841 2300 	strex	r3, r2, [r1]
 800394a:	613b      	str	r3, [r7, #16]
   return(result);
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1e6      	bne.n	8003920 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2220      	movs	r2, #32
 8003956:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7ff fb00 	bl	8002f64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003964:	bf00      	nop
 8003966:	3720      	adds	r7, #32
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b09c      	sub	sp, #112	; 0x70
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800397a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003984:	2b22      	cmp	r3, #34	; 0x22
 8003986:	f040 80b9 	bne.w	8003afc <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003990:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003994:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003998:	b2d9      	uxtb	r1, r3
 800399a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800399e:	b2da      	uxtb	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a4:	400a      	ands	r2, r1
 80039a6:	b2d2      	uxtb	r2, r2
 80039a8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ae:	1c5a      	adds	r2, r3, #1
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	3b01      	subs	r3, #1
 80039be:	b29a      	uxth	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	f040 809c 	bne.w	8003b0c <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039dc:	e853 3f00 	ldrex	r3, [r3]
 80039e0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80039e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	461a      	mov	r2, r3
 80039f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80039f4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80039f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039fa:	e841 2300 	strex	r3, r2, [r1]
 80039fe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003a00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1e6      	bne.n	80039d4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	3308      	adds	r3, #8
 8003a0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a10:	e853 3f00 	ldrex	r3, [r3]
 8003a14:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a18:	f023 0301 	bic.w	r3, r3, #1
 8003a1c:	667b      	str	r3, [r7, #100]	; 0x64
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	3308      	adds	r3, #8
 8003a24:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003a26:	647a      	str	r2, [r7, #68]	; 0x44
 8003a28:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a2a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a2e:	e841 2300 	strex	r3, r2, [r1]
 8003a32:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1e5      	bne.n	8003a06 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2220      	movs	r2, #32
 8003a3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d018      	beq.n	8003a8e <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a64:	e853 3f00 	ldrex	r3, [r3]
 8003a68:	623b      	str	r3, [r7, #32]
   return(result);
 8003a6a:	6a3b      	ldr	r3, [r7, #32]
 8003a6c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a70:	663b      	str	r3, [r7, #96]	; 0x60
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	461a      	mov	r2, r3
 8003a78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a7a:	633b      	str	r3, [r7, #48]	; 0x30
 8003a7c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a82:	e841 2300 	strex	r3, r2, [r1]
 8003a86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1e6      	bne.n	8003a5c <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d12e      	bne.n	8003af4 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	e853 3f00 	ldrex	r3, [r3]
 8003aa8:	60fb      	str	r3, [r7, #12]
   return(result);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f023 0310 	bic.w	r3, r3, #16
 8003ab0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003aba:	61fb      	str	r3, [r7, #28]
 8003abc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003abe:	69b9      	ldr	r1, [r7, #24]
 8003ac0:	69fa      	ldr	r2, [r7, #28]
 8003ac2:	e841 2300 	strex	r3, r2, [r1]
 8003ac6:	617b      	str	r3, [r7, #20]
   return(result);
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1e6      	bne.n	8003a9c <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	69db      	ldr	r3, [r3, #28]
 8003ad4:	f003 0310 	and.w	r3, r3, #16
 8003ad8:	2b10      	cmp	r3, #16
 8003ada:	d103      	bne.n	8003ae4 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2210      	movs	r2, #16
 8003ae2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003aea:	4619      	mov	r1, r3
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f7ff fa4d 	bl	8002f8c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003af2:	e00b      	b.n	8003b0c <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f7fc fbd3 	bl	80002a0 <HAL_UART_RxCpltCallback>
}
 8003afa:	e007      	b.n	8003b0c <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	699a      	ldr	r2, [r3, #24]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f042 0208 	orr.w	r2, r2, #8
 8003b0a:	619a      	str	r2, [r3, #24]
}
 8003b0c:	bf00      	nop
 8003b0e:	3770      	adds	r7, #112	; 0x70
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b09c      	sub	sp, #112	; 0x70
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003b22:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b2c:	2b22      	cmp	r3, #34	; 0x22
 8003b2e:	f040 80b9 	bne.w	8003ca4 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003b38:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b40:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8003b42:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8003b46:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b50:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b56:	1c9a      	adds	r2, r3, #2
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	3b01      	subs	r3, #1
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f040 809c 	bne.w	8003cb4 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b84:	e853 3f00 	ldrex	r3, [r3]
 8003b88:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003b8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b90:	667b      	str	r3, [r7, #100]	; 0x64
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	461a      	mov	r2, r3
 8003b98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b9a:	657b      	str	r3, [r7, #84]	; 0x54
 8003b9c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b9e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003ba0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003ba2:	e841 2300 	strex	r3, r2, [r1]
 8003ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003ba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1e6      	bne.n	8003b7c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	3308      	adds	r3, #8
 8003bb4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bb8:	e853 3f00 	ldrex	r3, [r3]
 8003bbc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc0:	f023 0301 	bic.w	r3, r3, #1
 8003bc4:	663b      	str	r3, [r7, #96]	; 0x60
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	3308      	adds	r3, #8
 8003bcc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003bce:	643a      	str	r2, [r7, #64]	; 0x40
 8003bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003bd4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003bd6:	e841 2300 	strex	r3, r2, [r1]
 8003bda:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1e5      	bne.n	8003bae <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2220      	movs	r2, #32
 8003be6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d018      	beq.n	8003c36 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0a:	6a3b      	ldr	r3, [r7, #32]
 8003c0c:	e853 3f00 	ldrex	r3, [r3]
 8003c10:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	461a      	mov	r2, r3
 8003c20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c24:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c2a:	e841 2300 	strex	r3, r2, [r1]
 8003c2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1e6      	bne.n	8003c04 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d12e      	bne.n	8003c9c <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	e853 3f00 	ldrex	r3, [r3]
 8003c50:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	f023 0310 	bic.w	r3, r3, #16
 8003c58:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	461a      	mov	r2, r3
 8003c60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c62:	61bb      	str	r3, [r7, #24]
 8003c64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c66:	6979      	ldr	r1, [r7, #20]
 8003c68:	69ba      	ldr	r2, [r7, #24]
 8003c6a:	e841 2300 	strex	r3, r2, [r1]
 8003c6e:	613b      	str	r3, [r7, #16]
   return(result);
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1e6      	bne.n	8003c44 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	69db      	ldr	r3, [r3, #28]
 8003c7c:	f003 0310 	and.w	r3, r3, #16
 8003c80:	2b10      	cmp	r3, #16
 8003c82:	d103      	bne.n	8003c8c <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2210      	movs	r2, #16
 8003c8a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003c92:	4619      	mov	r1, r3
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f7ff f979 	bl	8002f8c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003c9a:	e00b      	b.n	8003cb4 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f7fc faff 	bl	80002a0 <HAL_UART_RxCpltCallback>
}
 8003ca2:	e007      	b.n	8003cb4 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	699a      	ldr	r2, [r3, #24]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f042 0208 	orr.w	r2, r2, #8
 8003cb2:	619a      	str	r2, [r3, #24]
}
 8003cb4:	bf00      	nop
 8003cb6:	3770      	adds	r7, #112	; 0x70
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <siprintf>:
 8003cd0:	b40e      	push	{r1, r2, r3}
 8003cd2:	b500      	push	{lr}
 8003cd4:	b09c      	sub	sp, #112	; 0x70
 8003cd6:	ab1d      	add	r3, sp, #116	; 0x74
 8003cd8:	9002      	str	r0, [sp, #8]
 8003cda:	9006      	str	r0, [sp, #24]
 8003cdc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003ce0:	4809      	ldr	r0, [pc, #36]	; (8003d08 <siprintf+0x38>)
 8003ce2:	9107      	str	r1, [sp, #28]
 8003ce4:	9104      	str	r1, [sp, #16]
 8003ce6:	4909      	ldr	r1, [pc, #36]	; (8003d0c <siprintf+0x3c>)
 8003ce8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003cec:	9105      	str	r1, [sp, #20]
 8003cee:	6800      	ldr	r0, [r0, #0]
 8003cf0:	9301      	str	r3, [sp, #4]
 8003cf2:	a902      	add	r1, sp, #8
 8003cf4:	f000 f992 	bl	800401c <_svfiprintf_r>
 8003cf8:	9b02      	ldr	r3, [sp, #8]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	701a      	strb	r2, [r3, #0]
 8003cfe:	b01c      	add	sp, #112	; 0x70
 8003d00:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d04:	b003      	add	sp, #12
 8003d06:	4770      	bx	lr
 8003d08:	20000058 	.word	0x20000058
 8003d0c:	ffff0208 	.word	0xffff0208

08003d10 <memset>:
 8003d10:	4402      	add	r2, r0
 8003d12:	4603      	mov	r3, r0
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d100      	bne.n	8003d1a <memset+0xa>
 8003d18:	4770      	bx	lr
 8003d1a:	f803 1b01 	strb.w	r1, [r3], #1
 8003d1e:	e7f9      	b.n	8003d14 <memset+0x4>

08003d20 <__errno>:
 8003d20:	4b01      	ldr	r3, [pc, #4]	; (8003d28 <__errno+0x8>)
 8003d22:	6818      	ldr	r0, [r3, #0]
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	20000058 	.word	0x20000058

08003d2c <__libc_init_array>:
 8003d2c:	b570      	push	{r4, r5, r6, lr}
 8003d2e:	4d0d      	ldr	r5, [pc, #52]	; (8003d64 <__libc_init_array+0x38>)
 8003d30:	4c0d      	ldr	r4, [pc, #52]	; (8003d68 <__libc_init_array+0x3c>)
 8003d32:	1b64      	subs	r4, r4, r5
 8003d34:	10a4      	asrs	r4, r4, #2
 8003d36:	2600      	movs	r6, #0
 8003d38:	42a6      	cmp	r6, r4
 8003d3a:	d109      	bne.n	8003d50 <__libc_init_array+0x24>
 8003d3c:	4d0b      	ldr	r5, [pc, #44]	; (8003d6c <__libc_init_array+0x40>)
 8003d3e:	4c0c      	ldr	r4, [pc, #48]	; (8003d70 <__libc_init_array+0x44>)
 8003d40:	f000 fc6a 	bl	8004618 <_init>
 8003d44:	1b64      	subs	r4, r4, r5
 8003d46:	10a4      	asrs	r4, r4, #2
 8003d48:	2600      	movs	r6, #0
 8003d4a:	42a6      	cmp	r6, r4
 8003d4c:	d105      	bne.n	8003d5a <__libc_init_array+0x2e>
 8003d4e:	bd70      	pop	{r4, r5, r6, pc}
 8003d50:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d54:	4798      	blx	r3
 8003d56:	3601      	adds	r6, #1
 8003d58:	e7ee      	b.n	8003d38 <__libc_init_array+0xc>
 8003d5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d5e:	4798      	blx	r3
 8003d60:	3601      	adds	r6, #1
 8003d62:	e7f2      	b.n	8003d4a <__libc_init_array+0x1e>
 8003d64:	080046b8 	.word	0x080046b8
 8003d68:	080046b8 	.word	0x080046b8
 8003d6c:	080046b8 	.word	0x080046b8
 8003d70:	080046bc 	.word	0x080046bc

08003d74 <__retarget_lock_acquire_recursive>:
 8003d74:	4770      	bx	lr

08003d76 <__retarget_lock_release_recursive>:
 8003d76:	4770      	bx	lr

08003d78 <_free_r>:
 8003d78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003d7a:	2900      	cmp	r1, #0
 8003d7c:	d044      	beq.n	8003e08 <_free_r+0x90>
 8003d7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d82:	9001      	str	r0, [sp, #4]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f1a1 0404 	sub.w	r4, r1, #4
 8003d8a:	bfb8      	it	lt
 8003d8c:	18e4      	addlt	r4, r4, r3
 8003d8e:	f000 f8df 	bl	8003f50 <__malloc_lock>
 8003d92:	4a1e      	ldr	r2, [pc, #120]	; (8003e0c <_free_r+0x94>)
 8003d94:	9801      	ldr	r0, [sp, #4]
 8003d96:	6813      	ldr	r3, [r2, #0]
 8003d98:	b933      	cbnz	r3, 8003da8 <_free_r+0x30>
 8003d9a:	6063      	str	r3, [r4, #4]
 8003d9c:	6014      	str	r4, [r2, #0]
 8003d9e:	b003      	add	sp, #12
 8003da0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003da4:	f000 b8da 	b.w	8003f5c <__malloc_unlock>
 8003da8:	42a3      	cmp	r3, r4
 8003daa:	d908      	bls.n	8003dbe <_free_r+0x46>
 8003dac:	6825      	ldr	r5, [r4, #0]
 8003dae:	1961      	adds	r1, r4, r5
 8003db0:	428b      	cmp	r3, r1
 8003db2:	bf01      	itttt	eq
 8003db4:	6819      	ldreq	r1, [r3, #0]
 8003db6:	685b      	ldreq	r3, [r3, #4]
 8003db8:	1949      	addeq	r1, r1, r5
 8003dba:	6021      	streq	r1, [r4, #0]
 8003dbc:	e7ed      	b.n	8003d9a <_free_r+0x22>
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	b10b      	cbz	r3, 8003dc8 <_free_r+0x50>
 8003dc4:	42a3      	cmp	r3, r4
 8003dc6:	d9fa      	bls.n	8003dbe <_free_r+0x46>
 8003dc8:	6811      	ldr	r1, [r2, #0]
 8003dca:	1855      	adds	r5, r2, r1
 8003dcc:	42a5      	cmp	r5, r4
 8003dce:	d10b      	bne.n	8003de8 <_free_r+0x70>
 8003dd0:	6824      	ldr	r4, [r4, #0]
 8003dd2:	4421      	add	r1, r4
 8003dd4:	1854      	adds	r4, r2, r1
 8003dd6:	42a3      	cmp	r3, r4
 8003dd8:	6011      	str	r1, [r2, #0]
 8003dda:	d1e0      	bne.n	8003d9e <_free_r+0x26>
 8003ddc:	681c      	ldr	r4, [r3, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	6053      	str	r3, [r2, #4]
 8003de2:	440c      	add	r4, r1
 8003de4:	6014      	str	r4, [r2, #0]
 8003de6:	e7da      	b.n	8003d9e <_free_r+0x26>
 8003de8:	d902      	bls.n	8003df0 <_free_r+0x78>
 8003dea:	230c      	movs	r3, #12
 8003dec:	6003      	str	r3, [r0, #0]
 8003dee:	e7d6      	b.n	8003d9e <_free_r+0x26>
 8003df0:	6825      	ldr	r5, [r4, #0]
 8003df2:	1961      	adds	r1, r4, r5
 8003df4:	428b      	cmp	r3, r1
 8003df6:	bf04      	itt	eq
 8003df8:	6819      	ldreq	r1, [r3, #0]
 8003dfa:	685b      	ldreq	r3, [r3, #4]
 8003dfc:	6063      	str	r3, [r4, #4]
 8003dfe:	bf04      	itt	eq
 8003e00:	1949      	addeq	r1, r1, r5
 8003e02:	6021      	streq	r1, [r4, #0]
 8003e04:	6054      	str	r4, [r2, #4]
 8003e06:	e7ca      	b.n	8003d9e <_free_r+0x26>
 8003e08:	b003      	add	sp, #12
 8003e0a:	bd30      	pop	{r4, r5, pc}
 8003e0c:	2000024c 	.word	0x2000024c

08003e10 <sbrk_aligned>:
 8003e10:	b570      	push	{r4, r5, r6, lr}
 8003e12:	4e0e      	ldr	r6, [pc, #56]	; (8003e4c <sbrk_aligned+0x3c>)
 8003e14:	460c      	mov	r4, r1
 8003e16:	6831      	ldr	r1, [r6, #0]
 8003e18:	4605      	mov	r5, r0
 8003e1a:	b911      	cbnz	r1, 8003e22 <sbrk_aligned+0x12>
 8003e1c:	f000 fba6 	bl	800456c <_sbrk_r>
 8003e20:	6030      	str	r0, [r6, #0]
 8003e22:	4621      	mov	r1, r4
 8003e24:	4628      	mov	r0, r5
 8003e26:	f000 fba1 	bl	800456c <_sbrk_r>
 8003e2a:	1c43      	adds	r3, r0, #1
 8003e2c:	d00a      	beq.n	8003e44 <sbrk_aligned+0x34>
 8003e2e:	1cc4      	adds	r4, r0, #3
 8003e30:	f024 0403 	bic.w	r4, r4, #3
 8003e34:	42a0      	cmp	r0, r4
 8003e36:	d007      	beq.n	8003e48 <sbrk_aligned+0x38>
 8003e38:	1a21      	subs	r1, r4, r0
 8003e3a:	4628      	mov	r0, r5
 8003e3c:	f000 fb96 	bl	800456c <_sbrk_r>
 8003e40:	3001      	adds	r0, #1
 8003e42:	d101      	bne.n	8003e48 <sbrk_aligned+0x38>
 8003e44:	f04f 34ff 	mov.w	r4, #4294967295
 8003e48:	4620      	mov	r0, r4
 8003e4a:	bd70      	pop	{r4, r5, r6, pc}
 8003e4c:	20000250 	.word	0x20000250

08003e50 <_malloc_r>:
 8003e50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e54:	1ccd      	adds	r5, r1, #3
 8003e56:	f025 0503 	bic.w	r5, r5, #3
 8003e5a:	3508      	adds	r5, #8
 8003e5c:	2d0c      	cmp	r5, #12
 8003e5e:	bf38      	it	cc
 8003e60:	250c      	movcc	r5, #12
 8003e62:	2d00      	cmp	r5, #0
 8003e64:	4607      	mov	r7, r0
 8003e66:	db01      	blt.n	8003e6c <_malloc_r+0x1c>
 8003e68:	42a9      	cmp	r1, r5
 8003e6a:	d905      	bls.n	8003e78 <_malloc_r+0x28>
 8003e6c:	230c      	movs	r3, #12
 8003e6e:	603b      	str	r3, [r7, #0]
 8003e70:	2600      	movs	r6, #0
 8003e72:	4630      	mov	r0, r6
 8003e74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e78:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003f4c <_malloc_r+0xfc>
 8003e7c:	f000 f868 	bl	8003f50 <__malloc_lock>
 8003e80:	f8d8 3000 	ldr.w	r3, [r8]
 8003e84:	461c      	mov	r4, r3
 8003e86:	bb5c      	cbnz	r4, 8003ee0 <_malloc_r+0x90>
 8003e88:	4629      	mov	r1, r5
 8003e8a:	4638      	mov	r0, r7
 8003e8c:	f7ff ffc0 	bl	8003e10 <sbrk_aligned>
 8003e90:	1c43      	adds	r3, r0, #1
 8003e92:	4604      	mov	r4, r0
 8003e94:	d155      	bne.n	8003f42 <_malloc_r+0xf2>
 8003e96:	f8d8 4000 	ldr.w	r4, [r8]
 8003e9a:	4626      	mov	r6, r4
 8003e9c:	2e00      	cmp	r6, #0
 8003e9e:	d145      	bne.n	8003f2c <_malloc_r+0xdc>
 8003ea0:	2c00      	cmp	r4, #0
 8003ea2:	d048      	beq.n	8003f36 <_malloc_r+0xe6>
 8003ea4:	6823      	ldr	r3, [r4, #0]
 8003ea6:	4631      	mov	r1, r6
 8003ea8:	4638      	mov	r0, r7
 8003eaa:	eb04 0903 	add.w	r9, r4, r3
 8003eae:	f000 fb5d 	bl	800456c <_sbrk_r>
 8003eb2:	4581      	cmp	r9, r0
 8003eb4:	d13f      	bne.n	8003f36 <_malloc_r+0xe6>
 8003eb6:	6821      	ldr	r1, [r4, #0]
 8003eb8:	1a6d      	subs	r5, r5, r1
 8003eba:	4629      	mov	r1, r5
 8003ebc:	4638      	mov	r0, r7
 8003ebe:	f7ff ffa7 	bl	8003e10 <sbrk_aligned>
 8003ec2:	3001      	adds	r0, #1
 8003ec4:	d037      	beq.n	8003f36 <_malloc_r+0xe6>
 8003ec6:	6823      	ldr	r3, [r4, #0]
 8003ec8:	442b      	add	r3, r5
 8003eca:	6023      	str	r3, [r4, #0]
 8003ecc:	f8d8 3000 	ldr.w	r3, [r8]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d038      	beq.n	8003f46 <_malloc_r+0xf6>
 8003ed4:	685a      	ldr	r2, [r3, #4]
 8003ed6:	42a2      	cmp	r2, r4
 8003ed8:	d12b      	bne.n	8003f32 <_malloc_r+0xe2>
 8003eda:	2200      	movs	r2, #0
 8003edc:	605a      	str	r2, [r3, #4]
 8003ede:	e00f      	b.n	8003f00 <_malloc_r+0xb0>
 8003ee0:	6822      	ldr	r2, [r4, #0]
 8003ee2:	1b52      	subs	r2, r2, r5
 8003ee4:	d41f      	bmi.n	8003f26 <_malloc_r+0xd6>
 8003ee6:	2a0b      	cmp	r2, #11
 8003ee8:	d917      	bls.n	8003f1a <_malloc_r+0xca>
 8003eea:	1961      	adds	r1, r4, r5
 8003eec:	42a3      	cmp	r3, r4
 8003eee:	6025      	str	r5, [r4, #0]
 8003ef0:	bf18      	it	ne
 8003ef2:	6059      	strne	r1, [r3, #4]
 8003ef4:	6863      	ldr	r3, [r4, #4]
 8003ef6:	bf08      	it	eq
 8003ef8:	f8c8 1000 	streq.w	r1, [r8]
 8003efc:	5162      	str	r2, [r4, r5]
 8003efe:	604b      	str	r3, [r1, #4]
 8003f00:	4638      	mov	r0, r7
 8003f02:	f104 060b 	add.w	r6, r4, #11
 8003f06:	f000 f829 	bl	8003f5c <__malloc_unlock>
 8003f0a:	f026 0607 	bic.w	r6, r6, #7
 8003f0e:	1d23      	adds	r3, r4, #4
 8003f10:	1af2      	subs	r2, r6, r3
 8003f12:	d0ae      	beq.n	8003e72 <_malloc_r+0x22>
 8003f14:	1b9b      	subs	r3, r3, r6
 8003f16:	50a3      	str	r3, [r4, r2]
 8003f18:	e7ab      	b.n	8003e72 <_malloc_r+0x22>
 8003f1a:	42a3      	cmp	r3, r4
 8003f1c:	6862      	ldr	r2, [r4, #4]
 8003f1e:	d1dd      	bne.n	8003edc <_malloc_r+0x8c>
 8003f20:	f8c8 2000 	str.w	r2, [r8]
 8003f24:	e7ec      	b.n	8003f00 <_malloc_r+0xb0>
 8003f26:	4623      	mov	r3, r4
 8003f28:	6864      	ldr	r4, [r4, #4]
 8003f2a:	e7ac      	b.n	8003e86 <_malloc_r+0x36>
 8003f2c:	4634      	mov	r4, r6
 8003f2e:	6876      	ldr	r6, [r6, #4]
 8003f30:	e7b4      	b.n	8003e9c <_malloc_r+0x4c>
 8003f32:	4613      	mov	r3, r2
 8003f34:	e7cc      	b.n	8003ed0 <_malloc_r+0x80>
 8003f36:	230c      	movs	r3, #12
 8003f38:	603b      	str	r3, [r7, #0]
 8003f3a:	4638      	mov	r0, r7
 8003f3c:	f000 f80e 	bl	8003f5c <__malloc_unlock>
 8003f40:	e797      	b.n	8003e72 <_malloc_r+0x22>
 8003f42:	6025      	str	r5, [r4, #0]
 8003f44:	e7dc      	b.n	8003f00 <_malloc_r+0xb0>
 8003f46:	605b      	str	r3, [r3, #4]
 8003f48:	deff      	udf	#255	; 0xff
 8003f4a:	bf00      	nop
 8003f4c:	2000024c 	.word	0x2000024c

08003f50 <__malloc_lock>:
 8003f50:	4801      	ldr	r0, [pc, #4]	; (8003f58 <__malloc_lock+0x8>)
 8003f52:	f7ff bf0f 	b.w	8003d74 <__retarget_lock_acquire_recursive>
 8003f56:	bf00      	nop
 8003f58:	20000248 	.word	0x20000248

08003f5c <__malloc_unlock>:
 8003f5c:	4801      	ldr	r0, [pc, #4]	; (8003f64 <__malloc_unlock+0x8>)
 8003f5e:	f7ff bf0a 	b.w	8003d76 <__retarget_lock_release_recursive>
 8003f62:	bf00      	nop
 8003f64:	20000248 	.word	0x20000248

08003f68 <__ssputs_r>:
 8003f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f6c:	688e      	ldr	r6, [r1, #8]
 8003f6e:	461f      	mov	r7, r3
 8003f70:	42be      	cmp	r6, r7
 8003f72:	680b      	ldr	r3, [r1, #0]
 8003f74:	4682      	mov	sl, r0
 8003f76:	460c      	mov	r4, r1
 8003f78:	4690      	mov	r8, r2
 8003f7a:	d82c      	bhi.n	8003fd6 <__ssputs_r+0x6e>
 8003f7c:	898a      	ldrh	r2, [r1, #12]
 8003f7e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003f82:	d026      	beq.n	8003fd2 <__ssputs_r+0x6a>
 8003f84:	6965      	ldr	r5, [r4, #20]
 8003f86:	6909      	ldr	r1, [r1, #16]
 8003f88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f8c:	eba3 0901 	sub.w	r9, r3, r1
 8003f90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f94:	1c7b      	adds	r3, r7, #1
 8003f96:	444b      	add	r3, r9
 8003f98:	106d      	asrs	r5, r5, #1
 8003f9a:	429d      	cmp	r5, r3
 8003f9c:	bf38      	it	cc
 8003f9e:	461d      	movcc	r5, r3
 8003fa0:	0553      	lsls	r3, r2, #21
 8003fa2:	d527      	bpl.n	8003ff4 <__ssputs_r+0x8c>
 8003fa4:	4629      	mov	r1, r5
 8003fa6:	f7ff ff53 	bl	8003e50 <_malloc_r>
 8003faa:	4606      	mov	r6, r0
 8003fac:	b360      	cbz	r0, 8004008 <__ssputs_r+0xa0>
 8003fae:	6921      	ldr	r1, [r4, #16]
 8003fb0:	464a      	mov	r2, r9
 8003fb2:	f000 faeb 	bl	800458c <memcpy>
 8003fb6:	89a3      	ldrh	r3, [r4, #12]
 8003fb8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fc0:	81a3      	strh	r3, [r4, #12]
 8003fc2:	6126      	str	r6, [r4, #16]
 8003fc4:	6165      	str	r5, [r4, #20]
 8003fc6:	444e      	add	r6, r9
 8003fc8:	eba5 0509 	sub.w	r5, r5, r9
 8003fcc:	6026      	str	r6, [r4, #0]
 8003fce:	60a5      	str	r5, [r4, #8]
 8003fd0:	463e      	mov	r6, r7
 8003fd2:	42be      	cmp	r6, r7
 8003fd4:	d900      	bls.n	8003fd8 <__ssputs_r+0x70>
 8003fd6:	463e      	mov	r6, r7
 8003fd8:	6820      	ldr	r0, [r4, #0]
 8003fda:	4632      	mov	r2, r6
 8003fdc:	4641      	mov	r1, r8
 8003fde:	f000 faab 	bl	8004538 <memmove>
 8003fe2:	68a3      	ldr	r3, [r4, #8]
 8003fe4:	1b9b      	subs	r3, r3, r6
 8003fe6:	60a3      	str	r3, [r4, #8]
 8003fe8:	6823      	ldr	r3, [r4, #0]
 8003fea:	4433      	add	r3, r6
 8003fec:	6023      	str	r3, [r4, #0]
 8003fee:	2000      	movs	r0, #0
 8003ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ff4:	462a      	mov	r2, r5
 8003ff6:	f000 fad7 	bl	80045a8 <_realloc_r>
 8003ffa:	4606      	mov	r6, r0
 8003ffc:	2800      	cmp	r0, #0
 8003ffe:	d1e0      	bne.n	8003fc2 <__ssputs_r+0x5a>
 8004000:	6921      	ldr	r1, [r4, #16]
 8004002:	4650      	mov	r0, sl
 8004004:	f7ff feb8 	bl	8003d78 <_free_r>
 8004008:	230c      	movs	r3, #12
 800400a:	f8ca 3000 	str.w	r3, [sl]
 800400e:	89a3      	ldrh	r3, [r4, #12]
 8004010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004014:	81a3      	strh	r3, [r4, #12]
 8004016:	f04f 30ff 	mov.w	r0, #4294967295
 800401a:	e7e9      	b.n	8003ff0 <__ssputs_r+0x88>

0800401c <_svfiprintf_r>:
 800401c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004020:	4698      	mov	r8, r3
 8004022:	898b      	ldrh	r3, [r1, #12]
 8004024:	061b      	lsls	r3, r3, #24
 8004026:	b09d      	sub	sp, #116	; 0x74
 8004028:	4607      	mov	r7, r0
 800402a:	460d      	mov	r5, r1
 800402c:	4614      	mov	r4, r2
 800402e:	d50e      	bpl.n	800404e <_svfiprintf_r+0x32>
 8004030:	690b      	ldr	r3, [r1, #16]
 8004032:	b963      	cbnz	r3, 800404e <_svfiprintf_r+0x32>
 8004034:	2140      	movs	r1, #64	; 0x40
 8004036:	f7ff ff0b 	bl	8003e50 <_malloc_r>
 800403a:	6028      	str	r0, [r5, #0]
 800403c:	6128      	str	r0, [r5, #16]
 800403e:	b920      	cbnz	r0, 800404a <_svfiprintf_r+0x2e>
 8004040:	230c      	movs	r3, #12
 8004042:	603b      	str	r3, [r7, #0]
 8004044:	f04f 30ff 	mov.w	r0, #4294967295
 8004048:	e0d0      	b.n	80041ec <_svfiprintf_r+0x1d0>
 800404a:	2340      	movs	r3, #64	; 0x40
 800404c:	616b      	str	r3, [r5, #20]
 800404e:	2300      	movs	r3, #0
 8004050:	9309      	str	r3, [sp, #36]	; 0x24
 8004052:	2320      	movs	r3, #32
 8004054:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004058:	f8cd 800c 	str.w	r8, [sp, #12]
 800405c:	2330      	movs	r3, #48	; 0x30
 800405e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004204 <_svfiprintf_r+0x1e8>
 8004062:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004066:	f04f 0901 	mov.w	r9, #1
 800406a:	4623      	mov	r3, r4
 800406c:	469a      	mov	sl, r3
 800406e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004072:	b10a      	cbz	r2, 8004078 <_svfiprintf_r+0x5c>
 8004074:	2a25      	cmp	r2, #37	; 0x25
 8004076:	d1f9      	bne.n	800406c <_svfiprintf_r+0x50>
 8004078:	ebba 0b04 	subs.w	fp, sl, r4
 800407c:	d00b      	beq.n	8004096 <_svfiprintf_r+0x7a>
 800407e:	465b      	mov	r3, fp
 8004080:	4622      	mov	r2, r4
 8004082:	4629      	mov	r1, r5
 8004084:	4638      	mov	r0, r7
 8004086:	f7ff ff6f 	bl	8003f68 <__ssputs_r>
 800408a:	3001      	adds	r0, #1
 800408c:	f000 80a9 	beq.w	80041e2 <_svfiprintf_r+0x1c6>
 8004090:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004092:	445a      	add	r2, fp
 8004094:	9209      	str	r2, [sp, #36]	; 0x24
 8004096:	f89a 3000 	ldrb.w	r3, [sl]
 800409a:	2b00      	cmp	r3, #0
 800409c:	f000 80a1 	beq.w	80041e2 <_svfiprintf_r+0x1c6>
 80040a0:	2300      	movs	r3, #0
 80040a2:	f04f 32ff 	mov.w	r2, #4294967295
 80040a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80040aa:	f10a 0a01 	add.w	sl, sl, #1
 80040ae:	9304      	str	r3, [sp, #16]
 80040b0:	9307      	str	r3, [sp, #28]
 80040b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80040b6:	931a      	str	r3, [sp, #104]	; 0x68
 80040b8:	4654      	mov	r4, sl
 80040ba:	2205      	movs	r2, #5
 80040bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040c0:	4850      	ldr	r0, [pc, #320]	; (8004204 <_svfiprintf_r+0x1e8>)
 80040c2:	f7fc f89d 	bl	8000200 <memchr>
 80040c6:	9a04      	ldr	r2, [sp, #16]
 80040c8:	b9d8      	cbnz	r0, 8004102 <_svfiprintf_r+0xe6>
 80040ca:	06d0      	lsls	r0, r2, #27
 80040cc:	bf44      	itt	mi
 80040ce:	2320      	movmi	r3, #32
 80040d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040d4:	0711      	lsls	r1, r2, #28
 80040d6:	bf44      	itt	mi
 80040d8:	232b      	movmi	r3, #43	; 0x2b
 80040da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040de:	f89a 3000 	ldrb.w	r3, [sl]
 80040e2:	2b2a      	cmp	r3, #42	; 0x2a
 80040e4:	d015      	beq.n	8004112 <_svfiprintf_r+0xf6>
 80040e6:	9a07      	ldr	r2, [sp, #28]
 80040e8:	4654      	mov	r4, sl
 80040ea:	2000      	movs	r0, #0
 80040ec:	f04f 0c0a 	mov.w	ip, #10
 80040f0:	4621      	mov	r1, r4
 80040f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040f6:	3b30      	subs	r3, #48	; 0x30
 80040f8:	2b09      	cmp	r3, #9
 80040fa:	d94d      	bls.n	8004198 <_svfiprintf_r+0x17c>
 80040fc:	b1b0      	cbz	r0, 800412c <_svfiprintf_r+0x110>
 80040fe:	9207      	str	r2, [sp, #28]
 8004100:	e014      	b.n	800412c <_svfiprintf_r+0x110>
 8004102:	eba0 0308 	sub.w	r3, r0, r8
 8004106:	fa09 f303 	lsl.w	r3, r9, r3
 800410a:	4313      	orrs	r3, r2
 800410c:	9304      	str	r3, [sp, #16]
 800410e:	46a2      	mov	sl, r4
 8004110:	e7d2      	b.n	80040b8 <_svfiprintf_r+0x9c>
 8004112:	9b03      	ldr	r3, [sp, #12]
 8004114:	1d19      	adds	r1, r3, #4
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	9103      	str	r1, [sp, #12]
 800411a:	2b00      	cmp	r3, #0
 800411c:	bfbb      	ittet	lt
 800411e:	425b      	neglt	r3, r3
 8004120:	f042 0202 	orrlt.w	r2, r2, #2
 8004124:	9307      	strge	r3, [sp, #28]
 8004126:	9307      	strlt	r3, [sp, #28]
 8004128:	bfb8      	it	lt
 800412a:	9204      	strlt	r2, [sp, #16]
 800412c:	7823      	ldrb	r3, [r4, #0]
 800412e:	2b2e      	cmp	r3, #46	; 0x2e
 8004130:	d10c      	bne.n	800414c <_svfiprintf_r+0x130>
 8004132:	7863      	ldrb	r3, [r4, #1]
 8004134:	2b2a      	cmp	r3, #42	; 0x2a
 8004136:	d134      	bne.n	80041a2 <_svfiprintf_r+0x186>
 8004138:	9b03      	ldr	r3, [sp, #12]
 800413a:	1d1a      	adds	r2, r3, #4
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	9203      	str	r2, [sp, #12]
 8004140:	2b00      	cmp	r3, #0
 8004142:	bfb8      	it	lt
 8004144:	f04f 33ff 	movlt.w	r3, #4294967295
 8004148:	3402      	adds	r4, #2
 800414a:	9305      	str	r3, [sp, #20]
 800414c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004214 <_svfiprintf_r+0x1f8>
 8004150:	7821      	ldrb	r1, [r4, #0]
 8004152:	2203      	movs	r2, #3
 8004154:	4650      	mov	r0, sl
 8004156:	f7fc f853 	bl	8000200 <memchr>
 800415a:	b138      	cbz	r0, 800416c <_svfiprintf_r+0x150>
 800415c:	9b04      	ldr	r3, [sp, #16]
 800415e:	eba0 000a 	sub.w	r0, r0, sl
 8004162:	2240      	movs	r2, #64	; 0x40
 8004164:	4082      	lsls	r2, r0
 8004166:	4313      	orrs	r3, r2
 8004168:	3401      	adds	r4, #1
 800416a:	9304      	str	r3, [sp, #16]
 800416c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004170:	4825      	ldr	r0, [pc, #148]	; (8004208 <_svfiprintf_r+0x1ec>)
 8004172:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004176:	2206      	movs	r2, #6
 8004178:	f7fc f842 	bl	8000200 <memchr>
 800417c:	2800      	cmp	r0, #0
 800417e:	d038      	beq.n	80041f2 <_svfiprintf_r+0x1d6>
 8004180:	4b22      	ldr	r3, [pc, #136]	; (800420c <_svfiprintf_r+0x1f0>)
 8004182:	bb1b      	cbnz	r3, 80041cc <_svfiprintf_r+0x1b0>
 8004184:	9b03      	ldr	r3, [sp, #12]
 8004186:	3307      	adds	r3, #7
 8004188:	f023 0307 	bic.w	r3, r3, #7
 800418c:	3308      	adds	r3, #8
 800418e:	9303      	str	r3, [sp, #12]
 8004190:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004192:	4433      	add	r3, r6
 8004194:	9309      	str	r3, [sp, #36]	; 0x24
 8004196:	e768      	b.n	800406a <_svfiprintf_r+0x4e>
 8004198:	fb0c 3202 	mla	r2, ip, r2, r3
 800419c:	460c      	mov	r4, r1
 800419e:	2001      	movs	r0, #1
 80041a0:	e7a6      	b.n	80040f0 <_svfiprintf_r+0xd4>
 80041a2:	2300      	movs	r3, #0
 80041a4:	3401      	adds	r4, #1
 80041a6:	9305      	str	r3, [sp, #20]
 80041a8:	4619      	mov	r1, r3
 80041aa:	f04f 0c0a 	mov.w	ip, #10
 80041ae:	4620      	mov	r0, r4
 80041b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041b4:	3a30      	subs	r2, #48	; 0x30
 80041b6:	2a09      	cmp	r2, #9
 80041b8:	d903      	bls.n	80041c2 <_svfiprintf_r+0x1a6>
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d0c6      	beq.n	800414c <_svfiprintf_r+0x130>
 80041be:	9105      	str	r1, [sp, #20]
 80041c0:	e7c4      	b.n	800414c <_svfiprintf_r+0x130>
 80041c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80041c6:	4604      	mov	r4, r0
 80041c8:	2301      	movs	r3, #1
 80041ca:	e7f0      	b.n	80041ae <_svfiprintf_r+0x192>
 80041cc:	ab03      	add	r3, sp, #12
 80041ce:	9300      	str	r3, [sp, #0]
 80041d0:	462a      	mov	r2, r5
 80041d2:	4b0f      	ldr	r3, [pc, #60]	; (8004210 <_svfiprintf_r+0x1f4>)
 80041d4:	a904      	add	r1, sp, #16
 80041d6:	4638      	mov	r0, r7
 80041d8:	f3af 8000 	nop.w
 80041dc:	1c42      	adds	r2, r0, #1
 80041de:	4606      	mov	r6, r0
 80041e0:	d1d6      	bne.n	8004190 <_svfiprintf_r+0x174>
 80041e2:	89ab      	ldrh	r3, [r5, #12]
 80041e4:	065b      	lsls	r3, r3, #25
 80041e6:	f53f af2d 	bmi.w	8004044 <_svfiprintf_r+0x28>
 80041ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80041ec:	b01d      	add	sp, #116	; 0x74
 80041ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041f2:	ab03      	add	r3, sp, #12
 80041f4:	9300      	str	r3, [sp, #0]
 80041f6:	462a      	mov	r2, r5
 80041f8:	4b05      	ldr	r3, [pc, #20]	; (8004210 <_svfiprintf_r+0x1f4>)
 80041fa:	a904      	add	r1, sp, #16
 80041fc:	4638      	mov	r0, r7
 80041fe:	f000 f879 	bl	80042f4 <_printf_i>
 8004202:	e7eb      	b.n	80041dc <_svfiprintf_r+0x1c0>
 8004204:	08004684 	.word	0x08004684
 8004208:	0800468e 	.word	0x0800468e
 800420c:	00000000 	.word	0x00000000
 8004210:	08003f69 	.word	0x08003f69
 8004214:	0800468a 	.word	0x0800468a

08004218 <_printf_common>:
 8004218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800421c:	4616      	mov	r6, r2
 800421e:	4699      	mov	r9, r3
 8004220:	688a      	ldr	r2, [r1, #8]
 8004222:	690b      	ldr	r3, [r1, #16]
 8004224:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004228:	4293      	cmp	r3, r2
 800422a:	bfb8      	it	lt
 800422c:	4613      	movlt	r3, r2
 800422e:	6033      	str	r3, [r6, #0]
 8004230:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004234:	4607      	mov	r7, r0
 8004236:	460c      	mov	r4, r1
 8004238:	b10a      	cbz	r2, 800423e <_printf_common+0x26>
 800423a:	3301      	adds	r3, #1
 800423c:	6033      	str	r3, [r6, #0]
 800423e:	6823      	ldr	r3, [r4, #0]
 8004240:	0699      	lsls	r1, r3, #26
 8004242:	bf42      	ittt	mi
 8004244:	6833      	ldrmi	r3, [r6, #0]
 8004246:	3302      	addmi	r3, #2
 8004248:	6033      	strmi	r3, [r6, #0]
 800424a:	6825      	ldr	r5, [r4, #0]
 800424c:	f015 0506 	ands.w	r5, r5, #6
 8004250:	d106      	bne.n	8004260 <_printf_common+0x48>
 8004252:	f104 0a19 	add.w	sl, r4, #25
 8004256:	68e3      	ldr	r3, [r4, #12]
 8004258:	6832      	ldr	r2, [r6, #0]
 800425a:	1a9b      	subs	r3, r3, r2
 800425c:	42ab      	cmp	r3, r5
 800425e:	dc26      	bgt.n	80042ae <_printf_common+0x96>
 8004260:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004264:	1e13      	subs	r3, r2, #0
 8004266:	6822      	ldr	r2, [r4, #0]
 8004268:	bf18      	it	ne
 800426a:	2301      	movne	r3, #1
 800426c:	0692      	lsls	r2, r2, #26
 800426e:	d42b      	bmi.n	80042c8 <_printf_common+0xb0>
 8004270:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004274:	4649      	mov	r1, r9
 8004276:	4638      	mov	r0, r7
 8004278:	47c0      	blx	r8
 800427a:	3001      	adds	r0, #1
 800427c:	d01e      	beq.n	80042bc <_printf_common+0xa4>
 800427e:	6823      	ldr	r3, [r4, #0]
 8004280:	6922      	ldr	r2, [r4, #16]
 8004282:	f003 0306 	and.w	r3, r3, #6
 8004286:	2b04      	cmp	r3, #4
 8004288:	bf02      	ittt	eq
 800428a:	68e5      	ldreq	r5, [r4, #12]
 800428c:	6833      	ldreq	r3, [r6, #0]
 800428e:	1aed      	subeq	r5, r5, r3
 8004290:	68a3      	ldr	r3, [r4, #8]
 8004292:	bf0c      	ite	eq
 8004294:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004298:	2500      	movne	r5, #0
 800429a:	4293      	cmp	r3, r2
 800429c:	bfc4      	itt	gt
 800429e:	1a9b      	subgt	r3, r3, r2
 80042a0:	18ed      	addgt	r5, r5, r3
 80042a2:	2600      	movs	r6, #0
 80042a4:	341a      	adds	r4, #26
 80042a6:	42b5      	cmp	r5, r6
 80042a8:	d11a      	bne.n	80042e0 <_printf_common+0xc8>
 80042aa:	2000      	movs	r0, #0
 80042ac:	e008      	b.n	80042c0 <_printf_common+0xa8>
 80042ae:	2301      	movs	r3, #1
 80042b0:	4652      	mov	r2, sl
 80042b2:	4649      	mov	r1, r9
 80042b4:	4638      	mov	r0, r7
 80042b6:	47c0      	blx	r8
 80042b8:	3001      	adds	r0, #1
 80042ba:	d103      	bne.n	80042c4 <_printf_common+0xac>
 80042bc:	f04f 30ff 	mov.w	r0, #4294967295
 80042c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042c4:	3501      	adds	r5, #1
 80042c6:	e7c6      	b.n	8004256 <_printf_common+0x3e>
 80042c8:	18e1      	adds	r1, r4, r3
 80042ca:	1c5a      	adds	r2, r3, #1
 80042cc:	2030      	movs	r0, #48	; 0x30
 80042ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80042d2:	4422      	add	r2, r4
 80042d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80042d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80042dc:	3302      	adds	r3, #2
 80042de:	e7c7      	b.n	8004270 <_printf_common+0x58>
 80042e0:	2301      	movs	r3, #1
 80042e2:	4622      	mov	r2, r4
 80042e4:	4649      	mov	r1, r9
 80042e6:	4638      	mov	r0, r7
 80042e8:	47c0      	blx	r8
 80042ea:	3001      	adds	r0, #1
 80042ec:	d0e6      	beq.n	80042bc <_printf_common+0xa4>
 80042ee:	3601      	adds	r6, #1
 80042f0:	e7d9      	b.n	80042a6 <_printf_common+0x8e>
	...

080042f4 <_printf_i>:
 80042f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042f8:	7e0f      	ldrb	r7, [r1, #24]
 80042fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80042fc:	2f78      	cmp	r7, #120	; 0x78
 80042fe:	4691      	mov	r9, r2
 8004300:	4680      	mov	r8, r0
 8004302:	460c      	mov	r4, r1
 8004304:	469a      	mov	sl, r3
 8004306:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800430a:	d807      	bhi.n	800431c <_printf_i+0x28>
 800430c:	2f62      	cmp	r7, #98	; 0x62
 800430e:	d80a      	bhi.n	8004326 <_printf_i+0x32>
 8004310:	2f00      	cmp	r7, #0
 8004312:	f000 80d4 	beq.w	80044be <_printf_i+0x1ca>
 8004316:	2f58      	cmp	r7, #88	; 0x58
 8004318:	f000 80c0 	beq.w	800449c <_printf_i+0x1a8>
 800431c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004320:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004324:	e03a      	b.n	800439c <_printf_i+0xa8>
 8004326:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800432a:	2b15      	cmp	r3, #21
 800432c:	d8f6      	bhi.n	800431c <_printf_i+0x28>
 800432e:	a101      	add	r1, pc, #4	; (adr r1, 8004334 <_printf_i+0x40>)
 8004330:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004334:	0800438d 	.word	0x0800438d
 8004338:	080043a1 	.word	0x080043a1
 800433c:	0800431d 	.word	0x0800431d
 8004340:	0800431d 	.word	0x0800431d
 8004344:	0800431d 	.word	0x0800431d
 8004348:	0800431d 	.word	0x0800431d
 800434c:	080043a1 	.word	0x080043a1
 8004350:	0800431d 	.word	0x0800431d
 8004354:	0800431d 	.word	0x0800431d
 8004358:	0800431d 	.word	0x0800431d
 800435c:	0800431d 	.word	0x0800431d
 8004360:	080044a5 	.word	0x080044a5
 8004364:	080043cd 	.word	0x080043cd
 8004368:	0800445f 	.word	0x0800445f
 800436c:	0800431d 	.word	0x0800431d
 8004370:	0800431d 	.word	0x0800431d
 8004374:	080044c7 	.word	0x080044c7
 8004378:	0800431d 	.word	0x0800431d
 800437c:	080043cd 	.word	0x080043cd
 8004380:	0800431d 	.word	0x0800431d
 8004384:	0800431d 	.word	0x0800431d
 8004388:	08004467 	.word	0x08004467
 800438c:	682b      	ldr	r3, [r5, #0]
 800438e:	1d1a      	adds	r2, r3, #4
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	602a      	str	r2, [r5, #0]
 8004394:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004398:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800439c:	2301      	movs	r3, #1
 800439e:	e09f      	b.n	80044e0 <_printf_i+0x1ec>
 80043a0:	6820      	ldr	r0, [r4, #0]
 80043a2:	682b      	ldr	r3, [r5, #0]
 80043a4:	0607      	lsls	r7, r0, #24
 80043a6:	f103 0104 	add.w	r1, r3, #4
 80043aa:	6029      	str	r1, [r5, #0]
 80043ac:	d501      	bpl.n	80043b2 <_printf_i+0xbe>
 80043ae:	681e      	ldr	r6, [r3, #0]
 80043b0:	e003      	b.n	80043ba <_printf_i+0xc6>
 80043b2:	0646      	lsls	r6, r0, #25
 80043b4:	d5fb      	bpl.n	80043ae <_printf_i+0xba>
 80043b6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80043ba:	2e00      	cmp	r6, #0
 80043bc:	da03      	bge.n	80043c6 <_printf_i+0xd2>
 80043be:	232d      	movs	r3, #45	; 0x2d
 80043c0:	4276      	negs	r6, r6
 80043c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043c6:	485a      	ldr	r0, [pc, #360]	; (8004530 <_printf_i+0x23c>)
 80043c8:	230a      	movs	r3, #10
 80043ca:	e012      	b.n	80043f2 <_printf_i+0xfe>
 80043cc:	682b      	ldr	r3, [r5, #0]
 80043ce:	6820      	ldr	r0, [r4, #0]
 80043d0:	1d19      	adds	r1, r3, #4
 80043d2:	6029      	str	r1, [r5, #0]
 80043d4:	0605      	lsls	r5, r0, #24
 80043d6:	d501      	bpl.n	80043dc <_printf_i+0xe8>
 80043d8:	681e      	ldr	r6, [r3, #0]
 80043da:	e002      	b.n	80043e2 <_printf_i+0xee>
 80043dc:	0641      	lsls	r1, r0, #25
 80043de:	d5fb      	bpl.n	80043d8 <_printf_i+0xe4>
 80043e0:	881e      	ldrh	r6, [r3, #0]
 80043e2:	4853      	ldr	r0, [pc, #332]	; (8004530 <_printf_i+0x23c>)
 80043e4:	2f6f      	cmp	r7, #111	; 0x6f
 80043e6:	bf0c      	ite	eq
 80043e8:	2308      	moveq	r3, #8
 80043ea:	230a      	movne	r3, #10
 80043ec:	2100      	movs	r1, #0
 80043ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80043f2:	6865      	ldr	r5, [r4, #4]
 80043f4:	60a5      	str	r5, [r4, #8]
 80043f6:	2d00      	cmp	r5, #0
 80043f8:	bfa2      	ittt	ge
 80043fa:	6821      	ldrge	r1, [r4, #0]
 80043fc:	f021 0104 	bicge.w	r1, r1, #4
 8004400:	6021      	strge	r1, [r4, #0]
 8004402:	b90e      	cbnz	r6, 8004408 <_printf_i+0x114>
 8004404:	2d00      	cmp	r5, #0
 8004406:	d04b      	beq.n	80044a0 <_printf_i+0x1ac>
 8004408:	4615      	mov	r5, r2
 800440a:	fbb6 f1f3 	udiv	r1, r6, r3
 800440e:	fb03 6711 	mls	r7, r3, r1, r6
 8004412:	5dc7      	ldrb	r7, [r0, r7]
 8004414:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004418:	4637      	mov	r7, r6
 800441a:	42bb      	cmp	r3, r7
 800441c:	460e      	mov	r6, r1
 800441e:	d9f4      	bls.n	800440a <_printf_i+0x116>
 8004420:	2b08      	cmp	r3, #8
 8004422:	d10b      	bne.n	800443c <_printf_i+0x148>
 8004424:	6823      	ldr	r3, [r4, #0]
 8004426:	07de      	lsls	r6, r3, #31
 8004428:	d508      	bpl.n	800443c <_printf_i+0x148>
 800442a:	6923      	ldr	r3, [r4, #16]
 800442c:	6861      	ldr	r1, [r4, #4]
 800442e:	4299      	cmp	r1, r3
 8004430:	bfde      	ittt	le
 8004432:	2330      	movle	r3, #48	; 0x30
 8004434:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004438:	f105 35ff 	addle.w	r5, r5, #4294967295
 800443c:	1b52      	subs	r2, r2, r5
 800443e:	6122      	str	r2, [r4, #16]
 8004440:	f8cd a000 	str.w	sl, [sp]
 8004444:	464b      	mov	r3, r9
 8004446:	aa03      	add	r2, sp, #12
 8004448:	4621      	mov	r1, r4
 800444a:	4640      	mov	r0, r8
 800444c:	f7ff fee4 	bl	8004218 <_printf_common>
 8004450:	3001      	adds	r0, #1
 8004452:	d14a      	bne.n	80044ea <_printf_i+0x1f6>
 8004454:	f04f 30ff 	mov.w	r0, #4294967295
 8004458:	b004      	add	sp, #16
 800445a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800445e:	6823      	ldr	r3, [r4, #0]
 8004460:	f043 0320 	orr.w	r3, r3, #32
 8004464:	6023      	str	r3, [r4, #0]
 8004466:	4833      	ldr	r0, [pc, #204]	; (8004534 <_printf_i+0x240>)
 8004468:	2778      	movs	r7, #120	; 0x78
 800446a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800446e:	6823      	ldr	r3, [r4, #0]
 8004470:	6829      	ldr	r1, [r5, #0]
 8004472:	061f      	lsls	r7, r3, #24
 8004474:	f851 6b04 	ldr.w	r6, [r1], #4
 8004478:	d402      	bmi.n	8004480 <_printf_i+0x18c>
 800447a:	065f      	lsls	r7, r3, #25
 800447c:	bf48      	it	mi
 800447e:	b2b6      	uxthmi	r6, r6
 8004480:	07df      	lsls	r7, r3, #31
 8004482:	bf48      	it	mi
 8004484:	f043 0320 	orrmi.w	r3, r3, #32
 8004488:	6029      	str	r1, [r5, #0]
 800448a:	bf48      	it	mi
 800448c:	6023      	strmi	r3, [r4, #0]
 800448e:	b91e      	cbnz	r6, 8004498 <_printf_i+0x1a4>
 8004490:	6823      	ldr	r3, [r4, #0]
 8004492:	f023 0320 	bic.w	r3, r3, #32
 8004496:	6023      	str	r3, [r4, #0]
 8004498:	2310      	movs	r3, #16
 800449a:	e7a7      	b.n	80043ec <_printf_i+0xf8>
 800449c:	4824      	ldr	r0, [pc, #144]	; (8004530 <_printf_i+0x23c>)
 800449e:	e7e4      	b.n	800446a <_printf_i+0x176>
 80044a0:	4615      	mov	r5, r2
 80044a2:	e7bd      	b.n	8004420 <_printf_i+0x12c>
 80044a4:	682b      	ldr	r3, [r5, #0]
 80044a6:	6826      	ldr	r6, [r4, #0]
 80044a8:	6961      	ldr	r1, [r4, #20]
 80044aa:	1d18      	adds	r0, r3, #4
 80044ac:	6028      	str	r0, [r5, #0]
 80044ae:	0635      	lsls	r5, r6, #24
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	d501      	bpl.n	80044b8 <_printf_i+0x1c4>
 80044b4:	6019      	str	r1, [r3, #0]
 80044b6:	e002      	b.n	80044be <_printf_i+0x1ca>
 80044b8:	0670      	lsls	r0, r6, #25
 80044ba:	d5fb      	bpl.n	80044b4 <_printf_i+0x1c0>
 80044bc:	8019      	strh	r1, [r3, #0]
 80044be:	2300      	movs	r3, #0
 80044c0:	6123      	str	r3, [r4, #16]
 80044c2:	4615      	mov	r5, r2
 80044c4:	e7bc      	b.n	8004440 <_printf_i+0x14c>
 80044c6:	682b      	ldr	r3, [r5, #0]
 80044c8:	1d1a      	adds	r2, r3, #4
 80044ca:	602a      	str	r2, [r5, #0]
 80044cc:	681d      	ldr	r5, [r3, #0]
 80044ce:	6862      	ldr	r2, [r4, #4]
 80044d0:	2100      	movs	r1, #0
 80044d2:	4628      	mov	r0, r5
 80044d4:	f7fb fe94 	bl	8000200 <memchr>
 80044d8:	b108      	cbz	r0, 80044de <_printf_i+0x1ea>
 80044da:	1b40      	subs	r0, r0, r5
 80044dc:	6060      	str	r0, [r4, #4]
 80044de:	6863      	ldr	r3, [r4, #4]
 80044e0:	6123      	str	r3, [r4, #16]
 80044e2:	2300      	movs	r3, #0
 80044e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044e8:	e7aa      	b.n	8004440 <_printf_i+0x14c>
 80044ea:	6923      	ldr	r3, [r4, #16]
 80044ec:	462a      	mov	r2, r5
 80044ee:	4649      	mov	r1, r9
 80044f0:	4640      	mov	r0, r8
 80044f2:	47d0      	blx	sl
 80044f4:	3001      	adds	r0, #1
 80044f6:	d0ad      	beq.n	8004454 <_printf_i+0x160>
 80044f8:	6823      	ldr	r3, [r4, #0]
 80044fa:	079b      	lsls	r3, r3, #30
 80044fc:	d413      	bmi.n	8004526 <_printf_i+0x232>
 80044fe:	68e0      	ldr	r0, [r4, #12]
 8004500:	9b03      	ldr	r3, [sp, #12]
 8004502:	4298      	cmp	r0, r3
 8004504:	bfb8      	it	lt
 8004506:	4618      	movlt	r0, r3
 8004508:	e7a6      	b.n	8004458 <_printf_i+0x164>
 800450a:	2301      	movs	r3, #1
 800450c:	4632      	mov	r2, r6
 800450e:	4649      	mov	r1, r9
 8004510:	4640      	mov	r0, r8
 8004512:	47d0      	blx	sl
 8004514:	3001      	adds	r0, #1
 8004516:	d09d      	beq.n	8004454 <_printf_i+0x160>
 8004518:	3501      	adds	r5, #1
 800451a:	68e3      	ldr	r3, [r4, #12]
 800451c:	9903      	ldr	r1, [sp, #12]
 800451e:	1a5b      	subs	r3, r3, r1
 8004520:	42ab      	cmp	r3, r5
 8004522:	dcf2      	bgt.n	800450a <_printf_i+0x216>
 8004524:	e7eb      	b.n	80044fe <_printf_i+0x20a>
 8004526:	2500      	movs	r5, #0
 8004528:	f104 0619 	add.w	r6, r4, #25
 800452c:	e7f5      	b.n	800451a <_printf_i+0x226>
 800452e:	bf00      	nop
 8004530:	08004695 	.word	0x08004695
 8004534:	080046a6 	.word	0x080046a6

08004538 <memmove>:
 8004538:	4288      	cmp	r0, r1
 800453a:	b510      	push	{r4, lr}
 800453c:	eb01 0402 	add.w	r4, r1, r2
 8004540:	d902      	bls.n	8004548 <memmove+0x10>
 8004542:	4284      	cmp	r4, r0
 8004544:	4623      	mov	r3, r4
 8004546:	d807      	bhi.n	8004558 <memmove+0x20>
 8004548:	1e43      	subs	r3, r0, #1
 800454a:	42a1      	cmp	r1, r4
 800454c:	d008      	beq.n	8004560 <memmove+0x28>
 800454e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004552:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004556:	e7f8      	b.n	800454a <memmove+0x12>
 8004558:	4402      	add	r2, r0
 800455a:	4601      	mov	r1, r0
 800455c:	428a      	cmp	r2, r1
 800455e:	d100      	bne.n	8004562 <memmove+0x2a>
 8004560:	bd10      	pop	{r4, pc}
 8004562:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004566:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800456a:	e7f7      	b.n	800455c <memmove+0x24>

0800456c <_sbrk_r>:
 800456c:	b538      	push	{r3, r4, r5, lr}
 800456e:	4d06      	ldr	r5, [pc, #24]	; (8004588 <_sbrk_r+0x1c>)
 8004570:	2300      	movs	r3, #0
 8004572:	4604      	mov	r4, r0
 8004574:	4608      	mov	r0, r1
 8004576:	602b      	str	r3, [r5, #0]
 8004578:	f7fc f8b0 	bl	80006dc <_sbrk>
 800457c:	1c43      	adds	r3, r0, #1
 800457e:	d102      	bne.n	8004586 <_sbrk_r+0x1a>
 8004580:	682b      	ldr	r3, [r5, #0]
 8004582:	b103      	cbz	r3, 8004586 <_sbrk_r+0x1a>
 8004584:	6023      	str	r3, [r4, #0]
 8004586:	bd38      	pop	{r3, r4, r5, pc}
 8004588:	20000244 	.word	0x20000244

0800458c <memcpy>:
 800458c:	440a      	add	r2, r1
 800458e:	4291      	cmp	r1, r2
 8004590:	f100 33ff 	add.w	r3, r0, #4294967295
 8004594:	d100      	bne.n	8004598 <memcpy+0xc>
 8004596:	4770      	bx	lr
 8004598:	b510      	push	{r4, lr}
 800459a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800459e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045a2:	4291      	cmp	r1, r2
 80045a4:	d1f9      	bne.n	800459a <memcpy+0xe>
 80045a6:	bd10      	pop	{r4, pc}

080045a8 <_realloc_r>:
 80045a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045ac:	4680      	mov	r8, r0
 80045ae:	4614      	mov	r4, r2
 80045b0:	460e      	mov	r6, r1
 80045b2:	b921      	cbnz	r1, 80045be <_realloc_r+0x16>
 80045b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045b8:	4611      	mov	r1, r2
 80045ba:	f7ff bc49 	b.w	8003e50 <_malloc_r>
 80045be:	b92a      	cbnz	r2, 80045cc <_realloc_r+0x24>
 80045c0:	f7ff fbda 	bl	8003d78 <_free_r>
 80045c4:	4625      	mov	r5, r4
 80045c6:	4628      	mov	r0, r5
 80045c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045cc:	f000 f81b 	bl	8004606 <_malloc_usable_size_r>
 80045d0:	4284      	cmp	r4, r0
 80045d2:	4607      	mov	r7, r0
 80045d4:	d802      	bhi.n	80045dc <_realloc_r+0x34>
 80045d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80045da:	d812      	bhi.n	8004602 <_realloc_r+0x5a>
 80045dc:	4621      	mov	r1, r4
 80045de:	4640      	mov	r0, r8
 80045e0:	f7ff fc36 	bl	8003e50 <_malloc_r>
 80045e4:	4605      	mov	r5, r0
 80045e6:	2800      	cmp	r0, #0
 80045e8:	d0ed      	beq.n	80045c6 <_realloc_r+0x1e>
 80045ea:	42bc      	cmp	r4, r7
 80045ec:	4622      	mov	r2, r4
 80045ee:	4631      	mov	r1, r6
 80045f0:	bf28      	it	cs
 80045f2:	463a      	movcs	r2, r7
 80045f4:	f7ff ffca 	bl	800458c <memcpy>
 80045f8:	4631      	mov	r1, r6
 80045fa:	4640      	mov	r0, r8
 80045fc:	f7ff fbbc 	bl	8003d78 <_free_r>
 8004600:	e7e1      	b.n	80045c6 <_realloc_r+0x1e>
 8004602:	4635      	mov	r5, r6
 8004604:	e7df      	b.n	80045c6 <_realloc_r+0x1e>

08004606 <_malloc_usable_size_r>:
 8004606:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800460a:	1f18      	subs	r0, r3, #4
 800460c:	2b00      	cmp	r3, #0
 800460e:	bfbc      	itt	lt
 8004610:	580b      	ldrlt	r3, [r1, r0]
 8004612:	18c0      	addlt	r0, r0, r3
 8004614:	4770      	bx	lr
	...

08004618 <_init>:
 8004618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800461a:	bf00      	nop
 800461c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800461e:	bc08      	pop	{r3}
 8004620:	469e      	mov	lr, r3
 8004622:	4770      	bx	lr

08004624 <_fini>:
 8004624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004626:	bf00      	nop
 8004628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800462a:	bc08      	pop	{r3}
 800462c:	469e      	mov	lr, r3
 800462e:	4770      	bx	lr
