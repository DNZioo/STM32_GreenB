
stm32f303_pumpcontroller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000384c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080039dc  080039dc  000139dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a5c  08003a5c  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08003a5c  08003a5c  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a5c  08003a5c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a5c  08003a5c  00013a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a60  08003a60  00013a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08003a64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          00000208  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000268  20000268  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   00008be3  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001561  00000000  00000000  00028cb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000688  00000000  00000000  0002a218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000004fb  00000000  00000000  0002a8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001c367  00000000  00000000  0002ad9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00009998  00000000  00000000  00047102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ab49f  00000000  00000000  00050a9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001e6c  00000000  00000000  000fbf3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  000fdda8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080039c4 	.word	0x080039c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	080039c4 	.word	0x080039c4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002a4:	f000 fa5c 	bl	8000760 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002a8:	f000 f84e 	bl	8000348 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ac:	f000 f8d6 	bl	800045c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002b0:	f000 f8a4 	bl	80003fc <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Receive(&huart2, (uint8_t*)receivedData, 4, HAL_MAX_DELAY);
 80002b4:	f04f 33ff 	mov.w	r3, #4294967295
 80002b8:	2204      	movs	r2, #4
 80002ba:	491b      	ldr	r1, [pc, #108]	; (8000328 <main+0x88>)
 80002bc:	481b      	ldr	r0, [pc, #108]	; (800032c <main+0x8c>)
 80002be:	f002 fa37 	bl	8002730 <HAL_UART_Receive>
	  receivedData[4] = '\0';
 80002c2:	4b19      	ldr	r3, [pc, #100]	; (8000328 <main+0x88>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	711a      	strb	r2, [r3, #4]
	  if (strcmp(receivedData, "1122") == 0) {
 80002c8:	4919      	ldr	r1, [pc, #100]	; (8000330 <main+0x90>)
 80002ca:	4817      	ldr	r0, [pc, #92]	; (8000328 <main+0x88>)
 80002cc:	f7ff ff80 	bl	80001d0 <strcmp>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d106      	bne.n	80002e4 <main+0x44>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET); // Turn LED ON
 80002d6:	2201      	movs	r2, #1
 80002d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002dc:	4815      	ldr	r0, [pc, #84]	; (8000334 <main+0x94>)
 80002de:	f000 fd29 	bl	8000d34 <HAL_GPIO_WritePin>
 80002e2:	e00c      	b.n	80002fe <main+0x5e>
	  } else if (strcmp(receivedData, "0000") == 0) {
 80002e4:	4914      	ldr	r1, [pc, #80]	; (8000338 <main+0x98>)
 80002e6:	4810      	ldr	r0, [pc, #64]	; (8000328 <main+0x88>)
 80002e8:	f7ff ff72 	bl	80001d0 <strcmp>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d105      	bne.n	80002fe <main+0x5e>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET); // Turn LED OFF
 80002f2:	2200      	movs	r2, #0
 80002f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002f8:	480e      	ldr	r0, [pc, #56]	; (8000334 <main+0x94>)
 80002fa:	f000 fd1b 	bl	8000d34 <HAL_GPIO_WritePin>
	  }
	  sprintf(txData, "%d", Txnum); // Convert the number to a string
 80002fe:	4b0f      	ldr	r3, [pc, #60]	; (800033c <main+0x9c>)
 8000300:	781b      	ldrb	r3, [r3, #0]
 8000302:	461a      	mov	r2, r3
 8000304:	490e      	ldr	r1, [pc, #56]	; (8000340 <main+0xa0>)
 8000306:	480f      	ldr	r0, [pc, #60]	; (8000344 <main+0xa4>)
 8000308:	f002 feb8 	bl	800307c <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)txData, strlen(txData), 100); // Send the string
 800030c:	480d      	ldr	r0, [pc, #52]	; (8000344 <main+0xa4>)
 800030e:	f7ff ff69 	bl	80001e4 <strlen>
 8000312:	4603      	mov	r3, r0
 8000314:	b29a      	uxth	r2, r3
 8000316:	2364      	movs	r3, #100	; 0x64
 8000318:	490a      	ldr	r1, [pc, #40]	; (8000344 <main+0xa4>)
 800031a:	4804      	ldr	r0, [pc, #16]	; (800032c <main+0x8c>)
 800031c:	f002 f97e 	bl	800261c <HAL_UART_Transmit>
	  HAL_Delay(100);
 8000320:	2064      	movs	r0, #100	; 0x64
 8000322:	f000 fa83 	bl	800082c <HAL_Delay>
  {
 8000326:	e7c5      	b.n	80002b4 <main+0x14>
 8000328:	20000104 	.word	0x20000104
 800032c:	2000007c 	.word	0x2000007c
 8000330:	080039dc 	.word	0x080039dc
 8000334:	48001000 	.word	0x48001000
 8000338:	080039e4 	.word	0x080039e4
 800033c:	20000000 	.word	0x20000000
 8000340:	080039ec 	.word	0x080039ec
 8000344:	2000010c 	.word	0x2000010c

08000348 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b09e      	sub	sp, #120	; 0x78
 800034c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800034e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000352:	2228      	movs	r2, #40	; 0x28
 8000354:	2100      	movs	r1, #0
 8000356:	4618      	mov	r0, r3
 8000358:	f002 feb0 	bl	80030bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800035c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000360:	2200      	movs	r2, #0
 8000362:	601a      	str	r2, [r3, #0]
 8000364:	605a      	str	r2, [r3, #4]
 8000366:	609a      	str	r2, [r3, #8]
 8000368:	60da      	str	r2, [r3, #12]
 800036a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800036c:	463b      	mov	r3, r7
 800036e:	223c      	movs	r2, #60	; 0x3c
 8000370:	2100      	movs	r1, #0
 8000372:	4618      	mov	r0, r3
 8000374:	f002 fea2 	bl	80030bc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000378:	2301      	movs	r3, #1
 800037a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800037c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000380:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000382:	2300      	movs	r3, #0
 8000384:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000386:	2301      	movs	r3, #1
 8000388:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800038a:	2302      	movs	r3, #2
 800038c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800038e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000392:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000394:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000398:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800039a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800039e:	4618      	mov	r0, r3
 80003a0:	f000 fce0 	bl	8000d64 <HAL_RCC_OscConfig>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <SystemClock_Config+0x66>
  {
    Error_Handler();
 80003aa:	f000 f8d1 	bl	8000550 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ae:	230f      	movs	r3, #15
 80003b0:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003b2:	2302      	movs	r3, #2
 80003b4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003b6:	2300      	movs	r3, #0
 80003b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003c0:	2300      	movs	r3, #0
 80003c2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80003c8:	2102      	movs	r1, #2
 80003ca:	4618      	mov	r0, r3
 80003cc:	f001 fd08 	bl	8001de0 <HAL_RCC_ClockConfig>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <SystemClock_Config+0x92>
  {
    Error_Handler();
 80003d6:	f000 f8bb 	bl	8000550 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80003da:	2302      	movs	r3, #2
 80003dc:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80003de:	2300      	movs	r3, #0
 80003e0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003e2:	463b      	mov	r3, r7
 80003e4:	4618      	mov	r0, r3
 80003e6:	f001 ff1b 	bl	8002220 <HAL_RCCEx_PeriphCLKConfig>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d001      	beq.n	80003f4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80003f0:	f000 f8ae 	bl	8000550 <Error_Handler>
  }
}
 80003f4:	bf00      	nop
 80003f6:	3778      	adds	r7, #120	; 0x78
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}

080003fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000400:	4b14      	ldr	r3, [pc, #80]	; (8000454 <MX_USART2_UART_Init+0x58>)
 8000402:	4a15      	ldr	r2, [pc, #84]	; (8000458 <MX_USART2_UART_Init+0x5c>)
 8000404:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000406:	4b13      	ldr	r3, [pc, #76]	; (8000454 <MX_USART2_UART_Init+0x58>)
 8000408:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800040c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800040e:	4b11      	ldr	r3, [pc, #68]	; (8000454 <MX_USART2_UART_Init+0x58>)
 8000410:	2200      	movs	r2, #0
 8000412:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000414:	4b0f      	ldr	r3, [pc, #60]	; (8000454 <MX_USART2_UART_Init+0x58>)
 8000416:	2200      	movs	r2, #0
 8000418:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800041a:	4b0e      	ldr	r3, [pc, #56]	; (8000454 <MX_USART2_UART_Init+0x58>)
 800041c:	2200      	movs	r2, #0
 800041e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000420:	4b0c      	ldr	r3, [pc, #48]	; (8000454 <MX_USART2_UART_Init+0x58>)
 8000422:	220c      	movs	r2, #12
 8000424:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000426:	4b0b      	ldr	r3, [pc, #44]	; (8000454 <MX_USART2_UART_Init+0x58>)
 8000428:	2200      	movs	r2, #0
 800042a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800042c:	4b09      	ldr	r3, [pc, #36]	; (8000454 <MX_USART2_UART_Init+0x58>)
 800042e:	2200      	movs	r2, #0
 8000430:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000432:	4b08      	ldr	r3, [pc, #32]	; (8000454 <MX_USART2_UART_Init+0x58>)
 8000434:	2200      	movs	r2, #0
 8000436:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000438:	4b06      	ldr	r3, [pc, #24]	; (8000454 <MX_USART2_UART_Init+0x58>)
 800043a:	2200      	movs	r2, #0
 800043c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800043e:	4805      	ldr	r0, [pc, #20]	; (8000454 <MX_USART2_UART_Init+0x58>)
 8000440:	f002 f89e 	bl	8002580 <HAL_UART_Init>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800044a:	f000 f881 	bl	8000550 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800044e:	bf00      	nop
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	2000007c 	.word	0x2000007c
 8000458:	40004400 	.word	0x40004400

0800045c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b08a      	sub	sp, #40	; 0x28
 8000460:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000462:	f107 0314 	add.w	r3, r7, #20
 8000466:	2200      	movs	r2, #0
 8000468:	601a      	str	r2, [r3, #0]
 800046a:	605a      	str	r2, [r3, #4]
 800046c:	609a      	str	r2, [r3, #8]
 800046e:	60da      	str	r2, [r3, #12]
 8000470:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000472:	4b34      	ldr	r3, [pc, #208]	; (8000544 <MX_GPIO_Init+0xe8>)
 8000474:	695b      	ldr	r3, [r3, #20]
 8000476:	4a33      	ldr	r2, [pc, #204]	; (8000544 <MX_GPIO_Init+0xe8>)
 8000478:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800047c:	6153      	str	r3, [r2, #20]
 800047e:	4b31      	ldr	r3, [pc, #196]	; (8000544 <MX_GPIO_Init+0xe8>)
 8000480:	695b      	ldr	r3, [r3, #20]
 8000482:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000486:	613b      	str	r3, [r7, #16]
 8000488:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800048a:	4b2e      	ldr	r3, [pc, #184]	; (8000544 <MX_GPIO_Init+0xe8>)
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	4a2d      	ldr	r2, [pc, #180]	; (8000544 <MX_GPIO_Init+0xe8>)
 8000490:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000494:	6153      	str	r3, [r2, #20]
 8000496:	4b2b      	ldr	r3, [pc, #172]	; (8000544 <MX_GPIO_Init+0xe8>)
 8000498:	695b      	ldr	r3, [r3, #20]
 800049a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800049e:	60fb      	str	r3, [r7, #12]
 80004a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a2:	4b28      	ldr	r3, [pc, #160]	; (8000544 <MX_GPIO_Init+0xe8>)
 80004a4:	695b      	ldr	r3, [r3, #20]
 80004a6:	4a27      	ldr	r2, [pc, #156]	; (8000544 <MX_GPIO_Init+0xe8>)
 80004a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004ac:	6153      	str	r3, [r2, #20]
 80004ae:	4b25      	ldr	r3, [pc, #148]	; (8000544 <MX_GPIO_Init+0xe8>)
 80004b0:	695b      	ldr	r3, [r3, #20]
 80004b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004b6:	60bb      	str	r3, [r7, #8]
 80004b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004ba:	4b22      	ldr	r3, [pc, #136]	; (8000544 <MX_GPIO_Init+0xe8>)
 80004bc:	695b      	ldr	r3, [r3, #20]
 80004be:	4a21      	ldr	r2, [pc, #132]	; (8000544 <MX_GPIO_Init+0xe8>)
 80004c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004c4:	6153      	str	r3, [r2, #20]
 80004c6:	4b1f      	ldr	r3, [pc, #124]	; (8000544 <MX_GPIO_Init+0xe8>)
 80004c8:	695b      	ldr	r3, [r3, #20]
 80004ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004ce:	607b      	str	r3, [r7, #4]
 80004d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80004d2:	2200      	movs	r2, #0
 80004d4:	2101      	movs	r1, #1
 80004d6:	481c      	ldr	r0, [pc, #112]	; (8000548 <MX_GPIO_Init+0xec>)
 80004d8:	f000 fc2c 	bl	8000d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 80004dc:	2200      	movs	r2, #0
 80004de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004e2:	481a      	ldr	r0, [pc, #104]	; (800054c <MX_GPIO_Init+0xf0>)
 80004e4:	f000 fc26 	bl	8000d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80004e8:	2301      	movs	r3, #1
 80004ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ec:	2301      	movs	r3, #1
 80004ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f0:	2300      	movs	r3, #0
 80004f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f4:	2300      	movs	r3, #0
 80004f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004f8:	f107 0314 	add.w	r3, r7, #20
 80004fc:	4619      	mov	r1, r3
 80004fe:	4812      	ldr	r0, [pc, #72]	; (8000548 <MX_GPIO_Init+0xec>)
 8000500:	f000 fa9e 	bl	8000a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000504:	2302      	movs	r3, #2
 8000506:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000508:	2300      	movs	r3, #0
 800050a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050c:	2300      	movs	r3, #0
 800050e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000510:	f107 0314 	add.w	r3, r7, #20
 8000514:	4619      	mov	r1, r3
 8000516:	480c      	ldr	r0, [pc, #48]	; (8000548 <MX_GPIO_Init+0xec>)
 8000518:	f000 fa92 	bl	8000a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800051c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000520:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000522:	2301      	movs	r3, #1
 8000524:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000526:	2300      	movs	r3, #0
 8000528:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800052a:	2300      	movs	r3, #0
 800052c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800052e:	f107 0314 	add.w	r3, r7, #20
 8000532:	4619      	mov	r1, r3
 8000534:	4805      	ldr	r0, [pc, #20]	; (800054c <MX_GPIO_Init+0xf0>)
 8000536:	f000 fa83 	bl	8000a40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800053a:	bf00      	nop
 800053c:	3728      	adds	r7, #40	; 0x28
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40021000 	.word	0x40021000
 8000548:	48000800 	.word	0x48000800
 800054c:	48001000 	.word	0x48001000

08000550 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000554:	b672      	cpsid	i
}
 8000556:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000558:	e7fe      	b.n	8000558 <Error_Handler+0x8>
	...

0800055c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000562:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <HAL_MspInit+0x44>)
 8000564:	699b      	ldr	r3, [r3, #24]
 8000566:	4a0e      	ldr	r2, [pc, #56]	; (80005a0 <HAL_MspInit+0x44>)
 8000568:	f043 0301 	orr.w	r3, r3, #1
 800056c:	6193      	str	r3, [r2, #24]
 800056e:	4b0c      	ldr	r3, [pc, #48]	; (80005a0 <HAL_MspInit+0x44>)
 8000570:	699b      	ldr	r3, [r3, #24]
 8000572:	f003 0301 	and.w	r3, r3, #1
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800057a:	4b09      	ldr	r3, [pc, #36]	; (80005a0 <HAL_MspInit+0x44>)
 800057c:	69db      	ldr	r3, [r3, #28]
 800057e:	4a08      	ldr	r2, [pc, #32]	; (80005a0 <HAL_MspInit+0x44>)
 8000580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000584:	61d3      	str	r3, [r2, #28]
 8000586:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <HAL_MspInit+0x44>)
 8000588:	69db      	ldr	r3, [r3, #28]
 800058a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800058e:	603b      	str	r3, [r7, #0]
 8000590:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000592:	bf00      	nop
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	40021000 	.word	0x40021000

080005a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b08a      	sub	sp, #40	; 0x28
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ac:	f107 0314 	add.w	r3, r7, #20
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a17      	ldr	r2, [pc, #92]	; (8000620 <HAL_UART_MspInit+0x7c>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d128      	bne.n	8000618 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005c6:	4b17      	ldr	r3, [pc, #92]	; (8000624 <HAL_UART_MspInit+0x80>)
 80005c8:	69db      	ldr	r3, [r3, #28]
 80005ca:	4a16      	ldr	r2, [pc, #88]	; (8000624 <HAL_UART_MspInit+0x80>)
 80005cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005d0:	61d3      	str	r3, [r2, #28]
 80005d2:	4b14      	ldr	r3, [pc, #80]	; (8000624 <HAL_UART_MspInit+0x80>)
 80005d4:	69db      	ldr	r3, [r3, #28]
 80005d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005da:	613b      	str	r3, [r7, #16]
 80005dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005de:	4b11      	ldr	r3, [pc, #68]	; (8000624 <HAL_UART_MspInit+0x80>)
 80005e0:	695b      	ldr	r3, [r3, #20]
 80005e2:	4a10      	ldr	r2, [pc, #64]	; (8000624 <HAL_UART_MspInit+0x80>)
 80005e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005e8:	6153      	str	r3, [r2, #20]
 80005ea:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <HAL_UART_MspInit+0x80>)
 80005ec:	695b      	ldr	r3, [r3, #20]
 80005ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80005f6:	230c      	movs	r3, #12
 80005f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005fa:	2302      	movs	r3, #2
 80005fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fe:	2300      	movs	r3, #0
 8000600:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000602:	2303      	movs	r3, #3
 8000604:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000606:	2307      	movs	r3, #7
 8000608:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	4619      	mov	r1, r3
 8000610:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000614:	f000 fa14 	bl	8000a40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000618:	bf00      	nop
 800061a:	3728      	adds	r7, #40	; 0x28
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40004400 	.word	0x40004400
 8000624:	40021000 	.word	0x40021000

08000628 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800062c:	e7fe      	b.n	800062c <NMI_Handler+0x4>

0800062e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800062e:	b480      	push	{r7}
 8000630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000632:	e7fe      	b.n	8000632 <HardFault_Handler+0x4>

08000634 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000638:	e7fe      	b.n	8000638 <MemManage_Handler+0x4>

0800063a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800063a:	b480      	push	{r7}
 800063c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800063e:	e7fe      	b.n	800063e <BusFault_Handler+0x4>

08000640 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000644:	e7fe      	b.n	8000644 <UsageFault_Handler+0x4>

08000646 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000646:	b480      	push	{r7}
 8000648:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800064a:	bf00      	nop
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr

08000654 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr

08000662 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000662:	b480      	push	{r7}
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000666:	bf00      	nop
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr

08000670 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000674:	f000 f8ba 	bl	80007ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000678:	bf00      	nop
 800067a:	bd80      	pop	{r7, pc}

0800067c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b086      	sub	sp, #24
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000684:	4a14      	ldr	r2, [pc, #80]	; (80006d8 <_sbrk+0x5c>)
 8000686:	4b15      	ldr	r3, [pc, #84]	; (80006dc <_sbrk+0x60>)
 8000688:	1ad3      	subs	r3, r2, r3
 800068a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000690:	4b13      	ldr	r3, [pc, #76]	; (80006e0 <_sbrk+0x64>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d102      	bne.n	800069e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000698:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <_sbrk+0x64>)
 800069a:	4a12      	ldr	r2, [pc, #72]	; (80006e4 <_sbrk+0x68>)
 800069c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800069e:	4b10      	ldr	r3, [pc, #64]	; (80006e0 <_sbrk+0x64>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	4413      	add	r3, r2
 80006a6:	693a      	ldr	r2, [r7, #16]
 80006a8:	429a      	cmp	r2, r3
 80006aa:	d207      	bcs.n	80006bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006ac:	f002 fd0e 	bl	80030cc <__errno>
 80006b0:	4603      	mov	r3, r0
 80006b2:	220c      	movs	r2, #12
 80006b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006b6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ba:	e009      	b.n	80006d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006bc:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <_sbrk+0x64>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006c2:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <_sbrk+0x64>)
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4413      	add	r3, r2
 80006ca:	4a05      	ldr	r2, [pc, #20]	; (80006e0 <_sbrk+0x64>)
 80006cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006ce:	68fb      	ldr	r3, [r7, #12]
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	3718      	adds	r7, #24
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	2000a000 	.word	0x2000a000
 80006dc:	00000400 	.word	0x00000400
 80006e0:	20000118 	.word	0x20000118
 80006e4:	20000268 	.word	0x20000268

080006e8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <SystemInit+0x20>)
 80006ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006f2:	4a05      	ldr	r2, [pc, #20]	; (8000708 <SystemInit+0x20>)
 80006f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006fc:	bf00      	nop
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	e000ed00 	.word	0xe000ed00

0800070c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800070c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000744 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000710:	f7ff ffea 	bl	80006e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000714:	480c      	ldr	r0, [pc, #48]	; (8000748 <LoopForever+0x6>)
  ldr r1, =_edata
 8000716:	490d      	ldr	r1, [pc, #52]	; (800074c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000718:	4a0d      	ldr	r2, [pc, #52]	; (8000750 <LoopForever+0xe>)
  movs r3, #0
 800071a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800071c:	e002      	b.n	8000724 <LoopCopyDataInit>

0800071e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800071e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000720:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000722:	3304      	adds	r3, #4

08000724 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000724:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000726:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000728:	d3f9      	bcc.n	800071e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800072a:	4a0a      	ldr	r2, [pc, #40]	; (8000754 <LoopForever+0x12>)
  ldr r4, =_ebss
 800072c:	4c0a      	ldr	r4, [pc, #40]	; (8000758 <LoopForever+0x16>)
  movs r3, #0
 800072e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000730:	e001      	b.n	8000736 <LoopFillZerobss>

08000732 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000732:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000734:	3204      	adds	r2, #4

08000736 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000736:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000738:	d3fb      	bcc.n	8000732 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800073a:	f002 fccd 	bl	80030d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800073e:	f7ff fdaf 	bl	80002a0 <main>

08000742 <LoopForever>:

LoopForever:
    b LoopForever
 8000742:	e7fe      	b.n	8000742 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000744:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000748:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800074c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000750:	08003a64 	.word	0x08003a64
  ldr r2, =_sbss
 8000754:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000758:	20000268 	.word	0x20000268

0800075c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800075c:	e7fe      	b.n	800075c <ADC1_2_IRQHandler>
	...

08000760 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000764:	4b08      	ldr	r3, [pc, #32]	; (8000788 <HAL_Init+0x28>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a07      	ldr	r2, [pc, #28]	; (8000788 <HAL_Init+0x28>)
 800076a:	f043 0310 	orr.w	r3, r3, #16
 800076e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000770:	2003      	movs	r0, #3
 8000772:	f000 f931 	bl	80009d8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000776:	200f      	movs	r0, #15
 8000778:	f000 f808 	bl	800078c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800077c:	f7ff feee 	bl	800055c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000780:	2300      	movs	r3, #0
}
 8000782:	4618      	mov	r0, r3
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40022000 	.word	0x40022000

0800078c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000794:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <HAL_InitTick+0x54>)
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <HAL_InitTick+0x58>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	4619      	mov	r1, r3
 800079e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80007a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 f93b 	bl	8000a26 <HAL_SYSTICK_Config>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007b6:	2301      	movs	r3, #1
 80007b8:	e00e      	b.n	80007d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	2b0f      	cmp	r3, #15
 80007be:	d80a      	bhi.n	80007d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007c0:	2200      	movs	r2, #0
 80007c2:	6879      	ldr	r1, [r7, #4]
 80007c4:	f04f 30ff 	mov.w	r0, #4294967295
 80007c8:	f000 f911 	bl	80009ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007cc:	4a06      	ldr	r2, [pc, #24]	; (80007e8 <HAL_InitTick+0x5c>)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80007d2:	2300      	movs	r3, #0
 80007d4:	e000      	b.n	80007d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007d6:	2301      	movs	r3, #1
}
 80007d8:	4618      	mov	r0, r3
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20000004 	.word	0x20000004
 80007e4:	2000000c 	.word	0x2000000c
 80007e8:	20000008 	.word	0x20000008

080007ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <HAL_IncTick+0x20>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	461a      	mov	r2, r3
 80007f6:	4b06      	ldr	r3, [pc, #24]	; (8000810 <HAL_IncTick+0x24>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4413      	add	r3, r2
 80007fc:	4a04      	ldr	r2, [pc, #16]	; (8000810 <HAL_IncTick+0x24>)
 80007fe:	6013      	str	r3, [r2, #0]
}
 8000800:	bf00      	nop
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	2000000c 	.word	0x2000000c
 8000810:	2000011c 	.word	0x2000011c

08000814 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  return uwTick;  
 8000818:	4b03      	ldr	r3, [pc, #12]	; (8000828 <HAL_GetTick+0x14>)
 800081a:	681b      	ldr	r3, [r3, #0]
}
 800081c:	4618      	mov	r0, r3
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	2000011c 	.word	0x2000011c

0800082c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000834:	f7ff ffee 	bl	8000814 <HAL_GetTick>
 8000838:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000844:	d005      	beq.n	8000852 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000846:	4b0a      	ldr	r3, [pc, #40]	; (8000870 <HAL_Delay+0x44>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	461a      	mov	r2, r3
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	4413      	add	r3, r2
 8000850:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000852:	bf00      	nop
 8000854:	f7ff ffde 	bl	8000814 <HAL_GetTick>
 8000858:	4602      	mov	r2, r0
 800085a:	68bb      	ldr	r3, [r7, #8]
 800085c:	1ad3      	subs	r3, r2, r3
 800085e:	68fa      	ldr	r2, [r7, #12]
 8000860:	429a      	cmp	r2, r3
 8000862:	d8f7      	bhi.n	8000854 <HAL_Delay+0x28>
  {
  }
}
 8000864:	bf00      	nop
 8000866:	bf00      	nop
 8000868:	3710      	adds	r7, #16
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	2000000c 	.word	0x2000000c

08000874 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	f003 0307 	and.w	r3, r3, #7
 8000882:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <__NVIC_SetPriorityGrouping+0x44>)
 8000886:	68db      	ldr	r3, [r3, #12]
 8000888:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800088a:	68ba      	ldr	r2, [r7, #8]
 800088c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000890:	4013      	ands	r3, r2
 8000892:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800089c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008a6:	4a04      	ldr	r2, [pc, #16]	; (80008b8 <__NVIC_SetPriorityGrouping+0x44>)
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	60d3      	str	r3, [r2, #12]
}
 80008ac:	bf00      	nop
 80008ae:	3714      	adds	r7, #20
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr
 80008b8:	e000ed00 	.word	0xe000ed00

080008bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008c0:	4b04      	ldr	r3, [pc, #16]	; (80008d4 <__NVIC_GetPriorityGrouping+0x18>)
 80008c2:	68db      	ldr	r3, [r3, #12]
 80008c4:	0a1b      	lsrs	r3, r3, #8
 80008c6:	f003 0307 	and.w	r3, r3, #7
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr
 80008d4:	e000ed00 	.word	0xe000ed00

080008d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	6039      	str	r1, [r7, #0]
 80008e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	db0a      	blt.n	8000902 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	b2da      	uxtb	r2, r3
 80008f0:	490c      	ldr	r1, [pc, #48]	; (8000924 <__NVIC_SetPriority+0x4c>)
 80008f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f6:	0112      	lsls	r2, r2, #4
 80008f8:	b2d2      	uxtb	r2, r2
 80008fa:	440b      	add	r3, r1
 80008fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000900:	e00a      	b.n	8000918 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	b2da      	uxtb	r2, r3
 8000906:	4908      	ldr	r1, [pc, #32]	; (8000928 <__NVIC_SetPriority+0x50>)
 8000908:	79fb      	ldrb	r3, [r7, #7]
 800090a:	f003 030f 	and.w	r3, r3, #15
 800090e:	3b04      	subs	r3, #4
 8000910:	0112      	lsls	r2, r2, #4
 8000912:	b2d2      	uxtb	r2, r2
 8000914:	440b      	add	r3, r1
 8000916:	761a      	strb	r2, [r3, #24]
}
 8000918:	bf00      	nop
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	e000e100 	.word	0xe000e100
 8000928:	e000ed00 	.word	0xe000ed00

0800092c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800092c:	b480      	push	{r7}
 800092e:	b089      	sub	sp, #36	; 0x24
 8000930:	af00      	add	r7, sp, #0
 8000932:	60f8      	str	r0, [r7, #12]
 8000934:	60b9      	str	r1, [r7, #8]
 8000936:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	f003 0307 	and.w	r3, r3, #7
 800093e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000940:	69fb      	ldr	r3, [r7, #28]
 8000942:	f1c3 0307 	rsb	r3, r3, #7
 8000946:	2b04      	cmp	r3, #4
 8000948:	bf28      	it	cs
 800094a:	2304      	movcs	r3, #4
 800094c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	3304      	adds	r3, #4
 8000952:	2b06      	cmp	r3, #6
 8000954:	d902      	bls.n	800095c <NVIC_EncodePriority+0x30>
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	3b03      	subs	r3, #3
 800095a:	e000      	b.n	800095e <NVIC_EncodePriority+0x32>
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000960:	f04f 32ff 	mov.w	r2, #4294967295
 8000964:	69bb      	ldr	r3, [r7, #24]
 8000966:	fa02 f303 	lsl.w	r3, r2, r3
 800096a:	43da      	mvns	r2, r3
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	401a      	ands	r2, r3
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000974:	f04f 31ff 	mov.w	r1, #4294967295
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	fa01 f303 	lsl.w	r3, r1, r3
 800097e:	43d9      	mvns	r1, r3
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000984:	4313      	orrs	r3, r2
         );
}
 8000986:	4618      	mov	r0, r3
 8000988:	3724      	adds	r7, #36	; 0x24
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
	...

08000994 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	3b01      	subs	r3, #1
 80009a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009a4:	d301      	bcc.n	80009aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009a6:	2301      	movs	r3, #1
 80009a8:	e00f      	b.n	80009ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009aa:	4a0a      	ldr	r2, [pc, #40]	; (80009d4 <SysTick_Config+0x40>)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	3b01      	subs	r3, #1
 80009b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009b2:	210f      	movs	r1, #15
 80009b4:	f04f 30ff 	mov.w	r0, #4294967295
 80009b8:	f7ff ff8e 	bl	80008d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009bc:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <SysTick_Config+0x40>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009c2:	4b04      	ldr	r3, [pc, #16]	; (80009d4 <SysTick_Config+0x40>)
 80009c4:	2207      	movs	r2, #7
 80009c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009c8:	2300      	movs	r3, #0
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	e000e010 	.word	0xe000e010

080009d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009e0:	6878      	ldr	r0, [r7, #4]
 80009e2:	f7ff ff47 	bl	8000874 <__NVIC_SetPriorityGrouping>
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}

080009ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009ee:	b580      	push	{r7, lr}
 80009f0:	b086      	sub	sp, #24
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	4603      	mov	r3, r0
 80009f6:	60b9      	str	r1, [r7, #8]
 80009f8:	607a      	str	r2, [r7, #4]
 80009fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009fc:	2300      	movs	r3, #0
 80009fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a00:	f7ff ff5c 	bl	80008bc <__NVIC_GetPriorityGrouping>
 8000a04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a06:	687a      	ldr	r2, [r7, #4]
 8000a08:	68b9      	ldr	r1, [r7, #8]
 8000a0a:	6978      	ldr	r0, [r7, #20]
 8000a0c:	f7ff ff8e 	bl	800092c <NVIC_EncodePriority>
 8000a10:	4602      	mov	r2, r0
 8000a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a16:	4611      	mov	r1, r2
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff ff5d 	bl	80008d8 <__NVIC_SetPriority>
}
 8000a1e:	bf00      	nop
 8000a20:	3718      	adds	r7, #24
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b082      	sub	sp, #8
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	f7ff ffb0 	bl	8000994 <SysTick_Config>
 8000a34:	4603      	mov	r3, r0
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
	...

08000a40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b087      	sub	sp, #28
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a4e:	e154      	b.n	8000cfa <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	2101      	movs	r1, #1
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	fa01 f303 	lsl.w	r3, r1, r3
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	f000 8146 	beq.w	8000cf4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	f003 0303 	and.w	r3, r3, #3
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d005      	beq.n	8000a80 <HAL_GPIO_Init+0x40>
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	f003 0303 	and.w	r3, r3, #3
 8000a7c:	2b02      	cmp	r3, #2
 8000a7e:	d130      	bne.n	8000ae2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	689b      	ldr	r3, [r3, #8]
 8000a84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	005b      	lsls	r3, r3, #1
 8000a8a:	2203      	movs	r2, #3
 8000a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a90:	43db      	mvns	r3, r3
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	4013      	ands	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	68da      	ldr	r2, [r3, #12]
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	005b      	lsls	r3, r3, #1
 8000aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa4:	693a      	ldr	r2, [r7, #16]
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	693a      	ldr	r2, [r7, #16]
 8000aae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	fa02 f303 	lsl.w	r3, r2, r3
 8000abe:	43db      	mvns	r3, r3
 8000ac0:	693a      	ldr	r2, [r7, #16]
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	091b      	lsrs	r3, r3, #4
 8000acc:	f003 0201 	and.w	r2, r3, #1
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	f003 0303 	and.w	r3, r3, #3
 8000aea:	2b03      	cmp	r3, #3
 8000aec:	d017      	beq.n	8000b1e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	68db      	ldr	r3, [r3, #12]
 8000af2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	2203      	movs	r2, #3
 8000afa:	fa02 f303 	lsl.w	r3, r2, r3
 8000afe:	43db      	mvns	r3, r3
 8000b00:	693a      	ldr	r2, [r7, #16]
 8000b02:	4013      	ands	r3, r2
 8000b04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	689a      	ldr	r2, [r3, #8]
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	005b      	lsls	r3, r3, #1
 8000b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	f003 0303 	and.w	r3, r3, #3
 8000b26:	2b02      	cmp	r3, #2
 8000b28:	d123      	bne.n	8000b72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	08da      	lsrs	r2, r3, #3
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	3208      	adds	r2, #8
 8000b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	f003 0307 	and.w	r3, r3, #7
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	220f      	movs	r2, #15
 8000b42:	fa02 f303 	lsl.w	r3, r2, r3
 8000b46:	43db      	mvns	r3, r3
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	691a      	ldr	r2, [r3, #16]
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	f003 0307 	and.w	r3, r3, #7
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	08da      	lsrs	r2, r3, #3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	3208      	adds	r2, #8
 8000b6c:	6939      	ldr	r1, [r7, #16]
 8000b6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	2203      	movs	r2, #3
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	43db      	mvns	r3, r3
 8000b84:	693a      	ldr	r2, [r7, #16]
 8000b86:	4013      	ands	r3, r2
 8000b88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	f003 0203 	and.w	r2, r3, #3
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	f000 80a0 	beq.w	8000cf4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb4:	4b58      	ldr	r3, [pc, #352]	; (8000d18 <HAL_GPIO_Init+0x2d8>)
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	4a57      	ldr	r2, [pc, #348]	; (8000d18 <HAL_GPIO_Init+0x2d8>)
 8000bba:	f043 0301 	orr.w	r3, r3, #1
 8000bbe:	6193      	str	r3, [r2, #24]
 8000bc0:	4b55      	ldr	r3, [pc, #340]	; (8000d18 <HAL_GPIO_Init+0x2d8>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	f003 0301 	and.w	r3, r3, #1
 8000bc8:	60bb      	str	r3, [r7, #8]
 8000bca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bcc:	4a53      	ldr	r2, [pc, #332]	; (8000d1c <HAL_GPIO_Init+0x2dc>)
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	089b      	lsrs	r3, r3, #2
 8000bd2:	3302      	adds	r3, #2
 8000bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	f003 0303 	and.w	r3, r3, #3
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	220f      	movs	r2, #15
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	43db      	mvns	r3, r3
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	4013      	ands	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000bf6:	d019      	beq.n	8000c2c <HAL_GPIO_Init+0x1ec>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	4a49      	ldr	r2, [pc, #292]	; (8000d20 <HAL_GPIO_Init+0x2e0>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d013      	beq.n	8000c28 <HAL_GPIO_Init+0x1e8>
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	4a48      	ldr	r2, [pc, #288]	; (8000d24 <HAL_GPIO_Init+0x2e4>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d00d      	beq.n	8000c24 <HAL_GPIO_Init+0x1e4>
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	4a47      	ldr	r2, [pc, #284]	; (8000d28 <HAL_GPIO_Init+0x2e8>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d007      	beq.n	8000c20 <HAL_GPIO_Init+0x1e0>
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	4a46      	ldr	r2, [pc, #280]	; (8000d2c <HAL_GPIO_Init+0x2ec>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d101      	bne.n	8000c1c <HAL_GPIO_Init+0x1dc>
 8000c18:	2304      	movs	r3, #4
 8000c1a:	e008      	b.n	8000c2e <HAL_GPIO_Init+0x1ee>
 8000c1c:	2305      	movs	r3, #5
 8000c1e:	e006      	b.n	8000c2e <HAL_GPIO_Init+0x1ee>
 8000c20:	2303      	movs	r3, #3
 8000c22:	e004      	b.n	8000c2e <HAL_GPIO_Init+0x1ee>
 8000c24:	2302      	movs	r3, #2
 8000c26:	e002      	b.n	8000c2e <HAL_GPIO_Init+0x1ee>
 8000c28:	2301      	movs	r3, #1
 8000c2a:	e000      	b.n	8000c2e <HAL_GPIO_Init+0x1ee>
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	697a      	ldr	r2, [r7, #20]
 8000c30:	f002 0203 	and.w	r2, r2, #3
 8000c34:	0092      	lsls	r2, r2, #2
 8000c36:	4093      	lsls	r3, r2
 8000c38:	693a      	ldr	r2, [r7, #16]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c3e:	4937      	ldr	r1, [pc, #220]	; (8000d1c <HAL_GPIO_Init+0x2dc>)
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	089b      	lsrs	r3, r3, #2
 8000c44:	3302      	adds	r3, #2
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c4c:	4b38      	ldr	r3, [pc, #224]	; (8000d30 <HAL_GPIO_Init+0x2f0>)
 8000c4e:	689b      	ldr	r3, [r3, #8]
 8000c50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	43db      	mvns	r3, r3
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d003      	beq.n	8000c70 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c70:	4a2f      	ldr	r2, [pc, #188]	; (8000d30 <HAL_GPIO_Init+0x2f0>)
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c76:	4b2e      	ldr	r3, [pc, #184]	; (8000d30 <HAL_GPIO_Init+0x2f0>)
 8000c78:	68db      	ldr	r3, [r3, #12]
 8000c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	43db      	mvns	r3, r3
 8000c80:	693a      	ldr	r2, [r7, #16]
 8000c82:	4013      	ands	r3, r2
 8000c84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d003      	beq.n	8000c9a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c9a:	4a25      	ldr	r2, [pc, #148]	; (8000d30 <HAL_GPIO_Init+0x2f0>)
 8000c9c:	693b      	ldr	r3, [r7, #16]
 8000c9e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ca0:	4b23      	ldr	r3, [pc, #140]	; (8000d30 <HAL_GPIO_Init+0x2f0>)
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	4013      	ands	r3, r2
 8000cae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d003      	beq.n	8000cc4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000cbc:	693a      	ldr	r2, [r7, #16]
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000cc4:	4a1a      	ldr	r2, [pc, #104]	; (8000d30 <HAL_GPIO_Init+0x2f0>)
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cca:	4b19      	ldr	r3, [pc, #100]	; (8000d30 <HAL_GPIO_Init+0x2f0>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	43db      	mvns	r3, r3
 8000cd4:	693a      	ldr	r2, [r7, #16]
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d003      	beq.n	8000cee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000cee:	4a10      	ldr	r2, [pc, #64]	; (8000d30 <HAL_GPIO_Init+0x2f0>)
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	fa22 f303 	lsr.w	r3, r2, r3
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	f47f aea3 	bne.w	8000a50 <HAL_GPIO_Init+0x10>
  }
}
 8000d0a:	bf00      	nop
 8000d0c:	bf00      	nop
 8000d0e:	371c      	adds	r7, #28
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	40021000 	.word	0x40021000
 8000d1c:	40010000 	.word	0x40010000
 8000d20:	48000400 	.word	0x48000400
 8000d24:	48000800 	.word	0x48000800
 8000d28:	48000c00 	.word	0x48000c00
 8000d2c:	48001000 	.word	0x48001000
 8000d30:	40010400 	.word	0x40010400

08000d34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	460b      	mov	r3, r1
 8000d3e:	807b      	strh	r3, [r7, #2]
 8000d40:	4613      	mov	r3, r2
 8000d42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d44:	787b      	ldrb	r3, [r7, #1]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d003      	beq.n	8000d52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d4a:	887a      	ldrh	r2, [r7, #2]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d50:	e002      	b.n	8000d58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d52:	887a      	ldrh	r2, [r7, #2]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d70:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d74:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d102      	bne.n	8000d8a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000d84:	2301      	movs	r3, #1
 8000d86:	f001 b823 	b.w	8001dd0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	f000 817d 	beq.w	800109a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000da0:	4bbc      	ldr	r3, [pc, #752]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f003 030c 	and.w	r3, r3, #12
 8000da8:	2b04      	cmp	r3, #4
 8000daa:	d00c      	beq.n	8000dc6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000dac:	4bb9      	ldr	r3, [pc, #740]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f003 030c 	and.w	r3, r3, #12
 8000db4:	2b08      	cmp	r3, #8
 8000db6:	d15c      	bne.n	8000e72 <HAL_RCC_OscConfig+0x10e>
 8000db8:	4bb6      	ldr	r3, [pc, #728]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dc4:	d155      	bne.n	8000e72 <HAL_RCC_OscConfig+0x10e>
 8000dc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dca:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dce:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000dd2:	fa93 f3a3 	rbit	r3, r3
 8000dd6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000dda:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dde:	fab3 f383 	clz	r3, r3
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	095b      	lsrs	r3, r3, #5
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d102      	bne.n	8000df8 <HAL_RCC_OscConfig+0x94>
 8000df2:	4ba8      	ldr	r3, [pc, #672]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	e015      	b.n	8000e24 <HAL_RCC_OscConfig+0xc0>
 8000df8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dfc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e00:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000e04:	fa93 f3a3 	rbit	r3, r3
 8000e08:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000e0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e10:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000e14:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000e18:	fa93 f3a3 	rbit	r3, r3
 8000e1c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000e20:	4b9c      	ldr	r3, [pc, #624]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 8000e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e24:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e28:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000e2c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000e30:	fa92 f2a2 	rbit	r2, r2
 8000e34:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000e38:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000e3c:	fab2 f282 	clz	r2, r2
 8000e40:	b2d2      	uxtb	r2, r2
 8000e42:	f042 0220 	orr.w	r2, r2, #32
 8000e46:	b2d2      	uxtb	r2, r2
 8000e48:	f002 021f 	and.w	r2, r2, #31
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e52:	4013      	ands	r3, r2
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	f000 811f 	beq.w	8001098 <HAL_RCC_OscConfig+0x334>
 8000e5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	f040 8116 	bne.w	8001098 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	f000 bfaf 	b.w	8001dd0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e82:	d106      	bne.n	8000e92 <HAL_RCC_OscConfig+0x12e>
 8000e84:	4b83      	ldr	r3, [pc, #524]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a82      	ldr	r2, [pc, #520]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 8000e8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e8e:	6013      	str	r3, [r2, #0]
 8000e90:	e036      	b.n	8000f00 <HAL_RCC_OscConfig+0x19c>
 8000e92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d10c      	bne.n	8000ebc <HAL_RCC_OscConfig+0x158>
 8000ea2:	4b7c      	ldr	r3, [pc, #496]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a7b      	ldr	r2, [pc, #492]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 8000ea8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000eac:	6013      	str	r3, [r2, #0]
 8000eae:	4b79      	ldr	r3, [pc, #484]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a78      	ldr	r2, [pc, #480]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 8000eb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eb8:	6013      	str	r3, [r2, #0]
 8000eba:	e021      	b.n	8000f00 <HAL_RCC_OscConfig+0x19c>
 8000ebc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ec0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ecc:	d10c      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x184>
 8000ece:	4b71      	ldr	r3, [pc, #452]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a70      	ldr	r2, [pc, #448]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 8000ed4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ed8:	6013      	str	r3, [r2, #0]
 8000eda:	4b6e      	ldr	r3, [pc, #440]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a6d      	ldr	r2, [pc, #436]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 8000ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ee4:	6013      	str	r3, [r2, #0]
 8000ee6:	e00b      	b.n	8000f00 <HAL_RCC_OscConfig+0x19c>
 8000ee8:	4b6a      	ldr	r3, [pc, #424]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a69      	ldr	r2, [pc, #420]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 8000eee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ef2:	6013      	str	r3, [r2, #0]
 8000ef4:	4b67      	ldr	r3, [pc, #412]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a66      	ldr	r2, [pc, #408]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 8000efa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000efe:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f00:	4b64      	ldr	r3, [pc, #400]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 8000f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f04:	f023 020f 	bic.w	r2, r3, #15
 8000f08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f0c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	495f      	ldr	r1, [pc, #380]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 8000f16:	4313      	orrs	r3, r2
 8000f18:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d059      	beq.n	8000fde <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f2a:	f7ff fc73 	bl	8000814 <HAL_GetTick>
 8000f2e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f32:	e00a      	b.n	8000f4a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f34:	f7ff fc6e 	bl	8000814 <HAL_GetTick>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	2b64      	cmp	r3, #100	; 0x64
 8000f42:	d902      	bls.n	8000f4a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000f44:	2303      	movs	r3, #3
 8000f46:	f000 bf43 	b.w	8001dd0 <HAL_RCC_OscConfig+0x106c>
 8000f4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f4e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f52:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000f56:	fa93 f3a3 	rbit	r3, r3
 8000f5a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000f5e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f62:	fab3 f383 	clz	r3, r3
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	095b      	lsrs	r3, r3, #5
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	f043 0301 	orr.w	r3, r3, #1
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d102      	bne.n	8000f7c <HAL_RCC_OscConfig+0x218>
 8000f76:	4b47      	ldr	r3, [pc, #284]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	e015      	b.n	8000fa8 <HAL_RCC_OscConfig+0x244>
 8000f7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f80:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f84:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000f88:	fa93 f3a3 	rbit	r3, r3
 8000f8c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000f90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f94:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000f98:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000f9c:	fa93 f3a3 	rbit	r3, r3
 8000fa0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000fa4:	4b3b      	ldr	r3, [pc, #236]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 8000fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fac:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000fb0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000fb4:	fa92 f2a2 	rbit	r2, r2
 8000fb8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000fbc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000fc0:	fab2 f282 	clz	r2, r2
 8000fc4:	b2d2      	uxtb	r2, r2
 8000fc6:	f042 0220 	orr.w	r2, r2, #32
 8000fca:	b2d2      	uxtb	r2, r2
 8000fcc:	f002 021f 	and.w	r2, r2, #31
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	fa01 f202 	lsl.w	r2, r1, r2
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d0ab      	beq.n	8000f34 <HAL_RCC_OscConfig+0x1d0>
 8000fdc:	e05d      	b.n	800109a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fde:	f7ff fc19 	bl	8000814 <HAL_GetTick>
 8000fe2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fe6:	e00a      	b.n	8000ffe <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fe8:	f7ff fc14 	bl	8000814 <HAL_GetTick>
 8000fec:	4602      	mov	r2, r0
 8000fee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ff2:	1ad3      	subs	r3, r2, r3
 8000ff4:	2b64      	cmp	r3, #100	; 0x64
 8000ff6:	d902      	bls.n	8000ffe <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	f000 bee9 	b.w	8001dd0 <HAL_RCC_OscConfig+0x106c>
 8000ffe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001002:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001006:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800100a:	fa93 f3a3 	rbit	r3, r3
 800100e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001012:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001016:	fab3 f383 	clz	r3, r3
 800101a:	b2db      	uxtb	r3, r3
 800101c:	095b      	lsrs	r3, r3, #5
 800101e:	b2db      	uxtb	r3, r3
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	b2db      	uxtb	r3, r3
 8001026:	2b01      	cmp	r3, #1
 8001028:	d102      	bne.n	8001030 <HAL_RCC_OscConfig+0x2cc>
 800102a:	4b1a      	ldr	r3, [pc, #104]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	e015      	b.n	800105c <HAL_RCC_OscConfig+0x2f8>
 8001030:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001034:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001038:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800103c:	fa93 f3a3 	rbit	r3, r3
 8001040:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001044:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001048:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800104c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001050:	fa93 f3a3 	rbit	r3, r3
 8001054:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001058:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 800105a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800105c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001060:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001064:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001068:	fa92 f2a2 	rbit	r2, r2
 800106c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001070:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001074:	fab2 f282 	clz	r2, r2
 8001078:	b2d2      	uxtb	r2, r2
 800107a:	f042 0220 	orr.w	r2, r2, #32
 800107e:	b2d2      	uxtb	r2, r2
 8001080:	f002 021f 	and.w	r2, r2, #31
 8001084:	2101      	movs	r1, #1
 8001086:	fa01 f202 	lsl.w	r2, r1, r2
 800108a:	4013      	ands	r3, r2
 800108c:	2b00      	cmp	r3, #0
 800108e:	d1ab      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x284>
 8001090:	e003      	b.n	800109a <HAL_RCC_OscConfig+0x336>
 8001092:	bf00      	nop
 8001094:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001098:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800109a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800109e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	f000 817d 	beq.w	80013aa <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80010b0:	4ba6      	ldr	r3, [pc, #664]	; (800134c <HAL_RCC_OscConfig+0x5e8>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f003 030c 	and.w	r3, r3, #12
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d00b      	beq.n	80010d4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80010bc:	4ba3      	ldr	r3, [pc, #652]	; (800134c <HAL_RCC_OscConfig+0x5e8>)
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f003 030c 	and.w	r3, r3, #12
 80010c4:	2b08      	cmp	r3, #8
 80010c6:	d172      	bne.n	80011ae <HAL_RCC_OscConfig+0x44a>
 80010c8:	4ba0      	ldr	r3, [pc, #640]	; (800134c <HAL_RCC_OscConfig+0x5e8>)
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d16c      	bne.n	80011ae <HAL_RCC_OscConfig+0x44a>
 80010d4:	2302      	movs	r3, #2
 80010d6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010da:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80010de:	fa93 f3a3 	rbit	r3, r3
 80010e2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80010e6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ea:	fab3 f383 	clz	r3, r3
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	095b      	lsrs	r3, r3, #5
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d102      	bne.n	8001104 <HAL_RCC_OscConfig+0x3a0>
 80010fe:	4b93      	ldr	r3, [pc, #588]	; (800134c <HAL_RCC_OscConfig+0x5e8>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	e013      	b.n	800112c <HAL_RCC_OscConfig+0x3c8>
 8001104:	2302      	movs	r3, #2
 8001106:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800110a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800110e:	fa93 f3a3 	rbit	r3, r3
 8001112:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001116:	2302      	movs	r3, #2
 8001118:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800111c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001120:	fa93 f3a3 	rbit	r3, r3
 8001124:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001128:	4b88      	ldr	r3, [pc, #544]	; (800134c <HAL_RCC_OscConfig+0x5e8>)
 800112a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800112c:	2202      	movs	r2, #2
 800112e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001132:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001136:	fa92 f2a2 	rbit	r2, r2
 800113a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800113e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001142:	fab2 f282 	clz	r2, r2
 8001146:	b2d2      	uxtb	r2, r2
 8001148:	f042 0220 	orr.w	r2, r2, #32
 800114c:	b2d2      	uxtb	r2, r2
 800114e:	f002 021f 	and.w	r2, r2, #31
 8001152:	2101      	movs	r1, #1
 8001154:	fa01 f202 	lsl.w	r2, r1, r2
 8001158:	4013      	ands	r3, r2
 800115a:	2b00      	cmp	r3, #0
 800115c:	d00a      	beq.n	8001174 <HAL_RCC_OscConfig+0x410>
 800115e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001162:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	691b      	ldr	r3, [r3, #16]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d002      	beq.n	8001174 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	f000 be2e 	b.w	8001dd0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001174:	4b75      	ldr	r3, [pc, #468]	; (800134c <HAL_RCC_OscConfig+0x5e8>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800117c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001180:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	695b      	ldr	r3, [r3, #20]
 8001188:	21f8      	movs	r1, #248	; 0xf8
 800118a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800118e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001192:	fa91 f1a1 	rbit	r1, r1
 8001196:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800119a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800119e:	fab1 f181 	clz	r1, r1
 80011a2:	b2c9      	uxtb	r1, r1
 80011a4:	408b      	lsls	r3, r1
 80011a6:	4969      	ldr	r1, [pc, #420]	; (800134c <HAL_RCC_OscConfig+0x5e8>)
 80011a8:	4313      	orrs	r3, r2
 80011aa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ac:	e0fd      	b.n	80013aa <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	691b      	ldr	r3, [r3, #16]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	f000 8088 	beq.w	80012d0 <HAL_RCC_OscConfig+0x56c>
 80011c0:	2301      	movs	r3, #1
 80011c2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011c6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80011ca:	fa93 f3a3 	rbit	r3, r3
 80011ce:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80011d2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011d6:	fab3 f383 	clz	r3, r3
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80011e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	461a      	mov	r2, r3
 80011e8:	2301      	movs	r3, #1
 80011ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ec:	f7ff fb12 	bl	8000814 <HAL_GetTick>
 80011f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f4:	e00a      	b.n	800120c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011f6:	f7ff fb0d 	bl	8000814 <HAL_GetTick>
 80011fa:	4602      	mov	r2, r0
 80011fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	2b02      	cmp	r3, #2
 8001204:	d902      	bls.n	800120c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	f000 bde2 	b.w	8001dd0 <HAL_RCC_OscConfig+0x106c>
 800120c:	2302      	movs	r3, #2
 800120e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001212:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001216:	fa93 f3a3 	rbit	r3, r3
 800121a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800121e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001222:	fab3 f383 	clz	r3, r3
 8001226:	b2db      	uxtb	r3, r3
 8001228:	095b      	lsrs	r3, r3, #5
 800122a:	b2db      	uxtb	r3, r3
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	b2db      	uxtb	r3, r3
 8001232:	2b01      	cmp	r3, #1
 8001234:	d102      	bne.n	800123c <HAL_RCC_OscConfig+0x4d8>
 8001236:	4b45      	ldr	r3, [pc, #276]	; (800134c <HAL_RCC_OscConfig+0x5e8>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	e013      	b.n	8001264 <HAL_RCC_OscConfig+0x500>
 800123c:	2302      	movs	r3, #2
 800123e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001242:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001246:	fa93 f3a3 	rbit	r3, r3
 800124a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800124e:	2302      	movs	r3, #2
 8001250:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001254:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001258:	fa93 f3a3 	rbit	r3, r3
 800125c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001260:	4b3a      	ldr	r3, [pc, #232]	; (800134c <HAL_RCC_OscConfig+0x5e8>)
 8001262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001264:	2202      	movs	r2, #2
 8001266:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800126a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800126e:	fa92 f2a2 	rbit	r2, r2
 8001272:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001276:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800127a:	fab2 f282 	clz	r2, r2
 800127e:	b2d2      	uxtb	r2, r2
 8001280:	f042 0220 	orr.w	r2, r2, #32
 8001284:	b2d2      	uxtb	r2, r2
 8001286:	f002 021f 	and.w	r2, r2, #31
 800128a:	2101      	movs	r1, #1
 800128c:	fa01 f202 	lsl.w	r2, r1, r2
 8001290:	4013      	ands	r3, r2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d0af      	beq.n	80011f6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001296:	4b2d      	ldr	r3, [pc, #180]	; (800134c <HAL_RCC_OscConfig+0x5e8>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800129e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	21f8      	movs	r1, #248	; 0xf8
 80012ac:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012b0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80012b4:	fa91 f1a1 	rbit	r1, r1
 80012b8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80012bc:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80012c0:	fab1 f181 	clz	r1, r1
 80012c4:	b2c9      	uxtb	r1, r1
 80012c6:	408b      	lsls	r3, r1
 80012c8:	4920      	ldr	r1, [pc, #128]	; (800134c <HAL_RCC_OscConfig+0x5e8>)
 80012ca:	4313      	orrs	r3, r2
 80012cc:	600b      	str	r3, [r1, #0]
 80012ce:	e06c      	b.n	80013aa <HAL_RCC_OscConfig+0x646>
 80012d0:	2301      	movs	r3, #1
 80012d2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80012da:	fa93 f3a3 	rbit	r3, r3
 80012de:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80012e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012e6:	fab3 f383 	clz	r3, r3
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	461a      	mov	r2, r3
 80012f8:	2300      	movs	r3, #0
 80012fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fc:	f7ff fa8a 	bl	8000814 <HAL_GetTick>
 8001300:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001304:	e00a      	b.n	800131c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001306:	f7ff fa85 	bl	8000814 <HAL_GetTick>
 800130a:	4602      	mov	r2, r0
 800130c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b02      	cmp	r3, #2
 8001314:	d902      	bls.n	800131c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	f000 bd5a 	b.w	8001dd0 <HAL_RCC_OscConfig+0x106c>
 800131c:	2302      	movs	r3, #2
 800131e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001322:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001326:	fa93 f3a3 	rbit	r3, r3
 800132a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800132e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001332:	fab3 f383 	clz	r3, r3
 8001336:	b2db      	uxtb	r3, r3
 8001338:	095b      	lsrs	r3, r3, #5
 800133a:	b2db      	uxtb	r3, r3
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	b2db      	uxtb	r3, r3
 8001342:	2b01      	cmp	r3, #1
 8001344:	d104      	bne.n	8001350 <HAL_RCC_OscConfig+0x5ec>
 8001346:	4b01      	ldr	r3, [pc, #4]	; (800134c <HAL_RCC_OscConfig+0x5e8>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	e015      	b.n	8001378 <HAL_RCC_OscConfig+0x614>
 800134c:	40021000 	.word	0x40021000
 8001350:	2302      	movs	r3, #2
 8001352:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001356:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800135a:	fa93 f3a3 	rbit	r3, r3
 800135e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001362:	2302      	movs	r3, #2
 8001364:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001368:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800136c:	fa93 f3a3 	rbit	r3, r3
 8001370:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001374:	4bc8      	ldr	r3, [pc, #800]	; (8001698 <HAL_RCC_OscConfig+0x934>)
 8001376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001378:	2202      	movs	r2, #2
 800137a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800137e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001382:	fa92 f2a2 	rbit	r2, r2
 8001386:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800138a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800138e:	fab2 f282 	clz	r2, r2
 8001392:	b2d2      	uxtb	r2, r2
 8001394:	f042 0220 	orr.w	r2, r2, #32
 8001398:	b2d2      	uxtb	r2, r2
 800139a:	f002 021f 	and.w	r2, r2, #31
 800139e:	2101      	movs	r1, #1
 80013a0:	fa01 f202 	lsl.w	r2, r1, r2
 80013a4:	4013      	ands	r3, r2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d1ad      	bne.n	8001306 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0308 	and.w	r3, r3, #8
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	f000 8110 	beq.w	80015e0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d079      	beq.n	80014c4 <HAL_RCC_OscConfig+0x760>
 80013d0:	2301      	movs	r3, #1
 80013d2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80013da:	fa93 f3a3 	rbit	r3, r3
 80013de:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80013e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013e6:	fab3 f383 	clz	r3, r3
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	461a      	mov	r2, r3
 80013ee:	4bab      	ldr	r3, [pc, #684]	; (800169c <HAL_RCC_OscConfig+0x938>)
 80013f0:	4413      	add	r3, r2
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	461a      	mov	r2, r3
 80013f6:	2301      	movs	r3, #1
 80013f8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013fa:	f7ff fa0b 	bl	8000814 <HAL_GetTick>
 80013fe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001402:	e00a      	b.n	800141a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001404:	f7ff fa06 	bl	8000814 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d902      	bls.n	800141a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	f000 bcdb 	b.w	8001dd0 <HAL_RCC_OscConfig+0x106c>
 800141a:	2302      	movs	r3, #2
 800141c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001420:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001424:	fa93 f3a3 	rbit	r3, r3
 8001428:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800142c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001430:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001434:	2202      	movs	r2, #2
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800143c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	fa93 f2a3 	rbit	r2, r3
 8001446:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800144a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001454:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001458:	2202      	movs	r2, #2
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001460:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	fa93 f2a3 	rbit	r2, r3
 800146a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800146e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001472:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001474:	4b88      	ldr	r3, [pc, #544]	; (8001698 <HAL_RCC_OscConfig+0x934>)
 8001476:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001478:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800147c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001480:	2102      	movs	r1, #2
 8001482:	6019      	str	r1, [r3, #0]
 8001484:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001488:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	fa93 f1a3 	rbit	r1, r3
 8001492:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001496:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800149a:	6019      	str	r1, [r3, #0]
  return result;
 800149c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014a0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	fab3 f383 	clz	r3, r3
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	f003 031f 	and.w	r3, r3, #31
 80014b6:	2101      	movs	r1, #1
 80014b8:	fa01 f303 	lsl.w	r3, r1, r3
 80014bc:	4013      	ands	r3, r2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d0a0      	beq.n	8001404 <HAL_RCC_OscConfig+0x6a0>
 80014c2:	e08d      	b.n	80015e0 <HAL_RCC_OscConfig+0x87c>
 80014c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014c8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80014cc:	2201      	movs	r2, #1
 80014ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014d4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	fa93 f2a3 	rbit	r2, r3
 80014de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014e2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80014e6:	601a      	str	r2, [r3, #0]
  return result;
 80014e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ec:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80014f0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014f2:	fab3 f383 	clz	r3, r3
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	461a      	mov	r2, r3
 80014fa:	4b68      	ldr	r3, [pc, #416]	; (800169c <HAL_RCC_OscConfig+0x938>)
 80014fc:	4413      	add	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	461a      	mov	r2, r3
 8001502:	2300      	movs	r3, #0
 8001504:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001506:	f7ff f985 	bl	8000814 <HAL_GetTick>
 800150a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800150e:	e00a      	b.n	8001526 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001510:	f7ff f980 	bl	8000814 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	2b02      	cmp	r3, #2
 800151e:	d902      	bls.n	8001526 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	f000 bc55 	b.w	8001dd0 <HAL_RCC_OscConfig+0x106c>
 8001526:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800152a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800152e:	2202      	movs	r2, #2
 8001530:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001532:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001536:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	fa93 f2a3 	rbit	r2, r3
 8001540:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001544:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800154e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001552:	2202      	movs	r2, #2
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800155a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	fa93 f2a3 	rbit	r2, r3
 8001564:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001568:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001572:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001576:	2202      	movs	r2, #2
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800157e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	fa93 f2a3 	rbit	r2, r3
 8001588:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800158c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001590:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001592:	4b41      	ldr	r3, [pc, #260]	; (8001698 <HAL_RCC_OscConfig+0x934>)
 8001594:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001596:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800159a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800159e:	2102      	movs	r1, #2
 80015a0:	6019      	str	r1, [r3, #0]
 80015a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015a6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	fa93 f1a3 	rbit	r1, r3
 80015b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015b4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80015b8:	6019      	str	r1, [r3, #0]
  return result;
 80015ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015be:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	fab3 f383 	clz	r3, r3
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	f003 031f 	and.w	r3, r3, #31
 80015d4:	2101      	movs	r1, #1
 80015d6:	fa01 f303 	lsl.w	r3, r1, r3
 80015da:	4013      	ands	r3, r2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d197      	bne.n	8001510 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0304 	and.w	r3, r3, #4
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	f000 81a1 	beq.w	8001938 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015f6:	2300      	movs	r3, #0
 80015f8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015fc:	4b26      	ldr	r3, [pc, #152]	; (8001698 <HAL_RCC_OscConfig+0x934>)
 80015fe:	69db      	ldr	r3, [r3, #28]
 8001600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d116      	bne.n	8001636 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001608:	4b23      	ldr	r3, [pc, #140]	; (8001698 <HAL_RCC_OscConfig+0x934>)
 800160a:	69db      	ldr	r3, [r3, #28]
 800160c:	4a22      	ldr	r2, [pc, #136]	; (8001698 <HAL_RCC_OscConfig+0x934>)
 800160e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001612:	61d3      	str	r3, [r2, #28]
 8001614:	4b20      	ldr	r3, [pc, #128]	; (8001698 <HAL_RCC_OscConfig+0x934>)
 8001616:	69db      	ldr	r3, [r3, #28]
 8001618:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800161c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001620:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800162a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800162e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001630:	2301      	movs	r3, #1
 8001632:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001636:	4b1a      	ldr	r3, [pc, #104]	; (80016a0 <HAL_RCC_OscConfig+0x93c>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800163e:	2b00      	cmp	r3, #0
 8001640:	d11a      	bne.n	8001678 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001642:	4b17      	ldr	r3, [pc, #92]	; (80016a0 <HAL_RCC_OscConfig+0x93c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a16      	ldr	r2, [pc, #88]	; (80016a0 <HAL_RCC_OscConfig+0x93c>)
 8001648:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800164c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800164e:	f7ff f8e1 	bl	8000814 <HAL_GetTick>
 8001652:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001656:	e009      	b.n	800166c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001658:	f7ff f8dc 	bl	8000814 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b64      	cmp	r3, #100	; 0x64
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e3b1      	b.n	8001dd0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800166c:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <HAL_RCC_OscConfig+0x93c>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001674:	2b00      	cmp	r3, #0
 8001676:	d0ef      	beq.n	8001658 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001678:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800167c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d10d      	bne.n	80016a4 <HAL_RCC_OscConfig+0x940>
 8001688:	4b03      	ldr	r3, [pc, #12]	; (8001698 <HAL_RCC_OscConfig+0x934>)
 800168a:	6a1b      	ldr	r3, [r3, #32]
 800168c:	4a02      	ldr	r2, [pc, #8]	; (8001698 <HAL_RCC_OscConfig+0x934>)
 800168e:	f043 0301 	orr.w	r3, r3, #1
 8001692:	6213      	str	r3, [r2, #32]
 8001694:	e03c      	b.n	8001710 <HAL_RCC_OscConfig+0x9ac>
 8001696:	bf00      	nop
 8001698:	40021000 	.word	0x40021000
 800169c:	10908120 	.word	0x10908120
 80016a0:	40007000 	.word	0x40007000
 80016a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d10c      	bne.n	80016ce <HAL_RCC_OscConfig+0x96a>
 80016b4:	4bc1      	ldr	r3, [pc, #772]	; (80019bc <HAL_RCC_OscConfig+0xc58>)
 80016b6:	6a1b      	ldr	r3, [r3, #32]
 80016b8:	4ac0      	ldr	r2, [pc, #768]	; (80019bc <HAL_RCC_OscConfig+0xc58>)
 80016ba:	f023 0301 	bic.w	r3, r3, #1
 80016be:	6213      	str	r3, [r2, #32]
 80016c0:	4bbe      	ldr	r3, [pc, #760]	; (80019bc <HAL_RCC_OscConfig+0xc58>)
 80016c2:	6a1b      	ldr	r3, [r3, #32]
 80016c4:	4abd      	ldr	r2, [pc, #756]	; (80019bc <HAL_RCC_OscConfig+0xc58>)
 80016c6:	f023 0304 	bic.w	r3, r3, #4
 80016ca:	6213      	str	r3, [r2, #32]
 80016cc:	e020      	b.n	8001710 <HAL_RCC_OscConfig+0x9ac>
 80016ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	2b05      	cmp	r3, #5
 80016dc:	d10c      	bne.n	80016f8 <HAL_RCC_OscConfig+0x994>
 80016de:	4bb7      	ldr	r3, [pc, #732]	; (80019bc <HAL_RCC_OscConfig+0xc58>)
 80016e0:	6a1b      	ldr	r3, [r3, #32]
 80016e2:	4ab6      	ldr	r2, [pc, #728]	; (80019bc <HAL_RCC_OscConfig+0xc58>)
 80016e4:	f043 0304 	orr.w	r3, r3, #4
 80016e8:	6213      	str	r3, [r2, #32]
 80016ea:	4bb4      	ldr	r3, [pc, #720]	; (80019bc <HAL_RCC_OscConfig+0xc58>)
 80016ec:	6a1b      	ldr	r3, [r3, #32]
 80016ee:	4ab3      	ldr	r2, [pc, #716]	; (80019bc <HAL_RCC_OscConfig+0xc58>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	6213      	str	r3, [r2, #32]
 80016f6:	e00b      	b.n	8001710 <HAL_RCC_OscConfig+0x9ac>
 80016f8:	4bb0      	ldr	r3, [pc, #704]	; (80019bc <HAL_RCC_OscConfig+0xc58>)
 80016fa:	6a1b      	ldr	r3, [r3, #32]
 80016fc:	4aaf      	ldr	r2, [pc, #700]	; (80019bc <HAL_RCC_OscConfig+0xc58>)
 80016fe:	f023 0301 	bic.w	r3, r3, #1
 8001702:	6213      	str	r3, [r2, #32]
 8001704:	4bad      	ldr	r3, [pc, #692]	; (80019bc <HAL_RCC_OscConfig+0xc58>)
 8001706:	6a1b      	ldr	r3, [r3, #32]
 8001708:	4aac      	ldr	r2, [pc, #688]	; (80019bc <HAL_RCC_OscConfig+0xc58>)
 800170a:	f023 0304 	bic.w	r3, r3, #4
 800170e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001710:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001714:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	2b00      	cmp	r3, #0
 800171e:	f000 8081 	beq.w	8001824 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001722:	f7ff f877 	bl	8000814 <HAL_GetTick>
 8001726:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800172a:	e00b      	b.n	8001744 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800172c:	f7ff f872 	bl	8000814 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	f241 3288 	movw	r2, #5000	; 0x1388
 800173c:	4293      	cmp	r3, r2
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e345      	b.n	8001dd0 <HAL_RCC_OscConfig+0x106c>
 8001744:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001748:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800174c:	2202      	movs	r2, #2
 800174e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001750:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001754:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	fa93 f2a3 	rbit	r2, r3
 800175e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001762:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800176c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001770:	2202      	movs	r2, #2
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001778:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	fa93 f2a3 	rbit	r2, r3
 8001782:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001786:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800178a:	601a      	str	r2, [r3, #0]
  return result;
 800178c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001790:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001794:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001796:	fab3 f383 	clz	r3, r3
 800179a:	b2db      	uxtb	r3, r3
 800179c:	095b      	lsrs	r3, r3, #5
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	f043 0302 	orr.w	r3, r3, #2
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d102      	bne.n	80017b0 <HAL_RCC_OscConfig+0xa4c>
 80017aa:	4b84      	ldr	r3, [pc, #528]	; (80019bc <HAL_RCC_OscConfig+0xc58>)
 80017ac:	6a1b      	ldr	r3, [r3, #32]
 80017ae:	e013      	b.n	80017d8 <HAL_RCC_OscConfig+0xa74>
 80017b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017b4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80017b8:	2202      	movs	r2, #2
 80017ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	fa93 f2a3 	rbit	r2, r3
 80017ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ce:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	4b79      	ldr	r3, [pc, #484]	; (80019bc <HAL_RCC_OscConfig+0xc58>)
 80017d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017dc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80017e0:	2102      	movs	r1, #2
 80017e2:	6011      	str	r1, [r2, #0]
 80017e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017e8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80017ec:	6812      	ldr	r2, [r2, #0]
 80017ee:	fa92 f1a2 	rbit	r1, r2
 80017f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017f6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80017fa:	6011      	str	r1, [r2, #0]
  return result;
 80017fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001800:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001804:	6812      	ldr	r2, [r2, #0]
 8001806:	fab2 f282 	clz	r2, r2
 800180a:	b2d2      	uxtb	r2, r2
 800180c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001810:	b2d2      	uxtb	r2, r2
 8001812:	f002 021f 	and.w	r2, r2, #31
 8001816:	2101      	movs	r1, #1
 8001818:	fa01 f202 	lsl.w	r2, r1, r2
 800181c:	4013      	ands	r3, r2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d084      	beq.n	800172c <HAL_RCC_OscConfig+0x9c8>
 8001822:	e07f      	b.n	8001924 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001824:	f7fe fff6 	bl	8000814 <HAL_GetTick>
 8001828:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800182c:	e00b      	b.n	8001846 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800182e:	f7fe fff1 	bl	8000814 <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	f241 3288 	movw	r2, #5000	; 0x1388
 800183e:	4293      	cmp	r3, r2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e2c4      	b.n	8001dd0 <HAL_RCC_OscConfig+0x106c>
 8001846:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800184a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800184e:	2202      	movs	r2, #2
 8001850:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001852:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001856:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	fa93 f2a3 	rbit	r2, r3
 8001860:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001864:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800186e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001872:	2202      	movs	r2, #2
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800187a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	fa93 f2a3 	rbit	r2, r3
 8001884:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001888:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800188c:	601a      	str	r2, [r3, #0]
  return result;
 800188e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001892:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001896:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001898:	fab3 f383 	clz	r3, r3
 800189c:	b2db      	uxtb	r3, r3
 800189e:	095b      	lsrs	r3, r3, #5
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	f043 0302 	orr.w	r3, r3, #2
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d102      	bne.n	80018b2 <HAL_RCC_OscConfig+0xb4e>
 80018ac:	4b43      	ldr	r3, [pc, #268]	; (80019bc <HAL_RCC_OscConfig+0xc58>)
 80018ae:	6a1b      	ldr	r3, [r3, #32]
 80018b0:	e013      	b.n	80018da <HAL_RCC_OscConfig+0xb76>
 80018b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80018ba:	2202      	movs	r2, #2
 80018bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018c2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	fa93 f2a3 	rbit	r2, r3
 80018cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018d0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	4b39      	ldr	r3, [pc, #228]	; (80019bc <HAL_RCC_OscConfig+0xc58>)
 80018d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018de:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80018e2:	2102      	movs	r1, #2
 80018e4:	6011      	str	r1, [r2, #0]
 80018e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018ea:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80018ee:	6812      	ldr	r2, [r2, #0]
 80018f0:	fa92 f1a2 	rbit	r1, r2
 80018f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018f8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80018fc:	6011      	str	r1, [r2, #0]
  return result;
 80018fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001902:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001906:	6812      	ldr	r2, [r2, #0]
 8001908:	fab2 f282 	clz	r2, r2
 800190c:	b2d2      	uxtb	r2, r2
 800190e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001912:	b2d2      	uxtb	r2, r2
 8001914:	f002 021f 	and.w	r2, r2, #31
 8001918:	2101      	movs	r1, #1
 800191a:	fa01 f202 	lsl.w	r2, r1, r2
 800191e:	4013      	ands	r3, r2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d184      	bne.n	800182e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001924:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001928:	2b01      	cmp	r3, #1
 800192a:	d105      	bne.n	8001938 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800192c:	4b23      	ldr	r3, [pc, #140]	; (80019bc <HAL_RCC_OscConfig+0xc58>)
 800192e:	69db      	ldr	r3, [r3, #28]
 8001930:	4a22      	ldr	r2, [pc, #136]	; (80019bc <HAL_RCC_OscConfig+0xc58>)
 8001932:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001936:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001938:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800193c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	69db      	ldr	r3, [r3, #28]
 8001944:	2b00      	cmp	r3, #0
 8001946:	f000 8242 	beq.w	8001dce <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800194a:	4b1c      	ldr	r3, [pc, #112]	; (80019bc <HAL_RCC_OscConfig+0xc58>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f003 030c 	and.w	r3, r3, #12
 8001952:	2b08      	cmp	r3, #8
 8001954:	f000 8213 	beq.w	8001d7e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001958:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800195c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	69db      	ldr	r3, [r3, #28]
 8001964:	2b02      	cmp	r3, #2
 8001966:	f040 8162 	bne.w	8001c2e <HAL_RCC_OscConfig+0xeca>
 800196a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800196e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001972:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001976:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001978:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800197c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	fa93 f2a3 	rbit	r2, r3
 8001986:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800198a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800198e:	601a      	str	r2, [r3, #0]
  return result;
 8001990:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001994:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001998:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800199a:	fab3 f383 	clz	r3, r3
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	461a      	mov	r2, r3
 80019ac:	2300      	movs	r3, #0
 80019ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b0:	f7fe ff30 	bl	8000814 <HAL_GetTick>
 80019b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019b8:	e00c      	b.n	80019d4 <HAL_RCC_OscConfig+0xc70>
 80019ba:	bf00      	nop
 80019bc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019c0:	f7fe ff28 	bl	8000814 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e1fd      	b.n	8001dd0 <HAL_RCC_OscConfig+0x106c>
 80019d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80019dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019e6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	fa93 f2a3 	rbit	r2, r3
 80019f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80019f8:	601a      	str	r2, [r3, #0]
  return result;
 80019fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019fe:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001a02:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a04:	fab3 f383 	clz	r3, r3
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	095b      	lsrs	r3, r3, #5
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	f043 0301 	orr.w	r3, r3, #1
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d102      	bne.n	8001a1e <HAL_RCC_OscConfig+0xcba>
 8001a18:	4bb0      	ldr	r3, [pc, #704]	; (8001cdc <HAL_RCC_OscConfig+0xf78>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	e027      	b.n	8001a6e <HAL_RCC_OscConfig+0xd0a>
 8001a1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a22:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001a26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a30:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	fa93 f2a3 	rbit	r2, r3
 8001a3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a3e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a48:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001a4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a56:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	fa93 f2a3 	rbit	r2, r3
 8001a60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a64:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	4b9c      	ldr	r3, [pc, #624]	; (8001cdc <HAL_RCC_OscConfig+0xf78>)
 8001a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a72:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001a76:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a7a:	6011      	str	r1, [r2, #0]
 8001a7c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a80:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001a84:	6812      	ldr	r2, [r2, #0]
 8001a86:	fa92 f1a2 	rbit	r1, r2
 8001a8a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a8e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001a92:	6011      	str	r1, [r2, #0]
  return result;
 8001a94:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a98:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001a9c:	6812      	ldr	r2, [r2, #0]
 8001a9e:	fab2 f282 	clz	r2, r2
 8001aa2:	b2d2      	uxtb	r2, r2
 8001aa4:	f042 0220 	orr.w	r2, r2, #32
 8001aa8:	b2d2      	uxtb	r2, r2
 8001aaa:	f002 021f 	and.w	r2, r2, #31
 8001aae:	2101      	movs	r1, #1
 8001ab0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d182      	bne.n	80019c0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001aba:	4b88      	ldr	r3, [pc, #544]	; (8001cdc <HAL_RCC_OscConfig+0xf78>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ac2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001ace:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6a1b      	ldr	r3, [r3, #32]
 8001ada:	430b      	orrs	r3, r1
 8001adc:	497f      	ldr	r1, [pc, #508]	; (8001cdc <HAL_RCC_OscConfig+0xf78>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	604b      	str	r3, [r1, #4]
 8001ae2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001aea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001aee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	fa93 f2a3 	rbit	r2, r3
 8001afe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b02:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001b06:	601a      	str	r2, [r3, #0]
  return result;
 8001b08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b0c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001b10:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b12:	fab3 f383 	clz	r3, r3
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b1c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	461a      	mov	r2, r3
 8001b24:	2301      	movs	r3, #1
 8001b26:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b28:	f7fe fe74 	bl	8000814 <HAL_GetTick>
 8001b2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b30:	e009      	b.n	8001b46 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b32:	f7fe fe6f 	bl	8000814 <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e144      	b.n	8001dd0 <HAL_RCC_OscConfig+0x106c>
 8001b46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b4a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001b4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b58:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	fa93 f2a3 	rbit	r2, r3
 8001b62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b66:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001b6a:	601a      	str	r2, [r3, #0]
  return result;
 8001b6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b70:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001b74:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b76:	fab3 f383 	clz	r3, r3
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	095b      	lsrs	r3, r3, #5
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d102      	bne.n	8001b90 <HAL_RCC_OscConfig+0xe2c>
 8001b8a:	4b54      	ldr	r3, [pc, #336]	; (8001cdc <HAL_RCC_OscConfig+0xf78>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	e027      	b.n	8001be0 <HAL_RCC_OscConfig+0xe7c>
 8001b90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b94:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001b98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	fa93 f2a3 	rbit	r2, r3
 8001bac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bba:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001bbe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	fa93 f2a3 	rbit	r2, r3
 8001bd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	4b3f      	ldr	r3, [pc, #252]	; (8001cdc <HAL_RCC_OscConfig+0xf78>)
 8001bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001be4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001be8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001bec:	6011      	str	r1, [r2, #0]
 8001bee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bf2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001bf6:	6812      	ldr	r2, [r2, #0]
 8001bf8:	fa92 f1a2 	rbit	r1, r2
 8001bfc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c00:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001c04:	6011      	str	r1, [r2, #0]
  return result;
 8001c06:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c0a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001c0e:	6812      	ldr	r2, [r2, #0]
 8001c10:	fab2 f282 	clz	r2, r2
 8001c14:	b2d2      	uxtb	r2, r2
 8001c16:	f042 0220 	orr.w	r2, r2, #32
 8001c1a:	b2d2      	uxtb	r2, r2
 8001c1c:	f002 021f 	and.w	r2, r2, #31
 8001c20:	2101      	movs	r1, #1
 8001c22:	fa01 f202 	lsl.w	r2, r1, r2
 8001c26:	4013      	ands	r3, r2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d082      	beq.n	8001b32 <HAL_RCC_OscConfig+0xdce>
 8001c2c:	e0cf      	b.n	8001dce <HAL_RCC_OscConfig+0x106a>
 8001c2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c32:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001c36:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c40:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	fa93 f2a3 	rbit	r2, r3
 8001c4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c4e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001c52:	601a      	str	r2, [r3, #0]
  return result;
 8001c54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c58:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001c5c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c5e:	fab3 f383 	clz	r3, r3
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c68:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	461a      	mov	r2, r3
 8001c70:	2300      	movs	r3, #0
 8001c72:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c74:	f7fe fdce 	bl	8000814 <HAL_GetTick>
 8001c78:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c7c:	e009      	b.n	8001c92 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c7e:	f7fe fdc9 	bl	8000814 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e09e      	b.n	8001dd0 <HAL_RCC_OscConfig+0x106c>
 8001c92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c96:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001c9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	fa93 f2a3 	rbit	r2, r3
 8001cae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001cb6:	601a      	str	r2, [r3, #0]
  return result;
 8001cb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cbc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001cc0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cc2:	fab3 f383 	clz	r3, r3
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	095b      	lsrs	r3, r3, #5
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	f043 0301 	orr.w	r3, r3, #1
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d104      	bne.n	8001ce0 <HAL_RCC_OscConfig+0xf7c>
 8001cd6:	4b01      	ldr	r3, [pc, #4]	; (8001cdc <HAL_RCC_OscConfig+0xf78>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	e029      	b.n	8001d30 <HAL_RCC_OscConfig+0xfcc>
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001ce8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	fa93 f2a3 	rbit	r2, r3
 8001cfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d00:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d0a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001d0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d18:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	fa93 f2a3 	rbit	r2, r3
 8001d22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d26:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	4b2b      	ldr	r3, [pc, #172]	; (8001ddc <HAL_RCC_OscConfig+0x1078>)
 8001d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d30:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d34:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001d38:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d3c:	6011      	str	r1, [r2, #0]
 8001d3e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d42:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001d46:	6812      	ldr	r2, [r2, #0]
 8001d48:	fa92 f1a2 	rbit	r1, r2
 8001d4c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d50:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001d54:	6011      	str	r1, [r2, #0]
  return result;
 8001d56:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d5a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001d5e:	6812      	ldr	r2, [r2, #0]
 8001d60:	fab2 f282 	clz	r2, r2
 8001d64:	b2d2      	uxtb	r2, r2
 8001d66:	f042 0220 	orr.w	r2, r2, #32
 8001d6a:	b2d2      	uxtb	r2, r2
 8001d6c:	f002 021f 	and.w	r2, r2, #31
 8001d70:	2101      	movs	r1, #1
 8001d72:	fa01 f202 	lsl.w	r2, r1, r2
 8001d76:	4013      	ands	r3, r2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d180      	bne.n	8001c7e <HAL_RCC_OscConfig+0xf1a>
 8001d7c:	e027      	b.n	8001dce <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d101      	bne.n	8001d92 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e01e      	b.n	8001dd0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d92:	4b12      	ldr	r3, [pc, #72]	; (8001ddc <HAL_RCC_OscConfig+0x1078>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d9a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d9e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001da2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6a1b      	ldr	r3, [r3, #32]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d10b      	bne.n	8001dca <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001db2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001db6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001dba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dbe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d001      	beq.n	8001dce <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e000      	b.n	8001dd0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40021000 	.word	0x40021000

08001de0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b09e      	sub	sp, #120	; 0x78
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001dea:	2300      	movs	r3, #0
 8001dec:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d101      	bne.n	8001df8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e162      	b.n	80020be <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001df8:	4b90      	ldr	r3, [pc, #576]	; (800203c <HAL_RCC_ClockConfig+0x25c>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	683a      	ldr	r2, [r7, #0]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d910      	bls.n	8001e28 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e06:	4b8d      	ldr	r3, [pc, #564]	; (800203c <HAL_RCC_ClockConfig+0x25c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f023 0207 	bic.w	r2, r3, #7
 8001e0e:	498b      	ldr	r1, [pc, #556]	; (800203c <HAL_RCC_ClockConfig+0x25c>)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e16:	4b89      	ldr	r3, [pc, #548]	; (800203c <HAL_RCC_ClockConfig+0x25c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d001      	beq.n	8001e28 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e14a      	b.n	80020be <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d008      	beq.n	8001e46 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e34:	4b82      	ldr	r3, [pc, #520]	; (8002040 <HAL_RCC_ClockConfig+0x260>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	497f      	ldr	r1, [pc, #508]	; (8002040 <HAL_RCC_ClockConfig+0x260>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f000 80dc 	beq.w	800200c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d13c      	bne.n	8001ed6 <HAL_RCC_ClockConfig+0xf6>
 8001e5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e60:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e64:	fa93 f3a3 	rbit	r3, r3
 8001e68:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001e6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e6c:	fab3 f383 	clz	r3, r3
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	095b      	lsrs	r3, r3, #5
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	f043 0301 	orr.w	r3, r3, #1
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d102      	bne.n	8001e86 <HAL_RCC_ClockConfig+0xa6>
 8001e80:	4b6f      	ldr	r3, [pc, #444]	; (8002040 <HAL_RCC_ClockConfig+0x260>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	e00f      	b.n	8001ea6 <HAL_RCC_ClockConfig+0xc6>
 8001e86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e8a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e8e:	fa93 f3a3 	rbit	r3, r3
 8001e92:	667b      	str	r3, [r7, #100]	; 0x64
 8001e94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e98:	663b      	str	r3, [r7, #96]	; 0x60
 8001e9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e9c:	fa93 f3a3 	rbit	r3, r3
 8001ea0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ea2:	4b67      	ldr	r3, [pc, #412]	; (8002040 <HAL_RCC_ClockConfig+0x260>)
 8001ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001eaa:	65ba      	str	r2, [r7, #88]	; 0x58
 8001eac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001eae:	fa92 f2a2 	rbit	r2, r2
 8001eb2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001eb4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001eb6:	fab2 f282 	clz	r2, r2
 8001eba:	b2d2      	uxtb	r2, r2
 8001ebc:	f042 0220 	orr.w	r2, r2, #32
 8001ec0:	b2d2      	uxtb	r2, r2
 8001ec2:	f002 021f 	and.w	r2, r2, #31
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	fa01 f202 	lsl.w	r2, r1, r2
 8001ecc:	4013      	ands	r3, r2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d17b      	bne.n	8001fca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e0f3      	b.n	80020be <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d13c      	bne.n	8001f58 <HAL_RCC_ClockConfig+0x178>
 8001ede:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ee2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ee6:	fa93 f3a3 	rbit	r3, r3
 8001eea:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001eec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eee:	fab3 f383 	clz	r3, r3
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	095b      	lsrs	r3, r3, #5
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d102      	bne.n	8001f08 <HAL_RCC_ClockConfig+0x128>
 8001f02:	4b4f      	ldr	r3, [pc, #316]	; (8002040 <HAL_RCC_ClockConfig+0x260>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	e00f      	b.n	8001f28 <HAL_RCC_ClockConfig+0x148>
 8001f08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f0c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f10:	fa93 f3a3 	rbit	r3, r3
 8001f14:	647b      	str	r3, [r7, #68]	; 0x44
 8001f16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f1a:	643b      	str	r3, [r7, #64]	; 0x40
 8001f1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f1e:	fa93 f3a3 	rbit	r3, r3
 8001f22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f24:	4b46      	ldr	r3, [pc, #280]	; (8002040 <HAL_RCC_ClockConfig+0x260>)
 8001f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f2c:	63ba      	str	r2, [r7, #56]	; 0x38
 8001f2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f30:	fa92 f2a2 	rbit	r2, r2
 8001f34:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001f36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f38:	fab2 f282 	clz	r2, r2
 8001f3c:	b2d2      	uxtb	r2, r2
 8001f3e:	f042 0220 	orr.w	r2, r2, #32
 8001f42:	b2d2      	uxtb	r2, r2
 8001f44:	f002 021f 	and.w	r2, r2, #31
 8001f48:	2101      	movs	r1, #1
 8001f4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f4e:	4013      	ands	r3, r2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d13a      	bne.n	8001fca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e0b2      	b.n	80020be <HAL_RCC_ClockConfig+0x2de>
 8001f58:	2302      	movs	r3, #2
 8001f5a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f5e:	fa93 f3a3 	rbit	r3, r3
 8001f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f66:	fab3 f383 	clz	r3, r3
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	095b      	lsrs	r3, r3, #5
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	f043 0301 	orr.w	r3, r3, #1
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d102      	bne.n	8001f80 <HAL_RCC_ClockConfig+0x1a0>
 8001f7a:	4b31      	ldr	r3, [pc, #196]	; (8002040 <HAL_RCC_ClockConfig+0x260>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	e00d      	b.n	8001f9c <HAL_RCC_ClockConfig+0x1bc>
 8001f80:	2302      	movs	r3, #2
 8001f82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f86:	fa93 f3a3 	rbit	r3, r3
 8001f8a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	623b      	str	r3, [r7, #32]
 8001f90:	6a3b      	ldr	r3, [r7, #32]
 8001f92:	fa93 f3a3 	rbit	r3, r3
 8001f96:	61fb      	str	r3, [r7, #28]
 8001f98:	4b29      	ldr	r3, [pc, #164]	; (8002040 <HAL_RCC_ClockConfig+0x260>)
 8001f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9c:	2202      	movs	r2, #2
 8001f9e:	61ba      	str	r2, [r7, #24]
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	fa92 f2a2 	rbit	r2, r2
 8001fa6:	617a      	str	r2, [r7, #20]
  return result;
 8001fa8:	697a      	ldr	r2, [r7, #20]
 8001faa:	fab2 f282 	clz	r2, r2
 8001fae:	b2d2      	uxtb	r2, r2
 8001fb0:	f042 0220 	orr.w	r2, r2, #32
 8001fb4:	b2d2      	uxtb	r2, r2
 8001fb6:	f002 021f 	and.w	r2, r2, #31
 8001fba:	2101      	movs	r1, #1
 8001fbc:	fa01 f202 	lsl.w	r2, r1, r2
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e079      	b.n	80020be <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fca:	4b1d      	ldr	r3, [pc, #116]	; (8002040 <HAL_RCC_ClockConfig+0x260>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f023 0203 	bic.w	r2, r3, #3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	491a      	ldr	r1, [pc, #104]	; (8002040 <HAL_RCC_ClockConfig+0x260>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fdc:	f7fe fc1a 	bl	8000814 <HAL_GetTick>
 8001fe0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fe2:	e00a      	b.n	8001ffa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fe4:	f7fe fc16 	bl	8000814 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e061      	b.n	80020be <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ffa:	4b11      	ldr	r3, [pc, #68]	; (8002040 <HAL_RCC_ClockConfig+0x260>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f003 020c 	and.w	r2, r3, #12
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	429a      	cmp	r2, r3
 800200a:	d1eb      	bne.n	8001fe4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800200c:	4b0b      	ldr	r3, [pc, #44]	; (800203c <HAL_RCC_ClockConfig+0x25c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0307 	and.w	r3, r3, #7
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	429a      	cmp	r2, r3
 8002018:	d214      	bcs.n	8002044 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800201a:	4b08      	ldr	r3, [pc, #32]	; (800203c <HAL_RCC_ClockConfig+0x25c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f023 0207 	bic.w	r2, r3, #7
 8002022:	4906      	ldr	r1, [pc, #24]	; (800203c <HAL_RCC_ClockConfig+0x25c>)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	4313      	orrs	r3, r2
 8002028:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800202a:	4b04      	ldr	r3, [pc, #16]	; (800203c <HAL_RCC_ClockConfig+0x25c>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	429a      	cmp	r2, r3
 8002036:	d005      	beq.n	8002044 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e040      	b.n	80020be <HAL_RCC_ClockConfig+0x2de>
 800203c:	40022000 	.word	0x40022000
 8002040:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0304 	and.w	r3, r3, #4
 800204c:	2b00      	cmp	r3, #0
 800204e:	d008      	beq.n	8002062 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002050:	4b1d      	ldr	r3, [pc, #116]	; (80020c8 <HAL_RCC_ClockConfig+0x2e8>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	491a      	ldr	r1, [pc, #104]	; (80020c8 <HAL_RCC_ClockConfig+0x2e8>)
 800205e:	4313      	orrs	r3, r2
 8002060:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0308 	and.w	r3, r3, #8
 800206a:	2b00      	cmp	r3, #0
 800206c:	d009      	beq.n	8002082 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800206e:	4b16      	ldr	r3, [pc, #88]	; (80020c8 <HAL_RCC_ClockConfig+0x2e8>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	4912      	ldr	r1, [pc, #72]	; (80020c8 <HAL_RCC_ClockConfig+0x2e8>)
 800207e:	4313      	orrs	r3, r2
 8002080:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002082:	f000 f829 	bl	80020d8 <HAL_RCC_GetSysClockFreq>
 8002086:	4601      	mov	r1, r0
 8002088:	4b0f      	ldr	r3, [pc, #60]	; (80020c8 <HAL_RCC_ClockConfig+0x2e8>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002090:	22f0      	movs	r2, #240	; 0xf0
 8002092:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	fa92 f2a2 	rbit	r2, r2
 800209a:	60fa      	str	r2, [r7, #12]
  return result;
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	fab2 f282 	clz	r2, r2
 80020a2:	b2d2      	uxtb	r2, r2
 80020a4:	40d3      	lsrs	r3, r2
 80020a6:	4a09      	ldr	r2, [pc, #36]	; (80020cc <HAL_RCC_ClockConfig+0x2ec>)
 80020a8:	5cd3      	ldrb	r3, [r2, r3]
 80020aa:	fa21 f303 	lsr.w	r3, r1, r3
 80020ae:	4a08      	ldr	r2, [pc, #32]	; (80020d0 <HAL_RCC_ClockConfig+0x2f0>)
 80020b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80020b2:	4b08      	ldr	r3, [pc, #32]	; (80020d4 <HAL_RCC_ClockConfig+0x2f4>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7fe fb68 	bl	800078c <HAL_InitTick>
  
  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3778      	adds	r7, #120	; 0x78
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40021000 	.word	0x40021000
 80020cc:	080039f0 	.word	0x080039f0
 80020d0:	20000004 	.word	0x20000004
 80020d4:	20000008 	.word	0x20000008

080020d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	b087      	sub	sp, #28
 80020dc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020de:	2300      	movs	r3, #0
 80020e0:	60fb      	str	r3, [r7, #12]
 80020e2:	2300      	movs	r3, #0
 80020e4:	60bb      	str	r3, [r7, #8]
 80020e6:	2300      	movs	r3, #0
 80020e8:	617b      	str	r3, [r7, #20]
 80020ea:	2300      	movs	r3, #0
 80020ec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80020ee:	2300      	movs	r3, #0
 80020f0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80020f2:	4b1e      	ldr	r3, [pc, #120]	; (800216c <HAL_RCC_GetSysClockFreq+0x94>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f003 030c 	and.w	r3, r3, #12
 80020fe:	2b04      	cmp	r3, #4
 8002100:	d002      	beq.n	8002108 <HAL_RCC_GetSysClockFreq+0x30>
 8002102:	2b08      	cmp	r3, #8
 8002104:	d003      	beq.n	800210e <HAL_RCC_GetSysClockFreq+0x36>
 8002106:	e026      	b.n	8002156 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002108:	4b19      	ldr	r3, [pc, #100]	; (8002170 <HAL_RCC_GetSysClockFreq+0x98>)
 800210a:	613b      	str	r3, [r7, #16]
      break;
 800210c:	e026      	b.n	800215c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	0c9b      	lsrs	r3, r3, #18
 8002112:	f003 030f 	and.w	r3, r3, #15
 8002116:	4a17      	ldr	r2, [pc, #92]	; (8002174 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002118:	5cd3      	ldrb	r3, [r2, r3]
 800211a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 800211c:	4b13      	ldr	r3, [pc, #76]	; (800216c <HAL_RCC_GetSysClockFreq+0x94>)
 800211e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002120:	f003 030f 	and.w	r3, r3, #15
 8002124:	4a14      	ldr	r2, [pc, #80]	; (8002178 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002126:	5cd3      	ldrb	r3, [r2, r3]
 8002128:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d008      	beq.n	8002146 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002134:	4a0e      	ldr	r2, [pc, #56]	; (8002170 <HAL_RCC_GetSysClockFreq+0x98>)
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	fbb2 f2f3 	udiv	r2, r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	fb02 f303 	mul.w	r3, r2, r3
 8002142:	617b      	str	r3, [r7, #20]
 8002144:	e004      	b.n	8002150 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a0c      	ldr	r2, [pc, #48]	; (800217c <HAL_RCC_GetSysClockFreq+0xa4>)
 800214a:	fb02 f303 	mul.w	r3, r2, r3
 800214e:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	613b      	str	r3, [r7, #16]
      break;
 8002154:	e002      	b.n	800215c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002156:	4b06      	ldr	r3, [pc, #24]	; (8002170 <HAL_RCC_GetSysClockFreq+0x98>)
 8002158:	613b      	str	r3, [r7, #16]
      break;
 800215a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800215c:	693b      	ldr	r3, [r7, #16]
}
 800215e:	4618      	mov	r0, r3
 8002160:	371c      	adds	r7, #28
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	40021000 	.word	0x40021000
 8002170:	007a1200 	.word	0x007a1200
 8002174:	08003a08 	.word	0x08003a08
 8002178:	08003a18 	.word	0x08003a18
 800217c:	003d0900 	.word	0x003d0900

08002180 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002184:	4b03      	ldr	r3, [pc, #12]	; (8002194 <HAL_RCC_GetHCLKFreq+0x14>)
 8002186:	681b      	ldr	r3, [r3, #0]
}
 8002188:	4618      	mov	r0, r3
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	20000004 	.word	0x20000004

08002198 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800219e:	f7ff ffef 	bl	8002180 <HAL_RCC_GetHCLKFreq>
 80021a2:	4601      	mov	r1, r0
 80021a4:	4b0b      	ldr	r3, [pc, #44]	; (80021d4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80021ac:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80021b0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	fa92 f2a2 	rbit	r2, r2
 80021b8:	603a      	str	r2, [r7, #0]
  return result;
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	fab2 f282 	clz	r2, r2
 80021c0:	b2d2      	uxtb	r2, r2
 80021c2:	40d3      	lsrs	r3, r2
 80021c4:	4a04      	ldr	r2, [pc, #16]	; (80021d8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80021c6:	5cd3      	ldrb	r3, [r2, r3]
 80021c8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80021cc:	4618      	mov	r0, r3
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40021000 	.word	0x40021000
 80021d8:	08003a00 	.word	0x08003a00

080021dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80021e2:	f7ff ffcd 	bl	8002180 <HAL_RCC_GetHCLKFreq>
 80021e6:	4601      	mov	r1, r0
 80021e8:	4b0b      	ldr	r3, [pc, #44]	; (8002218 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80021f0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80021f4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	fa92 f2a2 	rbit	r2, r2
 80021fc:	603a      	str	r2, [r7, #0]
  return result;
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	fab2 f282 	clz	r2, r2
 8002204:	b2d2      	uxtb	r2, r2
 8002206:	40d3      	lsrs	r3, r2
 8002208:	4a04      	ldr	r2, [pc, #16]	; (800221c <HAL_RCC_GetPCLK2Freq+0x40>)
 800220a:	5cd3      	ldrb	r3, [r2, r3]
 800220c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002210:	4618      	mov	r0, r3
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40021000 	.word	0x40021000
 800221c:	08003a00 	.word	0x08003a00

08002220 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b092      	sub	sp, #72	; 0x48
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002228:	2300      	movs	r3, #0
 800222a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800222c:	2300      	movs	r3, #0
 800222e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002230:	2300      	movs	r3, #0
 8002232:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800223e:	2b00      	cmp	r3, #0
 8002240:	f000 80d4 	beq.w	80023ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002244:	4b4e      	ldr	r3, [pc, #312]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002246:	69db      	ldr	r3, [r3, #28]
 8002248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d10e      	bne.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002250:	4b4b      	ldr	r3, [pc, #300]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002252:	69db      	ldr	r3, [r3, #28]
 8002254:	4a4a      	ldr	r2, [pc, #296]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002256:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800225a:	61d3      	str	r3, [r2, #28]
 800225c:	4b48      	ldr	r3, [pc, #288]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800225e:	69db      	ldr	r3, [r3, #28]
 8002260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002264:	60bb      	str	r3, [r7, #8]
 8002266:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002268:	2301      	movs	r3, #1
 800226a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800226e:	4b45      	ldr	r3, [pc, #276]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002276:	2b00      	cmp	r3, #0
 8002278:	d118      	bne.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800227a:	4b42      	ldr	r3, [pc, #264]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a41      	ldr	r2, [pc, #260]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002284:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002286:	f7fe fac5 	bl	8000814 <HAL_GetTick>
 800228a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800228c:	e008      	b.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800228e:	f7fe fac1 	bl	8000814 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b64      	cmp	r3, #100	; 0x64
 800229a:	d901      	bls.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e169      	b.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a0:	4b38      	ldr	r3, [pc, #224]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d0f0      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022ac:	4b34      	ldr	r3, [pc, #208]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f000 8084 	beq.w	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d07c      	beq.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022cc:	4b2c      	ldr	r3, [pc, #176]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022ce:	6a1b      	ldr	r3, [r3, #32]
 80022d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022de:	fa93 f3a3 	rbit	r3, r3
 80022e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80022e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022e6:	fab3 f383 	clz	r3, r3
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	461a      	mov	r2, r3
 80022ee:	4b26      	ldr	r3, [pc, #152]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022f0:	4413      	add	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	461a      	mov	r2, r3
 80022f6:	2301      	movs	r3, #1
 80022f8:	6013      	str	r3, [r2, #0]
 80022fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022fe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002302:	fa93 f3a3 	rbit	r3, r3
 8002306:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800230a:	fab3 f383 	clz	r3, r3
 800230e:	b2db      	uxtb	r3, r3
 8002310:	461a      	mov	r2, r3
 8002312:	4b1d      	ldr	r3, [pc, #116]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002314:	4413      	add	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	461a      	mov	r2, r3
 800231a:	2300      	movs	r3, #0
 800231c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800231e:	4a18      	ldr	r2, [pc, #96]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002322:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b00      	cmp	r3, #0
 800232c:	d04b      	beq.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232e:	f7fe fa71 	bl	8000814 <HAL_GetTick>
 8002332:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002334:	e00a      	b.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002336:	f7fe fa6d 	bl	8000814 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	f241 3288 	movw	r2, #5000	; 0x1388
 8002344:	4293      	cmp	r3, r2
 8002346:	d901      	bls.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e113      	b.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800234c:	2302      	movs	r3, #2
 800234e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002352:	fa93 f3a3 	rbit	r3, r3
 8002356:	627b      	str	r3, [r7, #36]	; 0x24
 8002358:	2302      	movs	r3, #2
 800235a:	623b      	str	r3, [r7, #32]
 800235c:	6a3b      	ldr	r3, [r7, #32]
 800235e:	fa93 f3a3 	rbit	r3, r3
 8002362:	61fb      	str	r3, [r7, #28]
  return result;
 8002364:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002366:	fab3 f383 	clz	r3, r3
 800236a:	b2db      	uxtb	r3, r3
 800236c:	095b      	lsrs	r3, r3, #5
 800236e:	b2db      	uxtb	r3, r3
 8002370:	f043 0302 	orr.w	r3, r3, #2
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d108      	bne.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800237a:	4b01      	ldr	r3, [pc, #4]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	e00d      	b.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002380:	40021000 	.word	0x40021000
 8002384:	40007000 	.word	0x40007000
 8002388:	10908100 	.word	0x10908100
 800238c:	2302      	movs	r3, #2
 800238e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	fa93 f3a3 	rbit	r3, r3
 8002396:	617b      	str	r3, [r7, #20]
 8002398:	4b78      	ldr	r3, [pc, #480]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800239a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239c:	2202      	movs	r2, #2
 800239e:	613a      	str	r2, [r7, #16]
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	fa92 f2a2 	rbit	r2, r2
 80023a6:	60fa      	str	r2, [r7, #12]
  return result;
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	fab2 f282 	clz	r2, r2
 80023ae:	b2d2      	uxtb	r2, r2
 80023b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	f002 021f 	and.w	r2, r2, #31
 80023ba:	2101      	movs	r1, #1
 80023bc:	fa01 f202 	lsl.w	r2, r1, r2
 80023c0:	4013      	ands	r3, r2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0b7      	beq.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80023c6:	4b6d      	ldr	r3, [pc, #436]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023c8:	6a1b      	ldr	r3, [r3, #32]
 80023ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	496a      	ldr	r1, [pc, #424]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023d8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d105      	bne.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023e0:	4b66      	ldr	r3, [pc, #408]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023e2:	69db      	ldr	r3, [r3, #28]
 80023e4:	4a65      	ldr	r2, [pc, #404]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023ea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d008      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023f8:	4b60      	ldr	r3, [pc, #384]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fc:	f023 0203 	bic.w	r2, r3, #3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	495d      	ldr	r1, [pc, #372]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002406:	4313      	orrs	r3, r2
 8002408:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d008      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002416:	4b59      	ldr	r3, [pc, #356]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	4956      	ldr	r1, [pc, #344]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002424:	4313      	orrs	r3, r2
 8002426:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0304 	and.w	r3, r3, #4
 8002430:	2b00      	cmp	r3, #0
 8002432:	d008      	beq.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002434:	4b51      	ldr	r3, [pc, #324]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002438:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	494e      	ldr	r1, [pc, #312]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002442:	4313      	orrs	r3, r2
 8002444:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0320 	and.w	r3, r3, #32
 800244e:	2b00      	cmp	r3, #0
 8002450:	d008      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002452:	4b4a      	ldr	r3, [pc, #296]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	f023 0210 	bic.w	r2, r3, #16
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	4947      	ldr	r1, [pc, #284]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002460:	4313      	orrs	r3, r2
 8002462:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d008      	beq.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002470:	4b42      	ldr	r3, [pc, #264]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800247c:	493f      	ldr	r1, [pc, #252]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800247e:	4313      	orrs	r3, r2
 8002480:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800248a:	2b00      	cmp	r3, #0
 800248c:	d008      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800248e:	4b3b      	ldr	r3, [pc, #236]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	f023 0220 	bic.w	r2, r3, #32
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a1b      	ldr	r3, [r3, #32]
 800249a:	4938      	ldr	r1, [pc, #224]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800249c:	4313      	orrs	r3, r2
 800249e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0308 	and.w	r3, r3, #8
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d008      	beq.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024ac:	4b33      	ldr	r3, [pc, #204]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	695b      	ldr	r3, [r3, #20]
 80024b8:	4930      	ldr	r1, [pc, #192]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0310 	and.w	r3, r3, #16
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d008      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024ca:	4b2c      	ldr	r3, [pc, #176]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	4929      	ldr	r1, [pc, #164]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d008      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80024e8:	4b24      	ldr	r3, [pc, #144]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f4:	4921      	ldr	r1, [pc, #132]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002502:	2b00      	cmp	r3, #0
 8002504:	d008      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002506:	4b1d      	ldr	r3, [pc, #116]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002512:	491a      	ldr	r1, [pc, #104]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002514:	4313      	orrs	r3, r2
 8002516:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002520:	2b00      	cmp	r3, #0
 8002522:	d008      	beq.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002524:	4b15      	ldr	r3, [pc, #84]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002528:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002530:	4912      	ldr	r1, [pc, #72]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002532:	4313      	orrs	r3, r2
 8002534:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d008      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002542:	4b0e      	ldr	r3, [pc, #56]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254e:	490b      	ldr	r1, [pc, #44]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002550:	4313      	orrs	r3, r2
 8002552:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d008      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002560:	4b06      	ldr	r3, [pc, #24]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002564:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800256c:	4903      	ldr	r1, [pc, #12]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800256e:	4313      	orrs	r3, r2
 8002570:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	3748      	adds	r7, #72	; 0x48
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40021000 	.word	0x40021000

08002580 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e040      	b.n	8002614 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002596:	2b00      	cmp	r3, #0
 8002598:	d106      	bne.n	80025a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7fd fffe 	bl	80005a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2224      	movs	r2, #36	; 0x24
 80025ac:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f022 0201 	bic.w	r2, r2, #1
 80025bc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d002      	beq.n	80025cc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 fb3c 	bl	8002c44 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f000 f965 	bl	800289c <UART_SetConfig>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d101      	bne.n	80025dc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e01b      	b.n	8002614 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	685a      	ldr	r2, [r3, #4]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	689a      	ldr	r2, [r3, #8]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f042 0201 	orr.w	r2, r2, #1
 800260a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f000 fbbb 	bl	8002d88 <UART_CheckIdleState>
 8002612:	4603      	mov	r3, r0
}
 8002614:	4618      	mov	r0, r3
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b08a      	sub	sp, #40	; 0x28
 8002620:	af02      	add	r7, sp, #8
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	603b      	str	r3, [r7, #0]
 8002628:	4613      	mov	r3, r2
 800262a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002630:	2b20      	cmp	r3, #32
 8002632:	d178      	bne.n	8002726 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d002      	beq.n	8002640 <HAL_UART_Transmit+0x24>
 800263a:	88fb      	ldrh	r3, [r7, #6]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d101      	bne.n	8002644 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e071      	b.n	8002728 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2200      	movs	r2, #0
 8002648:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2221      	movs	r2, #33	; 0x21
 8002650:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002652:	f7fe f8df 	bl	8000814 <HAL_GetTick>
 8002656:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	88fa      	ldrh	r2, [r7, #6]
 800265c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	88fa      	ldrh	r2, [r7, #6]
 8002664:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002670:	d108      	bne.n	8002684 <HAL_UART_Transmit+0x68>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d104      	bne.n	8002684 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800267a:	2300      	movs	r3, #0
 800267c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	61bb      	str	r3, [r7, #24]
 8002682:	e003      	b.n	800268c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002688:	2300      	movs	r3, #0
 800268a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800268c:	e030      	b.n	80026f0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	9300      	str	r3, [sp, #0]
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	2200      	movs	r2, #0
 8002696:	2180      	movs	r1, #128	; 0x80
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f000 fc1d 	bl	8002ed8 <UART_WaitOnFlagUntilTimeout>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d004      	beq.n	80026ae <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2220      	movs	r2, #32
 80026a8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e03c      	b.n	8002728 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d10b      	bne.n	80026cc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	881a      	ldrh	r2, [r3, #0]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026c0:	b292      	uxth	r2, r2
 80026c2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	3302      	adds	r3, #2
 80026c8:	61bb      	str	r3, [r7, #24]
 80026ca:	e008      	b.n	80026de <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	781a      	ldrb	r2, [r3, #0]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	b292      	uxth	r2, r2
 80026d6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	3301      	adds	r3, #1
 80026dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	3b01      	subs	r3, #1
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1c8      	bne.n	800268e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	9300      	str	r3, [sp, #0]
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	2200      	movs	r2, #0
 8002704:	2140      	movs	r1, #64	; 0x40
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f000 fbe6 	bl	8002ed8 <UART_WaitOnFlagUntilTimeout>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d004      	beq.n	800271c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2220      	movs	r2, #32
 8002716:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e005      	b.n	8002728 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2220      	movs	r2, #32
 8002720:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002722:	2300      	movs	r3, #0
 8002724:	e000      	b.n	8002728 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002726:	2302      	movs	r3, #2
  }
}
 8002728:	4618      	mov	r0, r3
 800272a:	3720      	adds	r7, #32
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b08a      	sub	sp, #40	; 0x28
 8002734:	af02      	add	r7, sp, #8
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	603b      	str	r3, [r7, #0]
 800273c:	4613      	mov	r3, r2
 800273e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002746:	2b20      	cmp	r3, #32
 8002748:	f040 80a3 	bne.w	8002892 <HAL_UART_Receive+0x162>
  {
    if ((pData == NULL) || (Size == 0U))
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d002      	beq.n	8002758 <HAL_UART_Receive+0x28>
 8002752:	88fb      	ldrh	r3, [r7, #6]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d101      	bne.n	800275c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e09b      	b.n	8002894 <HAL_UART_Receive+0x164>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2200      	movs	r2, #0
 8002760:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2222      	movs	r2, #34	; 0x22
 8002768:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002772:	f7fe f84f 	bl	8000814 <HAL_GetTick>
 8002776:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	88fa      	ldrh	r2, [r7, #6]
 800277c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	88fa      	ldrh	r2, [r7, #6]
 8002784:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002790:	d10e      	bne.n	80027b0 <HAL_UART_Receive+0x80>
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d105      	bne.n	80027a6 <HAL_UART_Receive+0x76>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f240 12ff 	movw	r2, #511	; 0x1ff
 80027a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80027a4:	e01a      	b.n	80027dc <HAL_UART_Receive+0xac>
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	22ff      	movs	r2, #255	; 0xff
 80027aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80027ae:	e015      	b.n	80027dc <HAL_UART_Receive+0xac>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d10d      	bne.n	80027d4 <HAL_UART_Receive+0xa4>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d104      	bne.n	80027ca <HAL_UART_Receive+0x9a>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	22ff      	movs	r2, #255	; 0xff
 80027c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80027c8:	e008      	b.n	80027dc <HAL_UART_Receive+0xac>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	227f      	movs	r2, #127	; 0x7f
 80027ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80027d2:	e003      	b.n	80027dc <HAL_UART_Receive+0xac>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80027e2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027ec:	d108      	bne.n	8002800 <HAL_UART_Receive+0xd0>
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d104      	bne.n	8002800 <HAL_UART_Receive+0xd0>
    {
      pdata8bits  = NULL;
 80027f6:	2300      	movs	r3, #0
 80027f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	61bb      	str	r3, [r7, #24]
 80027fe:	e003      	b.n	8002808 <HAL_UART_Receive+0xd8>
    }
    else
    {
      pdata8bits  = pData;
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002804:	2300      	movs	r3, #0
 8002806:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002808:	e037      	b.n	800287a <HAL_UART_Receive+0x14a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	2200      	movs	r2, #0
 8002812:	2120      	movs	r1, #32
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f000 fb5f 	bl	8002ed8 <UART_WaitOnFlagUntilTimeout>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d005      	beq.n	800282c <HAL_UART_Receive+0xfc>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2220      	movs	r2, #32
 8002824:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e033      	b.n	8002894 <HAL_UART_Receive+0x164>
      }
      if (pdata8bits == NULL)
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10c      	bne.n	800284c <HAL_UART_Receive+0x11c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002838:	b29a      	uxth	r2, r3
 800283a:	8a7b      	ldrh	r3, [r7, #18]
 800283c:	4013      	ands	r3, r2
 800283e:	b29a      	uxth	r2, r3
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	3302      	adds	r3, #2
 8002848:	61bb      	str	r3, [r7, #24]
 800284a:	e00d      	b.n	8002868 <HAL_UART_Receive+0x138>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002852:	b29b      	uxth	r3, r3
 8002854:	b2da      	uxtb	r2, r3
 8002856:	8a7b      	ldrh	r3, [r7, #18]
 8002858:	b2db      	uxtb	r3, r3
 800285a:	4013      	ands	r3, r2
 800285c:	b2da      	uxtb	r2, r3
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	3301      	adds	r3, #1
 8002866:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800286e:	b29b      	uxth	r3, r3
 8002870:	3b01      	subs	r3, #1
 8002872:	b29a      	uxth	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002880:	b29b      	uxth	r3, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1c1      	bne.n	800280a <HAL_UART_Receive+0xda>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2220      	movs	r2, #32
 800288a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800288e:	2300      	movs	r3, #0
 8002890:	e000      	b.n	8002894 <HAL_UART_Receive+0x164>
  }
  else
  {
    return HAL_BUSY;
 8002892:	2302      	movs	r3, #2
  }
}
 8002894:	4618      	mov	r0, r3
 8002896:	3720      	adds	r7, #32
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b088      	sub	sp, #32
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80028a4:	2300      	movs	r3, #0
 80028a6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	431a      	orrs	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	431a      	orrs	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	69db      	ldr	r3, [r3, #28]
 80028bc:	4313      	orrs	r3, r2
 80028be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80028ca:	f023 030c 	bic.w	r3, r3, #12
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	6812      	ldr	r2, [r2, #0]
 80028d2:	6979      	ldr	r1, [r7, #20]
 80028d4:	430b      	orrs	r3, r1
 80028d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68da      	ldr	r2, [r3, #12]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	430a      	orrs	r2, r1
 80028ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a1b      	ldr	r3, [r3, #32]
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	697a      	ldr	r2, [r7, #20]
 800290e:	430a      	orrs	r2, r1
 8002910:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4aa7      	ldr	r2, [pc, #668]	; (8002bb4 <UART_SetConfig+0x318>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d120      	bne.n	800295e <UART_SetConfig+0xc2>
 800291c:	4ba6      	ldr	r3, [pc, #664]	; (8002bb8 <UART_SetConfig+0x31c>)
 800291e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002920:	f003 0303 	and.w	r3, r3, #3
 8002924:	2b03      	cmp	r3, #3
 8002926:	d817      	bhi.n	8002958 <UART_SetConfig+0xbc>
 8002928:	a201      	add	r2, pc, #4	; (adr r2, 8002930 <UART_SetConfig+0x94>)
 800292a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800292e:	bf00      	nop
 8002930:	08002941 	.word	0x08002941
 8002934:	0800294d 	.word	0x0800294d
 8002938:	08002953 	.word	0x08002953
 800293c:	08002947 	.word	0x08002947
 8002940:	2301      	movs	r3, #1
 8002942:	77fb      	strb	r3, [r7, #31]
 8002944:	e0b5      	b.n	8002ab2 <UART_SetConfig+0x216>
 8002946:	2302      	movs	r3, #2
 8002948:	77fb      	strb	r3, [r7, #31]
 800294a:	e0b2      	b.n	8002ab2 <UART_SetConfig+0x216>
 800294c:	2304      	movs	r3, #4
 800294e:	77fb      	strb	r3, [r7, #31]
 8002950:	e0af      	b.n	8002ab2 <UART_SetConfig+0x216>
 8002952:	2308      	movs	r3, #8
 8002954:	77fb      	strb	r3, [r7, #31]
 8002956:	e0ac      	b.n	8002ab2 <UART_SetConfig+0x216>
 8002958:	2310      	movs	r3, #16
 800295a:	77fb      	strb	r3, [r7, #31]
 800295c:	e0a9      	b.n	8002ab2 <UART_SetConfig+0x216>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a96      	ldr	r2, [pc, #600]	; (8002bbc <UART_SetConfig+0x320>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d124      	bne.n	80029b2 <UART_SetConfig+0x116>
 8002968:	4b93      	ldr	r3, [pc, #588]	; (8002bb8 <UART_SetConfig+0x31c>)
 800296a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002970:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002974:	d011      	beq.n	800299a <UART_SetConfig+0xfe>
 8002976:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800297a:	d817      	bhi.n	80029ac <UART_SetConfig+0x110>
 800297c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002980:	d011      	beq.n	80029a6 <UART_SetConfig+0x10a>
 8002982:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002986:	d811      	bhi.n	80029ac <UART_SetConfig+0x110>
 8002988:	2b00      	cmp	r3, #0
 800298a:	d003      	beq.n	8002994 <UART_SetConfig+0xf8>
 800298c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002990:	d006      	beq.n	80029a0 <UART_SetConfig+0x104>
 8002992:	e00b      	b.n	80029ac <UART_SetConfig+0x110>
 8002994:	2300      	movs	r3, #0
 8002996:	77fb      	strb	r3, [r7, #31]
 8002998:	e08b      	b.n	8002ab2 <UART_SetConfig+0x216>
 800299a:	2302      	movs	r3, #2
 800299c:	77fb      	strb	r3, [r7, #31]
 800299e:	e088      	b.n	8002ab2 <UART_SetConfig+0x216>
 80029a0:	2304      	movs	r3, #4
 80029a2:	77fb      	strb	r3, [r7, #31]
 80029a4:	e085      	b.n	8002ab2 <UART_SetConfig+0x216>
 80029a6:	2308      	movs	r3, #8
 80029a8:	77fb      	strb	r3, [r7, #31]
 80029aa:	e082      	b.n	8002ab2 <UART_SetConfig+0x216>
 80029ac:	2310      	movs	r3, #16
 80029ae:	77fb      	strb	r3, [r7, #31]
 80029b0:	e07f      	b.n	8002ab2 <UART_SetConfig+0x216>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a82      	ldr	r2, [pc, #520]	; (8002bc0 <UART_SetConfig+0x324>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d124      	bne.n	8002a06 <UART_SetConfig+0x16a>
 80029bc:	4b7e      	ldr	r3, [pc, #504]	; (8002bb8 <UART_SetConfig+0x31c>)
 80029be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80029c4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80029c8:	d011      	beq.n	80029ee <UART_SetConfig+0x152>
 80029ca:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80029ce:	d817      	bhi.n	8002a00 <UART_SetConfig+0x164>
 80029d0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80029d4:	d011      	beq.n	80029fa <UART_SetConfig+0x15e>
 80029d6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80029da:	d811      	bhi.n	8002a00 <UART_SetConfig+0x164>
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d003      	beq.n	80029e8 <UART_SetConfig+0x14c>
 80029e0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80029e4:	d006      	beq.n	80029f4 <UART_SetConfig+0x158>
 80029e6:	e00b      	b.n	8002a00 <UART_SetConfig+0x164>
 80029e8:	2300      	movs	r3, #0
 80029ea:	77fb      	strb	r3, [r7, #31]
 80029ec:	e061      	b.n	8002ab2 <UART_SetConfig+0x216>
 80029ee:	2302      	movs	r3, #2
 80029f0:	77fb      	strb	r3, [r7, #31]
 80029f2:	e05e      	b.n	8002ab2 <UART_SetConfig+0x216>
 80029f4:	2304      	movs	r3, #4
 80029f6:	77fb      	strb	r3, [r7, #31]
 80029f8:	e05b      	b.n	8002ab2 <UART_SetConfig+0x216>
 80029fa:	2308      	movs	r3, #8
 80029fc:	77fb      	strb	r3, [r7, #31]
 80029fe:	e058      	b.n	8002ab2 <UART_SetConfig+0x216>
 8002a00:	2310      	movs	r3, #16
 8002a02:	77fb      	strb	r3, [r7, #31]
 8002a04:	e055      	b.n	8002ab2 <UART_SetConfig+0x216>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a6e      	ldr	r2, [pc, #440]	; (8002bc4 <UART_SetConfig+0x328>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d124      	bne.n	8002a5a <UART_SetConfig+0x1be>
 8002a10:	4b69      	ldr	r3, [pc, #420]	; (8002bb8 <UART_SetConfig+0x31c>)
 8002a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a14:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002a18:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002a1c:	d011      	beq.n	8002a42 <UART_SetConfig+0x1a6>
 8002a1e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002a22:	d817      	bhi.n	8002a54 <UART_SetConfig+0x1b8>
 8002a24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a28:	d011      	beq.n	8002a4e <UART_SetConfig+0x1b2>
 8002a2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a2e:	d811      	bhi.n	8002a54 <UART_SetConfig+0x1b8>
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d003      	beq.n	8002a3c <UART_SetConfig+0x1a0>
 8002a34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a38:	d006      	beq.n	8002a48 <UART_SetConfig+0x1ac>
 8002a3a:	e00b      	b.n	8002a54 <UART_SetConfig+0x1b8>
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	77fb      	strb	r3, [r7, #31]
 8002a40:	e037      	b.n	8002ab2 <UART_SetConfig+0x216>
 8002a42:	2302      	movs	r3, #2
 8002a44:	77fb      	strb	r3, [r7, #31]
 8002a46:	e034      	b.n	8002ab2 <UART_SetConfig+0x216>
 8002a48:	2304      	movs	r3, #4
 8002a4a:	77fb      	strb	r3, [r7, #31]
 8002a4c:	e031      	b.n	8002ab2 <UART_SetConfig+0x216>
 8002a4e:	2308      	movs	r3, #8
 8002a50:	77fb      	strb	r3, [r7, #31]
 8002a52:	e02e      	b.n	8002ab2 <UART_SetConfig+0x216>
 8002a54:	2310      	movs	r3, #16
 8002a56:	77fb      	strb	r3, [r7, #31]
 8002a58:	e02b      	b.n	8002ab2 <UART_SetConfig+0x216>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a5a      	ldr	r2, [pc, #360]	; (8002bc8 <UART_SetConfig+0x32c>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d124      	bne.n	8002aae <UART_SetConfig+0x212>
 8002a64:	4b54      	ldr	r3, [pc, #336]	; (8002bb8 <UART_SetConfig+0x31c>)
 8002a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a68:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002a6c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002a70:	d011      	beq.n	8002a96 <UART_SetConfig+0x1fa>
 8002a72:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002a76:	d817      	bhi.n	8002aa8 <UART_SetConfig+0x20c>
 8002a78:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a7c:	d011      	beq.n	8002aa2 <UART_SetConfig+0x206>
 8002a7e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a82:	d811      	bhi.n	8002aa8 <UART_SetConfig+0x20c>
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d003      	beq.n	8002a90 <UART_SetConfig+0x1f4>
 8002a88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a8c:	d006      	beq.n	8002a9c <UART_SetConfig+0x200>
 8002a8e:	e00b      	b.n	8002aa8 <UART_SetConfig+0x20c>
 8002a90:	2300      	movs	r3, #0
 8002a92:	77fb      	strb	r3, [r7, #31]
 8002a94:	e00d      	b.n	8002ab2 <UART_SetConfig+0x216>
 8002a96:	2302      	movs	r3, #2
 8002a98:	77fb      	strb	r3, [r7, #31]
 8002a9a:	e00a      	b.n	8002ab2 <UART_SetConfig+0x216>
 8002a9c:	2304      	movs	r3, #4
 8002a9e:	77fb      	strb	r3, [r7, #31]
 8002aa0:	e007      	b.n	8002ab2 <UART_SetConfig+0x216>
 8002aa2:	2308      	movs	r3, #8
 8002aa4:	77fb      	strb	r3, [r7, #31]
 8002aa6:	e004      	b.n	8002ab2 <UART_SetConfig+0x216>
 8002aa8:	2310      	movs	r3, #16
 8002aaa:	77fb      	strb	r3, [r7, #31]
 8002aac:	e001      	b.n	8002ab2 <UART_SetConfig+0x216>
 8002aae:	2310      	movs	r3, #16
 8002ab0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	69db      	ldr	r3, [r3, #28]
 8002ab6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002aba:	d15b      	bne.n	8002b74 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8002abc:	7ffb      	ldrb	r3, [r7, #31]
 8002abe:	2b08      	cmp	r3, #8
 8002ac0:	d827      	bhi.n	8002b12 <UART_SetConfig+0x276>
 8002ac2:	a201      	add	r2, pc, #4	; (adr r2, 8002ac8 <UART_SetConfig+0x22c>)
 8002ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ac8:	08002aed 	.word	0x08002aed
 8002acc:	08002af5 	.word	0x08002af5
 8002ad0:	08002afd 	.word	0x08002afd
 8002ad4:	08002b13 	.word	0x08002b13
 8002ad8:	08002b03 	.word	0x08002b03
 8002adc:	08002b13 	.word	0x08002b13
 8002ae0:	08002b13 	.word	0x08002b13
 8002ae4:	08002b13 	.word	0x08002b13
 8002ae8:	08002b0b 	.word	0x08002b0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002aec:	f7ff fb54 	bl	8002198 <HAL_RCC_GetPCLK1Freq>
 8002af0:	61b8      	str	r0, [r7, #24]
        break;
 8002af2:	e013      	b.n	8002b1c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002af4:	f7ff fb72 	bl	80021dc <HAL_RCC_GetPCLK2Freq>
 8002af8:	61b8      	str	r0, [r7, #24]
        break;
 8002afa:	e00f      	b.n	8002b1c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002afc:	4b33      	ldr	r3, [pc, #204]	; (8002bcc <UART_SetConfig+0x330>)
 8002afe:	61bb      	str	r3, [r7, #24]
        break;
 8002b00:	e00c      	b.n	8002b1c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b02:	f7ff fae9 	bl	80020d8 <HAL_RCC_GetSysClockFreq>
 8002b06:	61b8      	str	r0, [r7, #24]
        break;
 8002b08:	e008      	b.n	8002b1c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b0e:	61bb      	str	r3, [r7, #24]
        break;
 8002b10:	e004      	b.n	8002b1c <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8002b12:	2300      	movs	r3, #0
 8002b14:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	77bb      	strb	r3, [r7, #30]
        break;
 8002b1a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f000 8082 	beq.w	8002c28 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	005a      	lsls	r2, r3, #1
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	085b      	lsrs	r3, r3, #1
 8002b2e:	441a      	add	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b38:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	2b0f      	cmp	r3, #15
 8002b3e:	d916      	bls.n	8002b6e <UART_SetConfig+0x2d2>
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b46:	d212      	bcs.n	8002b6e <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	f023 030f 	bic.w	r3, r3, #15
 8002b50:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	085b      	lsrs	r3, r3, #1
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	f003 0307 	and.w	r3, r3, #7
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	89fb      	ldrh	r3, [r7, #14]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	89fa      	ldrh	r2, [r7, #14]
 8002b6a:	60da      	str	r2, [r3, #12]
 8002b6c:	e05c      	b.n	8002c28 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	77bb      	strb	r3, [r7, #30]
 8002b72:	e059      	b.n	8002c28 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002b74:	7ffb      	ldrb	r3, [r7, #31]
 8002b76:	2b08      	cmp	r3, #8
 8002b78:	d835      	bhi.n	8002be6 <UART_SetConfig+0x34a>
 8002b7a:	a201      	add	r2, pc, #4	; (adr r2, 8002b80 <UART_SetConfig+0x2e4>)
 8002b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b80:	08002ba5 	.word	0x08002ba5
 8002b84:	08002bad 	.word	0x08002bad
 8002b88:	08002bd1 	.word	0x08002bd1
 8002b8c:	08002be7 	.word	0x08002be7
 8002b90:	08002bd7 	.word	0x08002bd7
 8002b94:	08002be7 	.word	0x08002be7
 8002b98:	08002be7 	.word	0x08002be7
 8002b9c:	08002be7 	.word	0x08002be7
 8002ba0:	08002bdf 	.word	0x08002bdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ba4:	f7ff faf8 	bl	8002198 <HAL_RCC_GetPCLK1Freq>
 8002ba8:	61b8      	str	r0, [r7, #24]
        break;
 8002baa:	e021      	b.n	8002bf0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002bac:	f7ff fb16 	bl	80021dc <HAL_RCC_GetPCLK2Freq>
 8002bb0:	61b8      	str	r0, [r7, #24]
        break;
 8002bb2:	e01d      	b.n	8002bf0 <UART_SetConfig+0x354>
 8002bb4:	40013800 	.word	0x40013800
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	40004400 	.word	0x40004400
 8002bc0:	40004800 	.word	0x40004800
 8002bc4:	40004c00 	.word	0x40004c00
 8002bc8:	40005000 	.word	0x40005000
 8002bcc:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002bd0:	4b1b      	ldr	r3, [pc, #108]	; (8002c40 <UART_SetConfig+0x3a4>)
 8002bd2:	61bb      	str	r3, [r7, #24]
        break;
 8002bd4:	e00c      	b.n	8002bf0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bd6:	f7ff fa7f 	bl	80020d8 <HAL_RCC_GetSysClockFreq>
 8002bda:	61b8      	str	r0, [r7, #24]
        break;
 8002bdc:	e008      	b.n	8002bf0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002be2:	61bb      	str	r3, [r7, #24]
        break;
 8002be4:	e004      	b.n	8002bf0 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8002be6:	2300      	movs	r3, #0
 8002be8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	77bb      	strb	r3, [r7, #30]
        break;
 8002bee:	bf00      	nop
    }

    if (pclk != 0U)
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d018      	beq.n	8002c28 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	085a      	lsrs	r2, r3, #1
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	441a      	add	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c08:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	2b0f      	cmp	r3, #15
 8002c0e:	d909      	bls.n	8002c24 <UART_SetConfig+0x388>
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c16:	d205      	bcs.n	8002c24 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	60da      	str	r2, [r3, #12]
 8002c22:	e001      	b.n	8002c28 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002c34:	7fbb      	ldrb	r3, [r7, #30]
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3720      	adds	r7, #32
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	007a1200 	.word	0x007a1200

08002c44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c50:	f003 0308 	and.w	r3, r3, #8
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d00a      	beq.n	8002c6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00a      	beq.n	8002c90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d00a      	beq.n	8002cb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb6:	f003 0304 	and.w	r3, r3, #4
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00a      	beq.n	8002cd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd8:	f003 0310 	and.w	r3, r3, #16
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00a      	beq.n	8002cf6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfa:	f003 0320 	and.w	r3, r3, #32
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00a      	beq.n	8002d18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	430a      	orrs	r2, r1
 8002d16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d01a      	beq.n	8002d5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	430a      	orrs	r2, r1
 8002d38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d42:	d10a      	bne.n	8002d5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00a      	beq.n	8002d7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	605a      	str	r2, [r3, #4]
  }
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b098      	sub	sp, #96	; 0x60
 8002d8c:	af02      	add	r7, sp, #8
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002d98:	f7fd fd3c 	bl	8000814 <HAL_GetTick>
 8002d9c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0308 	and.w	r3, r3, #8
 8002da8:	2b08      	cmp	r3, #8
 8002daa:	d12e      	bne.n	8002e0a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002dac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002db0:	9300      	str	r3, [sp, #0]
 8002db2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002db4:	2200      	movs	r2, #0
 8002db6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 f88c 	bl	8002ed8 <UART_WaitOnFlagUntilTimeout>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d021      	beq.n	8002e0a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dce:	e853 3f00 	ldrex	r3, [r3]
 8002dd2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dda:	653b      	str	r3, [r7, #80]	; 0x50
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	461a      	mov	r2, r3
 8002de2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002de4:	647b      	str	r3, [r7, #68]	; 0x44
 8002de6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002de8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002dea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002dec:	e841 2300 	strex	r3, r2, [r1]
 8002df0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1e6      	bne.n	8002dc6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e062      	b.n	8002ed0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0304 	and.w	r3, r3, #4
 8002e14:	2b04      	cmp	r3, #4
 8002e16:	d149      	bne.n	8002eac <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e1c:	9300      	str	r3, [sp, #0]
 8002e1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e20:	2200      	movs	r2, #0
 8002e22:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 f856 	bl	8002ed8 <UART_WaitOnFlagUntilTimeout>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d03c      	beq.n	8002eac <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3a:	e853 3f00 	ldrex	r3, [r3]
 8002e3e:	623b      	str	r3, [r7, #32]
   return(result);
 8002e40:	6a3b      	ldr	r3, [r7, #32]
 8002e42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e50:	633b      	str	r3, [r7, #48]	; 0x30
 8002e52:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e54:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e58:	e841 2300 	strex	r3, r2, [r1]
 8002e5c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1e6      	bne.n	8002e32 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	3308      	adds	r3, #8
 8002e6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	e853 3f00 	ldrex	r3, [r3]
 8002e72:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f023 0301 	bic.w	r3, r3, #1
 8002e7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	3308      	adds	r3, #8
 8002e82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e84:	61fa      	str	r2, [r7, #28]
 8002e86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e88:	69b9      	ldr	r1, [r7, #24]
 8002e8a:	69fa      	ldr	r2, [r7, #28]
 8002e8c:	e841 2300 	strex	r3, r2, [r1]
 8002e90:	617b      	str	r3, [r7, #20]
   return(result);
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1e5      	bne.n	8002e64 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2220      	movs	r2, #32
 8002e9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e011      	b.n	8002ed0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2220      	movs	r2, #32
 8002eb0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2220      	movs	r2, #32
 8002eb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3758      	adds	r7, #88	; 0x58
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	603b      	str	r3, [r7, #0]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ee8:	e04f      	b.n	8002f8a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef0:	d04b      	beq.n	8002f8a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ef2:	f7fd fc8f 	bl	8000814 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d302      	bcc.n	8002f08 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d101      	bne.n	8002f0c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e04e      	b.n	8002faa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0304 	and.w	r3, r3, #4
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d037      	beq.n	8002f8a <UART_WaitOnFlagUntilTimeout+0xb2>
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	2b80      	cmp	r3, #128	; 0x80
 8002f1e:	d034      	beq.n	8002f8a <UART_WaitOnFlagUntilTimeout+0xb2>
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	2b40      	cmp	r3, #64	; 0x40
 8002f24:	d031      	beq.n	8002f8a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	69db      	ldr	r3, [r3, #28]
 8002f2c:	f003 0308 	and.w	r3, r3, #8
 8002f30:	2b08      	cmp	r3, #8
 8002f32:	d110      	bne.n	8002f56 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2208      	movs	r2, #8
 8002f3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f3c:	68f8      	ldr	r0, [r7, #12]
 8002f3e:	f000 f838 	bl	8002fb2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2208      	movs	r2, #8
 8002f46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e029      	b.n	8002faa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	69db      	ldr	r3, [r3, #28]
 8002f5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f64:	d111      	bne.n	8002f8a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f70:	68f8      	ldr	r0, [r7, #12]
 8002f72:	f000 f81e 	bl	8002fb2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2220      	movs	r2, #32
 8002f7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e00f      	b.n	8002faa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	69da      	ldr	r2, [r3, #28]
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	4013      	ands	r3, r2
 8002f94:	68ba      	ldr	r2, [r7, #8]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	bf0c      	ite	eq
 8002f9a:	2301      	moveq	r3, #1
 8002f9c:	2300      	movne	r3, #0
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	79fb      	ldrb	r3, [r7, #7]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d0a0      	beq.n	8002eea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	b095      	sub	sp, #84	; 0x54
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fc2:	e853 3f00 	ldrex	r3, [r3]
 8002fc6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002fce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fd8:	643b      	str	r3, [r7, #64]	; 0x40
 8002fda:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fdc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002fde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002fe0:	e841 2300 	strex	r3, r2, [r1]
 8002fe4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1e6      	bne.n	8002fba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	3308      	adds	r3, #8
 8002ff2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ff4:	6a3b      	ldr	r3, [r7, #32]
 8002ff6:	e853 3f00 	ldrex	r3, [r3]
 8002ffa:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	f023 0301 	bic.w	r3, r3, #1
 8003002:	64bb      	str	r3, [r7, #72]	; 0x48
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	3308      	adds	r3, #8
 800300a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800300c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800300e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003010:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003012:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003014:	e841 2300 	strex	r3, r2, [r1]
 8003018:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800301a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301c:	2b00      	cmp	r3, #0
 800301e:	d1e5      	bne.n	8002fec <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003024:	2b01      	cmp	r3, #1
 8003026:	d118      	bne.n	800305a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	e853 3f00 	ldrex	r3, [r3]
 8003034:	60bb      	str	r3, [r7, #8]
   return(result);
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	f023 0310 	bic.w	r3, r3, #16
 800303c:	647b      	str	r3, [r7, #68]	; 0x44
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	461a      	mov	r2, r3
 8003044:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003046:	61bb      	str	r3, [r7, #24]
 8003048:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800304a:	6979      	ldr	r1, [r7, #20]
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	e841 2300 	strex	r3, r2, [r1]
 8003052:	613b      	str	r3, [r7, #16]
   return(result);
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1e6      	bne.n	8003028 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2220      	movs	r2, #32
 800305e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800306e:	bf00      	nop
 8003070:	3754      	adds	r7, #84	; 0x54
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
	...

0800307c <siprintf>:
 800307c:	b40e      	push	{r1, r2, r3}
 800307e:	b500      	push	{lr}
 8003080:	b09c      	sub	sp, #112	; 0x70
 8003082:	ab1d      	add	r3, sp, #116	; 0x74
 8003084:	9002      	str	r0, [sp, #8]
 8003086:	9006      	str	r0, [sp, #24]
 8003088:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800308c:	4809      	ldr	r0, [pc, #36]	; (80030b4 <siprintf+0x38>)
 800308e:	9107      	str	r1, [sp, #28]
 8003090:	9104      	str	r1, [sp, #16]
 8003092:	4909      	ldr	r1, [pc, #36]	; (80030b8 <siprintf+0x3c>)
 8003094:	f853 2b04 	ldr.w	r2, [r3], #4
 8003098:	9105      	str	r1, [sp, #20]
 800309a:	6800      	ldr	r0, [r0, #0]
 800309c:	9301      	str	r3, [sp, #4]
 800309e:	a902      	add	r1, sp, #8
 80030a0:	f000 f992 	bl	80033c8 <_svfiprintf_r>
 80030a4:	9b02      	ldr	r3, [sp, #8]
 80030a6:	2200      	movs	r2, #0
 80030a8:	701a      	strb	r2, [r3, #0]
 80030aa:	b01c      	add	sp, #112	; 0x70
 80030ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80030b0:	b003      	add	sp, #12
 80030b2:	4770      	bx	lr
 80030b4:	2000005c 	.word	0x2000005c
 80030b8:	ffff0208 	.word	0xffff0208

080030bc <memset>:
 80030bc:	4402      	add	r2, r0
 80030be:	4603      	mov	r3, r0
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d100      	bne.n	80030c6 <memset+0xa>
 80030c4:	4770      	bx	lr
 80030c6:	f803 1b01 	strb.w	r1, [r3], #1
 80030ca:	e7f9      	b.n	80030c0 <memset+0x4>

080030cc <__errno>:
 80030cc:	4b01      	ldr	r3, [pc, #4]	; (80030d4 <__errno+0x8>)
 80030ce:	6818      	ldr	r0, [r3, #0]
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	2000005c 	.word	0x2000005c

080030d8 <__libc_init_array>:
 80030d8:	b570      	push	{r4, r5, r6, lr}
 80030da:	4d0d      	ldr	r5, [pc, #52]	; (8003110 <__libc_init_array+0x38>)
 80030dc:	4c0d      	ldr	r4, [pc, #52]	; (8003114 <__libc_init_array+0x3c>)
 80030de:	1b64      	subs	r4, r4, r5
 80030e0:	10a4      	asrs	r4, r4, #2
 80030e2:	2600      	movs	r6, #0
 80030e4:	42a6      	cmp	r6, r4
 80030e6:	d109      	bne.n	80030fc <__libc_init_array+0x24>
 80030e8:	4d0b      	ldr	r5, [pc, #44]	; (8003118 <__libc_init_array+0x40>)
 80030ea:	4c0c      	ldr	r4, [pc, #48]	; (800311c <__libc_init_array+0x44>)
 80030ec:	f000 fc6a 	bl	80039c4 <_init>
 80030f0:	1b64      	subs	r4, r4, r5
 80030f2:	10a4      	asrs	r4, r4, #2
 80030f4:	2600      	movs	r6, #0
 80030f6:	42a6      	cmp	r6, r4
 80030f8:	d105      	bne.n	8003106 <__libc_init_array+0x2e>
 80030fa:	bd70      	pop	{r4, r5, r6, pc}
 80030fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003100:	4798      	blx	r3
 8003102:	3601      	adds	r6, #1
 8003104:	e7ee      	b.n	80030e4 <__libc_init_array+0xc>
 8003106:	f855 3b04 	ldr.w	r3, [r5], #4
 800310a:	4798      	blx	r3
 800310c:	3601      	adds	r6, #1
 800310e:	e7f2      	b.n	80030f6 <__libc_init_array+0x1e>
 8003110:	08003a5c 	.word	0x08003a5c
 8003114:	08003a5c 	.word	0x08003a5c
 8003118:	08003a5c 	.word	0x08003a5c
 800311c:	08003a60 	.word	0x08003a60

08003120 <__retarget_lock_acquire_recursive>:
 8003120:	4770      	bx	lr

08003122 <__retarget_lock_release_recursive>:
 8003122:	4770      	bx	lr

08003124 <_free_r>:
 8003124:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003126:	2900      	cmp	r1, #0
 8003128:	d044      	beq.n	80031b4 <_free_r+0x90>
 800312a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800312e:	9001      	str	r0, [sp, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	f1a1 0404 	sub.w	r4, r1, #4
 8003136:	bfb8      	it	lt
 8003138:	18e4      	addlt	r4, r4, r3
 800313a:	f000 f8df 	bl	80032fc <__malloc_lock>
 800313e:	4a1e      	ldr	r2, [pc, #120]	; (80031b8 <_free_r+0x94>)
 8003140:	9801      	ldr	r0, [sp, #4]
 8003142:	6813      	ldr	r3, [r2, #0]
 8003144:	b933      	cbnz	r3, 8003154 <_free_r+0x30>
 8003146:	6063      	str	r3, [r4, #4]
 8003148:	6014      	str	r4, [r2, #0]
 800314a:	b003      	add	sp, #12
 800314c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003150:	f000 b8da 	b.w	8003308 <__malloc_unlock>
 8003154:	42a3      	cmp	r3, r4
 8003156:	d908      	bls.n	800316a <_free_r+0x46>
 8003158:	6825      	ldr	r5, [r4, #0]
 800315a:	1961      	adds	r1, r4, r5
 800315c:	428b      	cmp	r3, r1
 800315e:	bf01      	itttt	eq
 8003160:	6819      	ldreq	r1, [r3, #0]
 8003162:	685b      	ldreq	r3, [r3, #4]
 8003164:	1949      	addeq	r1, r1, r5
 8003166:	6021      	streq	r1, [r4, #0]
 8003168:	e7ed      	b.n	8003146 <_free_r+0x22>
 800316a:	461a      	mov	r2, r3
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	b10b      	cbz	r3, 8003174 <_free_r+0x50>
 8003170:	42a3      	cmp	r3, r4
 8003172:	d9fa      	bls.n	800316a <_free_r+0x46>
 8003174:	6811      	ldr	r1, [r2, #0]
 8003176:	1855      	adds	r5, r2, r1
 8003178:	42a5      	cmp	r5, r4
 800317a:	d10b      	bne.n	8003194 <_free_r+0x70>
 800317c:	6824      	ldr	r4, [r4, #0]
 800317e:	4421      	add	r1, r4
 8003180:	1854      	adds	r4, r2, r1
 8003182:	42a3      	cmp	r3, r4
 8003184:	6011      	str	r1, [r2, #0]
 8003186:	d1e0      	bne.n	800314a <_free_r+0x26>
 8003188:	681c      	ldr	r4, [r3, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	6053      	str	r3, [r2, #4]
 800318e:	440c      	add	r4, r1
 8003190:	6014      	str	r4, [r2, #0]
 8003192:	e7da      	b.n	800314a <_free_r+0x26>
 8003194:	d902      	bls.n	800319c <_free_r+0x78>
 8003196:	230c      	movs	r3, #12
 8003198:	6003      	str	r3, [r0, #0]
 800319a:	e7d6      	b.n	800314a <_free_r+0x26>
 800319c:	6825      	ldr	r5, [r4, #0]
 800319e:	1961      	adds	r1, r4, r5
 80031a0:	428b      	cmp	r3, r1
 80031a2:	bf04      	itt	eq
 80031a4:	6819      	ldreq	r1, [r3, #0]
 80031a6:	685b      	ldreq	r3, [r3, #4]
 80031a8:	6063      	str	r3, [r4, #4]
 80031aa:	bf04      	itt	eq
 80031ac:	1949      	addeq	r1, r1, r5
 80031ae:	6021      	streq	r1, [r4, #0]
 80031b0:	6054      	str	r4, [r2, #4]
 80031b2:	e7ca      	b.n	800314a <_free_r+0x26>
 80031b4:	b003      	add	sp, #12
 80031b6:	bd30      	pop	{r4, r5, pc}
 80031b8:	20000260 	.word	0x20000260

080031bc <sbrk_aligned>:
 80031bc:	b570      	push	{r4, r5, r6, lr}
 80031be:	4e0e      	ldr	r6, [pc, #56]	; (80031f8 <sbrk_aligned+0x3c>)
 80031c0:	460c      	mov	r4, r1
 80031c2:	6831      	ldr	r1, [r6, #0]
 80031c4:	4605      	mov	r5, r0
 80031c6:	b911      	cbnz	r1, 80031ce <sbrk_aligned+0x12>
 80031c8:	f000 fba6 	bl	8003918 <_sbrk_r>
 80031cc:	6030      	str	r0, [r6, #0]
 80031ce:	4621      	mov	r1, r4
 80031d0:	4628      	mov	r0, r5
 80031d2:	f000 fba1 	bl	8003918 <_sbrk_r>
 80031d6:	1c43      	adds	r3, r0, #1
 80031d8:	d00a      	beq.n	80031f0 <sbrk_aligned+0x34>
 80031da:	1cc4      	adds	r4, r0, #3
 80031dc:	f024 0403 	bic.w	r4, r4, #3
 80031e0:	42a0      	cmp	r0, r4
 80031e2:	d007      	beq.n	80031f4 <sbrk_aligned+0x38>
 80031e4:	1a21      	subs	r1, r4, r0
 80031e6:	4628      	mov	r0, r5
 80031e8:	f000 fb96 	bl	8003918 <_sbrk_r>
 80031ec:	3001      	adds	r0, #1
 80031ee:	d101      	bne.n	80031f4 <sbrk_aligned+0x38>
 80031f0:	f04f 34ff 	mov.w	r4, #4294967295
 80031f4:	4620      	mov	r0, r4
 80031f6:	bd70      	pop	{r4, r5, r6, pc}
 80031f8:	20000264 	.word	0x20000264

080031fc <_malloc_r>:
 80031fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003200:	1ccd      	adds	r5, r1, #3
 8003202:	f025 0503 	bic.w	r5, r5, #3
 8003206:	3508      	adds	r5, #8
 8003208:	2d0c      	cmp	r5, #12
 800320a:	bf38      	it	cc
 800320c:	250c      	movcc	r5, #12
 800320e:	2d00      	cmp	r5, #0
 8003210:	4607      	mov	r7, r0
 8003212:	db01      	blt.n	8003218 <_malloc_r+0x1c>
 8003214:	42a9      	cmp	r1, r5
 8003216:	d905      	bls.n	8003224 <_malloc_r+0x28>
 8003218:	230c      	movs	r3, #12
 800321a:	603b      	str	r3, [r7, #0]
 800321c:	2600      	movs	r6, #0
 800321e:	4630      	mov	r0, r6
 8003220:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003224:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80032f8 <_malloc_r+0xfc>
 8003228:	f000 f868 	bl	80032fc <__malloc_lock>
 800322c:	f8d8 3000 	ldr.w	r3, [r8]
 8003230:	461c      	mov	r4, r3
 8003232:	bb5c      	cbnz	r4, 800328c <_malloc_r+0x90>
 8003234:	4629      	mov	r1, r5
 8003236:	4638      	mov	r0, r7
 8003238:	f7ff ffc0 	bl	80031bc <sbrk_aligned>
 800323c:	1c43      	adds	r3, r0, #1
 800323e:	4604      	mov	r4, r0
 8003240:	d155      	bne.n	80032ee <_malloc_r+0xf2>
 8003242:	f8d8 4000 	ldr.w	r4, [r8]
 8003246:	4626      	mov	r6, r4
 8003248:	2e00      	cmp	r6, #0
 800324a:	d145      	bne.n	80032d8 <_malloc_r+0xdc>
 800324c:	2c00      	cmp	r4, #0
 800324e:	d048      	beq.n	80032e2 <_malloc_r+0xe6>
 8003250:	6823      	ldr	r3, [r4, #0]
 8003252:	4631      	mov	r1, r6
 8003254:	4638      	mov	r0, r7
 8003256:	eb04 0903 	add.w	r9, r4, r3
 800325a:	f000 fb5d 	bl	8003918 <_sbrk_r>
 800325e:	4581      	cmp	r9, r0
 8003260:	d13f      	bne.n	80032e2 <_malloc_r+0xe6>
 8003262:	6821      	ldr	r1, [r4, #0]
 8003264:	1a6d      	subs	r5, r5, r1
 8003266:	4629      	mov	r1, r5
 8003268:	4638      	mov	r0, r7
 800326a:	f7ff ffa7 	bl	80031bc <sbrk_aligned>
 800326e:	3001      	adds	r0, #1
 8003270:	d037      	beq.n	80032e2 <_malloc_r+0xe6>
 8003272:	6823      	ldr	r3, [r4, #0]
 8003274:	442b      	add	r3, r5
 8003276:	6023      	str	r3, [r4, #0]
 8003278:	f8d8 3000 	ldr.w	r3, [r8]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d038      	beq.n	80032f2 <_malloc_r+0xf6>
 8003280:	685a      	ldr	r2, [r3, #4]
 8003282:	42a2      	cmp	r2, r4
 8003284:	d12b      	bne.n	80032de <_malloc_r+0xe2>
 8003286:	2200      	movs	r2, #0
 8003288:	605a      	str	r2, [r3, #4]
 800328a:	e00f      	b.n	80032ac <_malloc_r+0xb0>
 800328c:	6822      	ldr	r2, [r4, #0]
 800328e:	1b52      	subs	r2, r2, r5
 8003290:	d41f      	bmi.n	80032d2 <_malloc_r+0xd6>
 8003292:	2a0b      	cmp	r2, #11
 8003294:	d917      	bls.n	80032c6 <_malloc_r+0xca>
 8003296:	1961      	adds	r1, r4, r5
 8003298:	42a3      	cmp	r3, r4
 800329a:	6025      	str	r5, [r4, #0]
 800329c:	bf18      	it	ne
 800329e:	6059      	strne	r1, [r3, #4]
 80032a0:	6863      	ldr	r3, [r4, #4]
 80032a2:	bf08      	it	eq
 80032a4:	f8c8 1000 	streq.w	r1, [r8]
 80032a8:	5162      	str	r2, [r4, r5]
 80032aa:	604b      	str	r3, [r1, #4]
 80032ac:	4638      	mov	r0, r7
 80032ae:	f104 060b 	add.w	r6, r4, #11
 80032b2:	f000 f829 	bl	8003308 <__malloc_unlock>
 80032b6:	f026 0607 	bic.w	r6, r6, #7
 80032ba:	1d23      	adds	r3, r4, #4
 80032bc:	1af2      	subs	r2, r6, r3
 80032be:	d0ae      	beq.n	800321e <_malloc_r+0x22>
 80032c0:	1b9b      	subs	r3, r3, r6
 80032c2:	50a3      	str	r3, [r4, r2]
 80032c4:	e7ab      	b.n	800321e <_malloc_r+0x22>
 80032c6:	42a3      	cmp	r3, r4
 80032c8:	6862      	ldr	r2, [r4, #4]
 80032ca:	d1dd      	bne.n	8003288 <_malloc_r+0x8c>
 80032cc:	f8c8 2000 	str.w	r2, [r8]
 80032d0:	e7ec      	b.n	80032ac <_malloc_r+0xb0>
 80032d2:	4623      	mov	r3, r4
 80032d4:	6864      	ldr	r4, [r4, #4]
 80032d6:	e7ac      	b.n	8003232 <_malloc_r+0x36>
 80032d8:	4634      	mov	r4, r6
 80032da:	6876      	ldr	r6, [r6, #4]
 80032dc:	e7b4      	b.n	8003248 <_malloc_r+0x4c>
 80032de:	4613      	mov	r3, r2
 80032e0:	e7cc      	b.n	800327c <_malloc_r+0x80>
 80032e2:	230c      	movs	r3, #12
 80032e4:	603b      	str	r3, [r7, #0]
 80032e6:	4638      	mov	r0, r7
 80032e8:	f000 f80e 	bl	8003308 <__malloc_unlock>
 80032ec:	e797      	b.n	800321e <_malloc_r+0x22>
 80032ee:	6025      	str	r5, [r4, #0]
 80032f0:	e7dc      	b.n	80032ac <_malloc_r+0xb0>
 80032f2:	605b      	str	r3, [r3, #4]
 80032f4:	deff      	udf	#255	; 0xff
 80032f6:	bf00      	nop
 80032f8:	20000260 	.word	0x20000260

080032fc <__malloc_lock>:
 80032fc:	4801      	ldr	r0, [pc, #4]	; (8003304 <__malloc_lock+0x8>)
 80032fe:	f7ff bf0f 	b.w	8003120 <__retarget_lock_acquire_recursive>
 8003302:	bf00      	nop
 8003304:	2000025c 	.word	0x2000025c

08003308 <__malloc_unlock>:
 8003308:	4801      	ldr	r0, [pc, #4]	; (8003310 <__malloc_unlock+0x8>)
 800330a:	f7ff bf0a 	b.w	8003122 <__retarget_lock_release_recursive>
 800330e:	bf00      	nop
 8003310:	2000025c 	.word	0x2000025c

08003314 <__ssputs_r>:
 8003314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003318:	688e      	ldr	r6, [r1, #8]
 800331a:	461f      	mov	r7, r3
 800331c:	42be      	cmp	r6, r7
 800331e:	680b      	ldr	r3, [r1, #0]
 8003320:	4682      	mov	sl, r0
 8003322:	460c      	mov	r4, r1
 8003324:	4690      	mov	r8, r2
 8003326:	d82c      	bhi.n	8003382 <__ssputs_r+0x6e>
 8003328:	898a      	ldrh	r2, [r1, #12]
 800332a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800332e:	d026      	beq.n	800337e <__ssputs_r+0x6a>
 8003330:	6965      	ldr	r5, [r4, #20]
 8003332:	6909      	ldr	r1, [r1, #16]
 8003334:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003338:	eba3 0901 	sub.w	r9, r3, r1
 800333c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003340:	1c7b      	adds	r3, r7, #1
 8003342:	444b      	add	r3, r9
 8003344:	106d      	asrs	r5, r5, #1
 8003346:	429d      	cmp	r5, r3
 8003348:	bf38      	it	cc
 800334a:	461d      	movcc	r5, r3
 800334c:	0553      	lsls	r3, r2, #21
 800334e:	d527      	bpl.n	80033a0 <__ssputs_r+0x8c>
 8003350:	4629      	mov	r1, r5
 8003352:	f7ff ff53 	bl	80031fc <_malloc_r>
 8003356:	4606      	mov	r6, r0
 8003358:	b360      	cbz	r0, 80033b4 <__ssputs_r+0xa0>
 800335a:	6921      	ldr	r1, [r4, #16]
 800335c:	464a      	mov	r2, r9
 800335e:	f000 faeb 	bl	8003938 <memcpy>
 8003362:	89a3      	ldrh	r3, [r4, #12]
 8003364:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800336c:	81a3      	strh	r3, [r4, #12]
 800336e:	6126      	str	r6, [r4, #16]
 8003370:	6165      	str	r5, [r4, #20]
 8003372:	444e      	add	r6, r9
 8003374:	eba5 0509 	sub.w	r5, r5, r9
 8003378:	6026      	str	r6, [r4, #0]
 800337a:	60a5      	str	r5, [r4, #8]
 800337c:	463e      	mov	r6, r7
 800337e:	42be      	cmp	r6, r7
 8003380:	d900      	bls.n	8003384 <__ssputs_r+0x70>
 8003382:	463e      	mov	r6, r7
 8003384:	6820      	ldr	r0, [r4, #0]
 8003386:	4632      	mov	r2, r6
 8003388:	4641      	mov	r1, r8
 800338a:	f000 faab 	bl	80038e4 <memmove>
 800338e:	68a3      	ldr	r3, [r4, #8]
 8003390:	1b9b      	subs	r3, r3, r6
 8003392:	60a3      	str	r3, [r4, #8]
 8003394:	6823      	ldr	r3, [r4, #0]
 8003396:	4433      	add	r3, r6
 8003398:	6023      	str	r3, [r4, #0]
 800339a:	2000      	movs	r0, #0
 800339c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033a0:	462a      	mov	r2, r5
 80033a2:	f000 fad7 	bl	8003954 <_realloc_r>
 80033a6:	4606      	mov	r6, r0
 80033a8:	2800      	cmp	r0, #0
 80033aa:	d1e0      	bne.n	800336e <__ssputs_r+0x5a>
 80033ac:	6921      	ldr	r1, [r4, #16]
 80033ae:	4650      	mov	r0, sl
 80033b0:	f7ff feb8 	bl	8003124 <_free_r>
 80033b4:	230c      	movs	r3, #12
 80033b6:	f8ca 3000 	str.w	r3, [sl]
 80033ba:	89a3      	ldrh	r3, [r4, #12]
 80033bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033c0:	81a3      	strh	r3, [r4, #12]
 80033c2:	f04f 30ff 	mov.w	r0, #4294967295
 80033c6:	e7e9      	b.n	800339c <__ssputs_r+0x88>

080033c8 <_svfiprintf_r>:
 80033c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033cc:	4698      	mov	r8, r3
 80033ce:	898b      	ldrh	r3, [r1, #12]
 80033d0:	061b      	lsls	r3, r3, #24
 80033d2:	b09d      	sub	sp, #116	; 0x74
 80033d4:	4607      	mov	r7, r0
 80033d6:	460d      	mov	r5, r1
 80033d8:	4614      	mov	r4, r2
 80033da:	d50e      	bpl.n	80033fa <_svfiprintf_r+0x32>
 80033dc:	690b      	ldr	r3, [r1, #16]
 80033de:	b963      	cbnz	r3, 80033fa <_svfiprintf_r+0x32>
 80033e0:	2140      	movs	r1, #64	; 0x40
 80033e2:	f7ff ff0b 	bl	80031fc <_malloc_r>
 80033e6:	6028      	str	r0, [r5, #0]
 80033e8:	6128      	str	r0, [r5, #16]
 80033ea:	b920      	cbnz	r0, 80033f6 <_svfiprintf_r+0x2e>
 80033ec:	230c      	movs	r3, #12
 80033ee:	603b      	str	r3, [r7, #0]
 80033f0:	f04f 30ff 	mov.w	r0, #4294967295
 80033f4:	e0d0      	b.n	8003598 <_svfiprintf_r+0x1d0>
 80033f6:	2340      	movs	r3, #64	; 0x40
 80033f8:	616b      	str	r3, [r5, #20]
 80033fa:	2300      	movs	r3, #0
 80033fc:	9309      	str	r3, [sp, #36]	; 0x24
 80033fe:	2320      	movs	r3, #32
 8003400:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003404:	f8cd 800c 	str.w	r8, [sp, #12]
 8003408:	2330      	movs	r3, #48	; 0x30
 800340a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80035b0 <_svfiprintf_r+0x1e8>
 800340e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003412:	f04f 0901 	mov.w	r9, #1
 8003416:	4623      	mov	r3, r4
 8003418:	469a      	mov	sl, r3
 800341a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800341e:	b10a      	cbz	r2, 8003424 <_svfiprintf_r+0x5c>
 8003420:	2a25      	cmp	r2, #37	; 0x25
 8003422:	d1f9      	bne.n	8003418 <_svfiprintf_r+0x50>
 8003424:	ebba 0b04 	subs.w	fp, sl, r4
 8003428:	d00b      	beq.n	8003442 <_svfiprintf_r+0x7a>
 800342a:	465b      	mov	r3, fp
 800342c:	4622      	mov	r2, r4
 800342e:	4629      	mov	r1, r5
 8003430:	4638      	mov	r0, r7
 8003432:	f7ff ff6f 	bl	8003314 <__ssputs_r>
 8003436:	3001      	adds	r0, #1
 8003438:	f000 80a9 	beq.w	800358e <_svfiprintf_r+0x1c6>
 800343c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800343e:	445a      	add	r2, fp
 8003440:	9209      	str	r2, [sp, #36]	; 0x24
 8003442:	f89a 3000 	ldrb.w	r3, [sl]
 8003446:	2b00      	cmp	r3, #0
 8003448:	f000 80a1 	beq.w	800358e <_svfiprintf_r+0x1c6>
 800344c:	2300      	movs	r3, #0
 800344e:	f04f 32ff 	mov.w	r2, #4294967295
 8003452:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003456:	f10a 0a01 	add.w	sl, sl, #1
 800345a:	9304      	str	r3, [sp, #16]
 800345c:	9307      	str	r3, [sp, #28]
 800345e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003462:	931a      	str	r3, [sp, #104]	; 0x68
 8003464:	4654      	mov	r4, sl
 8003466:	2205      	movs	r2, #5
 8003468:	f814 1b01 	ldrb.w	r1, [r4], #1
 800346c:	4850      	ldr	r0, [pc, #320]	; (80035b0 <_svfiprintf_r+0x1e8>)
 800346e:	f7fc fec7 	bl	8000200 <memchr>
 8003472:	9a04      	ldr	r2, [sp, #16]
 8003474:	b9d8      	cbnz	r0, 80034ae <_svfiprintf_r+0xe6>
 8003476:	06d0      	lsls	r0, r2, #27
 8003478:	bf44      	itt	mi
 800347a:	2320      	movmi	r3, #32
 800347c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003480:	0711      	lsls	r1, r2, #28
 8003482:	bf44      	itt	mi
 8003484:	232b      	movmi	r3, #43	; 0x2b
 8003486:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800348a:	f89a 3000 	ldrb.w	r3, [sl]
 800348e:	2b2a      	cmp	r3, #42	; 0x2a
 8003490:	d015      	beq.n	80034be <_svfiprintf_r+0xf6>
 8003492:	9a07      	ldr	r2, [sp, #28]
 8003494:	4654      	mov	r4, sl
 8003496:	2000      	movs	r0, #0
 8003498:	f04f 0c0a 	mov.w	ip, #10
 800349c:	4621      	mov	r1, r4
 800349e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80034a2:	3b30      	subs	r3, #48	; 0x30
 80034a4:	2b09      	cmp	r3, #9
 80034a6:	d94d      	bls.n	8003544 <_svfiprintf_r+0x17c>
 80034a8:	b1b0      	cbz	r0, 80034d8 <_svfiprintf_r+0x110>
 80034aa:	9207      	str	r2, [sp, #28]
 80034ac:	e014      	b.n	80034d8 <_svfiprintf_r+0x110>
 80034ae:	eba0 0308 	sub.w	r3, r0, r8
 80034b2:	fa09 f303 	lsl.w	r3, r9, r3
 80034b6:	4313      	orrs	r3, r2
 80034b8:	9304      	str	r3, [sp, #16]
 80034ba:	46a2      	mov	sl, r4
 80034bc:	e7d2      	b.n	8003464 <_svfiprintf_r+0x9c>
 80034be:	9b03      	ldr	r3, [sp, #12]
 80034c0:	1d19      	adds	r1, r3, #4
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	9103      	str	r1, [sp, #12]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	bfbb      	ittet	lt
 80034ca:	425b      	neglt	r3, r3
 80034cc:	f042 0202 	orrlt.w	r2, r2, #2
 80034d0:	9307      	strge	r3, [sp, #28]
 80034d2:	9307      	strlt	r3, [sp, #28]
 80034d4:	bfb8      	it	lt
 80034d6:	9204      	strlt	r2, [sp, #16]
 80034d8:	7823      	ldrb	r3, [r4, #0]
 80034da:	2b2e      	cmp	r3, #46	; 0x2e
 80034dc:	d10c      	bne.n	80034f8 <_svfiprintf_r+0x130>
 80034de:	7863      	ldrb	r3, [r4, #1]
 80034e0:	2b2a      	cmp	r3, #42	; 0x2a
 80034e2:	d134      	bne.n	800354e <_svfiprintf_r+0x186>
 80034e4:	9b03      	ldr	r3, [sp, #12]
 80034e6:	1d1a      	adds	r2, r3, #4
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	9203      	str	r2, [sp, #12]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	bfb8      	it	lt
 80034f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80034f4:	3402      	adds	r4, #2
 80034f6:	9305      	str	r3, [sp, #20]
 80034f8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80035c0 <_svfiprintf_r+0x1f8>
 80034fc:	7821      	ldrb	r1, [r4, #0]
 80034fe:	2203      	movs	r2, #3
 8003500:	4650      	mov	r0, sl
 8003502:	f7fc fe7d 	bl	8000200 <memchr>
 8003506:	b138      	cbz	r0, 8003518 <_svfiprintf_r+0x150>
 8003508:	9b04      	ldr	r3, [sp, #16]
 800350a:	eba0 000a 	sub.w	r0, r0, sl
 800350e:	2240      	movs	r2, #64	; 0x40
 8003510:	4082      	lsls	r2, r0
 8003512:	4313      	orrs	r3, r2
 8003514:	3401      	adds	r4, #1
 8003516:	9304      	str	r3, [sp, #16]
 8003518:	f814 1b01 	ldrb.w	r1, [r4], #1
 800351c:	4825      	ldr	r0, [pc, #148]	; (80035b4 <_svfiprintf_r+0x1ec>)
 800351e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003522:	2206      	movs	r2, #6
 8003524:	f7fc fe6c 	bl	8000200 <memchr>
 8003528:	2800      	cmp	r0, #0
 800352a:	d038      	beq.n	800359e <_svfiprintf_r+0x1d6>
 800352c:	4b22      	ldr	r3, [pc, #136]	; (80035b8 <_svfiprintf_r+0x1f0>)
 800352e:	bb1b      	cbnz	r3, 8003578 <_svfiprintf_r+0x1b0>
 8003530:	9b03      	ldr	r3, [sp, #12]
 8003532:	3307      	adds	r3, #7
 8003534:	f023 0307 	bic.w	r3, r3, #7
 8003538:	3308      	adds	r3, #8
 800353a:	9303      	str	r3, [sp, #12]
 800353c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800353e:	4433      	add	r3, r6
 8003540:	9309      	str	r3, [sp, #36]	; 0x24
 8003542:	e768      	b.n	8003416 <_svfiprintf_r+0x4e>
 8003544:	fb0c 3202 	mla	r2, ip, r2, r3
 8003548:	460c      	mov	r4, r1
 800354a:	2001      	movs	r0, #1
 800354c:	e7a6      	b.n	800349c <_svfiprintf_r+0xd4>
 800354e:	2300      	movs	r3, #0
 8003550:	3401      	adds	r4, #1
 8003552:	9305      	str	r3, [sp, #20]
 8003554:	4619      	mov	r1, r3
 8003556:	f04f 0c0a 	mov.w	ip, #10
 800355a:	4620      	mov	r0, r4
 800355c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003560:	3a30      	subs	r2, #48	; 0x30
 8003562:	2a09      	cmp	r2, #9
 8003564:	d903      	bls.n	800356e <_svfiprintf_r+0x1a6>
 8003566:	2b00      	cmp	r3, #0
 8003568:	d0c6      	beq.n	80034f8 <_svfiprintf_r+0x130>
 800356a:	9105      	str	r1, [sp, #20]
 800356c:	e7c4      	b.n	80034f8 <_svfiprintf_r+0x130>
 800356e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003572:	4604      	mov	r4, r0
 8003574:	2301      	movs	r3, #1
 8003576:	e7f0      	b.n	800355a <_svfiprintf_r+0x192>
 8003578:	ab03      	add	r3, sp, #12
 800357a:	9300      	str	r3, [sp, #0]
 800357c:	462a      	mov	r2, r5
 800357e:	4b0f      	ldr	r3, [pc, #60]	; (80035bc <_svfiprintf_r+0x1f4>)
 8003580:	a904      	add	r1, sp, #16
 8003582:	4638      	mov	r0, r7
 8003584:	f3af 8000 	nop.w
 8003588:	1c42      	adds	r2, r0, #1
 800358a:	4606      	mov	r6, r0
 800358c:	d1d6      	bne.n	800353c <_svfiprintf_r+0x174>
 800358e:	89ab      	ldrh	r3, [r5, #12]
 8003590:	065b      	lsls	r3, r3, #25
 8003592:	f53f af2d 	bmi.w	80033f0 <_svfiprintf_r+0x28>
 8003596:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003598:	b01d      	add	sp, #116	; 0x74
 800359a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800359e:	ab03      	add	r3, sp, #12
 80035a0:	9300      	str	r3, [sp, #0]
 80035a2:	462a      	mov	r2, r5
 80035a4:	4b05      	ldr	r3, [pc, #20]	; (80035bc <_svfiprintf_r+0x1f4>)
 80035a6:	a904      	add	r1, sp, #16
 80035a8:	4638      	mov	r0, r7
 80035aa:	f000 f879 	bl	80036a0 <_printf_i>
 80035ae:	e7eb      	b.n	8003588 <_svfiprintf_r+0x1c0>
 80035b0:	08003a28 	.word	0x08003a28
 80035b4:	08003a32 	.word	0x08003a32
 80035b8:	00000000 	.word	0x00000000
 80035bc:	08003315 	.word	0x08003315
 80035c0:	08003a2e 	.word	0x08003a2e

080035c4 <_printf_common>:
 80035c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035c8:	4616      	mov	r6, r2
 80035ca:	4699      	mov	r9, r3
 80035cc:	688a      	ldr	r2, [r1, #8]
 80035ce:	690b      	ldr	r3, [r1, #16]
 80035d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80035d4:	4293      	cmp	r3, r2
 80035d6:	bfb8      	it	lt
 80035d8:	4613      	movlt	r3, r2
 80035da:	6033      	str	r3, [r6, #0]
 80035dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80035e0:	4607      	mov	r7, r0
 80035e2:	460c      	mov	r4, r1
 80035e4:	b10a      	cbz	r2, 80035ea <_printf_common+0x26>
 80035e6:	3301      	adds	r3, #1
 80035e8:	6033      	str	r3, [r6, #0]
 80035ea:	6823      	ldr	r3, [r4, #0]
 80035ec:	0699      	lsls	r1, r3, #26
 80035ee:	bf42      	ittt	mi
 80035f0:	6833      	ldrmi	r3, [r6, #0]
 80035f2:	3302      	addmi	r3, #2
 80035f4:	6033      	strmi	r3, [r6, #0]
 80035f6:	6825      	ldr	r5, [r4, #0]
 80035f8:	f015 0506 	ands.w	r5, r5, #6
 80035fc:	d106      	bne.n	800360c <_printf_common+0x48>
 80035fe:	f104 0a19 	add.w	sl, r4, #25
 8003602:	68e3      	ldr	r3, [r4, #12]
 8003604:	6832      	ldr	r2, [r6, #0]
 8003606:	1a9b      	subs	r3, r3, r2
 8003608:	42ab      	cmp	r3, r5
 800360a:	dc26      	bgt.n	800365a <_printf_common+0x96>
 800360c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003610:	1e13      	subs	r3, r2, #0
 8003612:	6822      	ldr	r2, [r4, #0]
 8003614:	bf18      	it	ne
 8003616:	2301      	movne	r3, #1
 8003618:	0692      	lsls	r2, r2, #26
 800361a:	d42b      	bmi.n	8003674 <_printf_common+0xb0>
 800361c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003620:	4649      	mov	r1, r9
 8003622:	4638      	mov	r0, r7
 8003624:	47c0      	blx	r8
 8003626:	3001      	adds	r0, #1
 8003628:	d01e      	beq.n	8003668 <_printf_common+0xa4>
 800362a:	6823      	ldr	r3, [r4, #0]
 800362c:	6922      	ldr	r2, [r4, #16]
 800362e:	f003 0306 	and.w	r3, r3, #6
 8003632:	2b04      	cmp	r3, #4
 8003634:	bf02      	ittt	eq
 8003636:	68e5      	ldreq	r5, [r4, #12]
 8003638:	6833      	ldreq	r3, [r6, #0]
 800363a:	1aed      	subeq	r5, r5, r3
 800363c:	68a3      	ldr	r3, [r4, #8]
 800363e:	bf0c      	ite	eq
 8003640:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003644:	2500      	movne	r5, #0
 8003646:	4293      	cmp	r3, r2
 8003648:	bfc4      	itt	gt
 800364a:	1a9b      	subgt	r3, r3, r2
 800364c:	18ed      	addgt	r5, r5, r3
 800364e:	2600      	movs	r6, #0
 8003650:	341a      	adds	r4, #26
 8003652:	42b5      	cmp	r5, r6
 8003654:	d11a      	bne.n	800368c <_printf_common+0xc8>
 8003656:	2000      	movs	r0, #0
 8003658:	e008      	b.n	800366c <_printf_common+0xa8>
 800365a:	2301      	movs	r3, #1
 800365c:	4652      	mov	r2, sl
 800365e:	4649      	mov	r1, r9
 8003660:	4638      	mov	r0, r7
 8003662:	47c0      	blx	r8
 8003664:	3001      	adds	r0, #1
 8003666:	d103      	bne.n	8003670 <_printf_common+0xac>
 8003668:	f04f 30ff 	mov.w	r0, #4294967295
 800366c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003670:	3501      	adds	r5, #1
 8003672:	e7c6      	b.n	8003602 <_printf_common+0x3e>
 8003674:	18e1      	adds	r1, r4, r3
 8003676:	1c5a      	adds	r2, r3, #1
 8003678:	2030      	movs	r0, #48	; 0x30
 800367a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800367e:	4422      	add	r2, r4
 8003680:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003684:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003688:	3302      	adds	r3, #2
 800368a:	e7c7      	b.n	800361c <_printf_common+0x58>
 800368c:	2301      	movs	r3, #1
 800368e:	4622      	mov	r2, r4
 8003690:	4649      	mov	r1, r9
 8003692:	4638      	mov	r0, r7
 8003694:	47c0      	blx	r8
 8003696:	3001      	adds	r0, #1
 8003698:	d0e6      	beq.n	8003668 <_printf_common+0xa4>
 800369a:	3601      	adds	r6, #1
 800369c:	e7d9      	b.n	8003652 <_printf_common+0x8e>
	...

080036a0 <_printf_i>:
 80036a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80036a4:	7e0f      	ldrb	r7, [r1, #24]
 80036a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80036a8:	2f78      	cmp	r7, #120	; 0x78
 80036aa:	4691      	mov	r9, r2
 80036ac:	4680      	mov	r8, r0
 80036ae:	460c      	mov	r4, r1
 80036b0:	469a      	mov	sl, r3
 80036b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80036b6:	d807      	bhi.n	80036c8 <_printf_i+0x28>
 80036b8:	2f62      	cmp	r7, #98	; 0x62
 80036ba:	d80a      	bhi.n	80036d2 <_printf_i+0x32>
 80036bc:	2f00      	cmp	r7, #0
 80036be:	f000 80d4 	beq.w	800386a <_printf_i+0x1ca>
 80036c2:	2f58      	cmp	r7, #88	; 0x58
 80036c4:	f000 80c0 	beq.w	8003848 <_printf_i+0x1a8>
 80036c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80036d0:	e03a      	b.n	8003748 <_printf_i+0xa8>
 80036d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80036d6:	2b15      	cmp	r3, #21
 80036d8:	d8f6      	bhi.n	80036c8 <_printf_i+0x28>
 80036da:	a101      	add	r1, pc, #4	; (adr r1, 80036e0 <_printf_i+0x40>)
 80036dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80036e0:	08003739 	.word	0x08003739
 80036e4:	0800374d 	.word	0x0800374d
 80036e8:	080036c9 	.word	0x080036c9
 80036ec:	080036c9 	.word	0x080036c9
 80036f0:	080036c9 	.word	0x080036c9
 80036f4:	080036c9 	.word	0x080036c9
 80036f8:	0800374d 	.word	0x0800374d
 80036fc:	080036c9 	.word	0x080036c9
 8003700:	080036c9 	.word	0x080036c9
 8003704:	080036c9 	.word	0x080036c9
 8003708:	080036c9 	.word	0x080036c9
 800370c:	08003851 	.word	0x08003851
 8003710:	08003779 	.word	0x08003779
 8003714:	0800380b 	.word	0x0800380b
 8003718:	080036c9 	.word	0x080036c9
 800371c:	080036c9 	.word	0x080036c9
 8003720:	08003873 	.word	0x08003873
 8003724:	080036c9 	.word	0x080036c9
 8003728:	08003779 	.word	0x08003779
 800372c:	080036c9 	.word	0x080036c9
 8003730:	080036c9 	.word	0x080036c9
 8003734:	08003813 	.word	0x08003813
 8003738:	682b      	ldr	r3, [r5, #0]
 800373a:	1d1a      	adds	r2, r3, #4
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	602a      	str	r2, [r5, #0]
 8003740:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003744:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003748:	2301      	movs	r3, #1
 800374a:	e09f      	b.n	800388c <_printf_i+0x1ec>
 800374c:	6820      	ldr	r0, [r4, #0]
 800374e:	682b      	ldr	r3, [r5, #0]
 8003750:	0607      	lsls	r7, r0, #24
 8003752:	f103 0104 	add.w	r1, r3, #4
 8003756:	6029      	str	r1, [r5, #0]
 8003758:	d501      	bpl.n	800375e <_printf_i+0xbe>
 800375a:	681e      	ldr	r6, [r3, #0]
 800375c:	e003      	b.n	8003766 <_printf_i+0xc6>
 800375e:	0646      	lsls	r6, r0, #25
 8003760:	d5fb      	bpl.n	800375a <_printf_i+0xba>
 8003762:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003766:	2e00      	cmp	r6, #0
 8003768:	da03      	bge.n	8003772 <_printf_i+0xd2>
 800376a:	232d      	movs	r3, #45	; 0x2d
 800376c:	4276      	negs	r6, r6
 800376e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003772:	485a      	ldr	r0, [pc, #360]	; (80038dc <_printf_i+0x23c>)
 8003774:	230a      	movs	r3, #10
 8003776:	e012      	b.n	800379e <_printf_i+0xfe>
 8003778:	682b      	ldr	r3, [r5, #0]
 800377a:	6820      	ldr	r0, [r4, #0]
 800377c:	1d19      	adds	r1, r3, #4
 800377e:	6029      	str	r1, [r5, #0]
 8003780:	0605      	lsls	r5, r0, #24
 8003782:	d501      	bpl.n	8003788 <_printf_i+0xe8>
 8003784:	681e      	ldr	r6, [r3, #0]
 8003786:	e002      	b.n	800378e <_printf_i+0xee>
 8003788:	0641      	lsls	r1, r0, #25
 800378a:	d5fb      	bpl.n	8003784 <_printf_i+0xe4>
 800378c:	881e      	ldrh	r6, [r3, #0]
 800378e:	4853      	ldr	r0, [pc, #332]	; (80038dc <_printf_i+0x23c>)
 8003790:	2f6f      	cmp	r7, #111	; 0x6f
 8003792:	bf0c      	ite	eq
 8003794:	2308      	moveq	r3, #8
 8003796:	230a      	movne	r3, #10
 8003798:	2100      	movs	r1, #0
 800379a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800379e:	6865      	ldr	r5, [r4, #4]
 80037a0:	60a5      	str	r5, [r4, #8]
 80037a2:	2d00      	cmp	r5, #0
 80037a4:	bfa2      	ittt	ge
 80037a6:	6821      	ldrge	r1, [r4, #0]
 80037a8:	f021 0104 	bicge.w	r1, r1, #4
 80037ac:	6021      	strge	r1, [r4, #0]
 80037ae:	b90e      	cbnz	r6, 80037b4 <_printf_i+0x114>
 80037b0:	2d00      	cmp	r5, #0
 80037b2:	d04b      	beq.n	800384c <_printf_i+0x1ac>
 80037b4:	4615      	mov	r5, r2
 80037b6:	fbb6 f1f3 	udiv	r1, r6, r3
 80037ba:	fb03 6711 	mls	r7, r3, r1, r6
 80037be:	5dc7      	ldrb	r7, [r0, r7]
 80037c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80037c4:	4637      	mov	r7, r6
 80037c6:	42bb      	cmp	r3, r7
 80037c8:	460e      	mov	r6, r1
 80037ca:	d9f4      	bls.n	80037b6 <_printf_i+0x116>
 80037cc:	2b08      	cmp	r3, #8
 80037ce:	d10b      	bne.n	80037e8 <_printf_i+0x148>
 80037d0:	6823      	ldr	r3, [r4, #0]
 80037d2:	07de      	lsls	r6, r3, #31
 80037d4:	d508      	bpl.n	80037e8 <_printf_i+0x148>
 80037d6:	6923      	ldr	r3, [r4, #16]
 80037d8:	6861      	ldr	r1, [r4, #4]
 80037da:	4299      	cmp	r1, r3
 80037dc:	bfde      	ittt	le
 80037de:	2330      	movle	r3, #48	; 0x30
 80037e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80037e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80037e8:	1b52      	subs	r2, r2, r5
 80037ea:	6122      	str	r2, [r4, #16]
 80037ec:	f8cd a000 	str.w	sl, [sp]
 80037f0:	464b      	mov	r3, r9
 80037f2:	aa03      	add	r2, sp, #12
 80037f4:	4621      	mov	r1, r4
 80037f6:	4640      	mov	r0, r8
 80037f8:	f7ff fee4 	bl	80035c4 <_printf_common>
 80037fc:	3001      	adds	r0, #1
 80037fe:	d14a      	bne.n	8003896 <_printf_i+0x1f6>
 8003800:	f04f 30ff 	mov.w	r0, #4294967295
 8003804:	b004      	add	sp, #16
 8003806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800380a:	6823      	ldr	r3, [r4, #0]
 800380c:	f043 0320 	orr.w	r3, r3, #32
 8003810:	6023      	str	r3, [r4, #0]
 8003812:	4833      	ldr	r0, [pc, #204]	; (80038e0 <_printf_i+0x240>)
 8003814:	2778      	movs	r7, #120	; 0x78
 8003816:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800381a:	6823      	ldr	r3, [r4, #0]
 800381c:	6829      	ldr	r1, [r5, #0]
 800381e:	061f      	lsls	r7, r3, #24
 8003820:	f851 6b04 	ldr.w	r6, [r1], #4
 8003824:	d402      	bmi.n	800382c <_printf_i+0x18c>
 8003826:	065f      	lsls	r7, r3, #25
 8003828:	bf48      	it	mi
 800382a:	b2b6      	uxthmi	r6, r6
 800382c:	07df      	lsls	r7, r3, #31
 800382e:	bf48      	it	mi
 8003830:	f043 0320 	orrmi.w	r3, r3, #32
 8003834:	6029      	str	r1, [r5, #0]
 8003836:	bf48      	it	mi
 8003838:	6023      	strmi	r3, [r4, #0]
 800383a:	b91e      	cbnz	r6, 8003844 <_printf_i+0x1a4>
 800383c:	6823      	ldr	r3, [r4, #0]
 800383e:	f023 0320 	bic.w	r3, r3, #32
 8003842:	6023      	str	r3, [r4, #0]
 8003844:	2310      	movs	r3, #16
 8003846:	e7a7      	b.n	8003798 <_printf_i+0xf8>
 8003848:	4824      	ldr	r0, [pc, #144]	; (80038dc <_printf_i+0x23c>)
 800384a:	e7e4      	b.n	8003816 <_printf_i+0x176>
 800384c:	4615      	mov	r5, r2
 800384e:	e7bd      	b.n	80037cc <_printf_i+0x12c>
 8003850:	682b      	ldr	r3, [r5, #0]
 8003852:	6826      	ldr	r6, [r4, #0]
 8003854:	6961      	ldr	r1, [r4, #20]
 8003856:	1d18      	adds	r0, r3, #4
 8003858:	6028      	str	r0, [r5, #0]
 800385a:	0635      	lsls	r5, r6, #24
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	d501      	bpl.n	8003864 <_printf_i+0x1c4>
 8003860:	6019      	str	r1, [r3, #0]
 8003862:	e002      	b.n	800386a <_printf_i+0x1ca>
 8003864:	0670      	lsls	r0, r6, #25
 8003866:	d5fb      	bpl.n	8003860 <_printf_i+0x1c0>
 8003868:	8019      	strh	r1, [r3, #0]
 800386a:	2300      	movs	r3, #0
 800386c:	6123      	str	r3, [r4, #16]
 800386e:	4615      	mov	r5, r2
 8003870:	e7bc      	b.n	80037ec <_printf_i+0x14c>
 8003872:	682b      	ldr	r3, [r5, #0]
 8003874:	1d1a      	adds	r2, r3, #4
 8003876:	602a      	str	r2, [r5, #0]
 8003878:	681d      	ldr	r5, [r3, #0]
 800387a:	6862      	ldr	r2, [r4, #4]
 800387c:	2100      	movs	r1, #0
 800387e:	4628      	mov	r0, r5
 8003880:	f7fc fcbe 	bl	8000200 <memchr>
 8003884:	b108      	cbz	r0, 800388a <_printf_i+0x1ea>
 8003886:	1b40      	subs	r0, r0, r5
 8003888:	6060      	str	r0, [r4, #4]
 800388a:	6863      	ldr	r3, [r4, #4]
 800388c:	6123      	str	r3, [r4, #16]
 800388e:	2300      	movs	r3, #0
 8003890:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003894:	e7aa      	b.n	80037ec <_printf_i+0x14c>
 8003896:	6923      	ldr	r3, [r4, #16]
 8003898:	462a      	mov	r2, r5
 800389a:	4649      	mov	r1, r9
 800389c:	4640      	mov	r0, r8
 800389e:	47d0      	blx	sl
 80038a0:	3001      	adds	r0, #1
 80038a2:	d0ad      	beq.n	8003800 <_printf_i+0x160>
 80038a4:	6823      	ldr	r3, [r4, #0]
 80038a6:	079b      	lsls	r3, r3, #30
 80038a8:	d413      	bmi.n	80038d2 <_printf_i+0x232>
 80038aa:	68e0      	ldr	r0, [r4, #12]
 80038ac:	9b03      	ldr	r3, [sp, #12]
 80038ae:	4298      	cmp	r0, r3
 80038b0:	bfb8      	it	lt
 80038b2:	4618      	movlt	r0, r3
 80038b4:	e7a6      	b.n	8003804 <_printf_i+0x164>
 80038b6:	2301      	movs	r3, #1
 80038b8:	4632      	mov	r2, r6
 80038ba:	4649      	mov	r1, r9
 80038bc:	4640      	mov	r0, r8
 80038be:	47d0      	blx	sl
 80038c0:	3001      	adds	r0, #1
 80038c2:	d09d      	beq.n	8003800 <_printf_i+0x160>
 80038c4:	3501      	adds	r5, #1
 80038c6:	68e3      	ldr	r3, [r4, #12]
 80038c8:	9903      	ldr	r1, [sp, #12]
 80038ca:	1a5b      	subs	r3, r3, r1
 80038cc:	42ab      	cmp	r3, r5
 80038ce:	dcf2      	bgt.n	80038b6 <_printf_i+0x216>
 80038d0:	e7eb      	b.n	80038aa <_printf_i+0x20a>
 80038d2:	2500      	movs	r5, #0
 80038d4:	f104 0619 	add.w	r6, r4, #25
 80038d8:	e7f5      	b.n	80038c6 <_printf_i+0x226>
 80038da:	bf00      	nop
 80038dc:	08003a39 	.word	0x08003a39
 80038e0:	08003a4a 	.word	0x08003a4a

080038e4 <memmove>:
 80038e4:	4288      	cmp	r0, r1
 80038e6:	b510      	push	{r4, lr}
 80038e8:	eb01 0402 	add.w	r4, r1, r2
 80038ec:	d902      	bls.n	80038f4 <memmove+0x10>
 80038ee:	4284      	cmp	r4, r0
 80038f0:	4623      	mov	r3, r4
 80038f2:	d807      	bhi.n	8003904 <memmove+0x20>
 80038f4:	1e43      	subs	r3, r0, #1
 80038f6:	42a1      	cmp	r1, r4
 80038f8:	d008      	beq.n	800390c <memmove+0x28>
 80038fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80038fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003902:	e7f8      	b.n	80038f6 <memmove+0x12>
 8003904:	4402      	add	r2, r0
 8003906:	4601      	mov	r1, r0
 8003908:	428a      	cmp	r2, r1
 800390a:	d100      	bne.n	800390e <memmove+0x2a>
 800390c:	bd10      	pop	{r4, pc}
 800390e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003912:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003916:	e7f7      	b.n	8003908 <memmove+0x24>

08003918 <_sbrk_r>:
 8003918:	b538      	push	{r3, r4, r5, lr}
 800391a:	4d06      	ldr	r5, [pc, #24]	; (8003934 <_sbrk_r+0x1c>)
 800391c:	2300      	movs	r3, #0
 800391e:	4604      	mov	r4, r0
 8003920:	4608      	mov	r0, r1
 8003922:	602b      	str	r3, [r5, #0]
 8003924:	f7fc feaa 	bl	800067c <_sbrk>
 8003928:	1c43      	adds	r3, r0, #1
 800392a:	d102      	bne.n	8003932 <_sbrk_r+0x1a>
 800392c:	682b      	ldr	r3, [r5, #0]
 800392e:	b103      	cbz	r3, 8003932 <_sbrk_r+0x1a>
 8003930:	6023      	str	r3, [r4, #0]
 8003932:	bd38      	pop	{r3, r4, r5, pc}
 8003934:	20000258 	.word	0x20000258

08003938 <memcpy>:
 8003938:	440a      	add	r2, r1
 800393a:	4291      	cmp	r1, r2
 800393c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003940:	d100      	bne.n	8003944 <memcpy+0xc>
 8003942:	4770      	bx	lr
 8003944:	b510      	push	{r4, lr}
 8003946:	f811 4b01 	ldrb.w	r4, [r1], #1
 800394a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800394e:	4291      	cmp	r1, r2
 8003950:	d1f9      	bne.n	8003946 <memcpy+0xe>
 8003952:	bd10      	pop	{r4, pc}

08003954 <_realloc_r>:
 8003954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003958:	4680      	mov	r8, r0
 800395a:	4614      	mov	r4, r2
 800395c:	460e      	mov	r6, r1
 800395e:	b921      	cbnz	r1, 800396a <_realloc_r+0x16>
 8003960:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003964:	4611      	mov	r1, r2
 8003966:	f7ff bc49 	b.w	80031fc <_malloc_r>
 800396a:	b92a      	cbnz	r2, 8003978 <_realloc_r+0x24>
 800396c:	f7ff fbda 	bl	8003124 <_free_r>
 8003970:	4625      	mov	r5, r4
 8003972:	4628      	mov	r0, r5
 8003974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003978:	f000 f81b 	bl	80039b2 <_malloc_usable_size_r>
 800397c:	4284      	cmp	r4, r0
 800397e:	4607      	mov	r7, r0
 8003980:	d802      	bhi.n	8003988 <_realloc_r+0x34>
 8003982:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003986:	d812      	bhi.n	80039ae <_realloc_r+0x5a>
 8003988:	4621      	mov	r1, r4
 800398a:	4640      	mov	r0, r8
 800398c:	f7ff fc36 	bl	80031fc <_malloc_r>
 8003990:	4605      	mov	r5, r0
 8003992:	2800      	cmp	r0, #0
 8003994:	d0ed      	beq.n	8003972 <_realloc_r+0x1e>
 8003996:	42bc      	cmp	r4, r7
 8003998:	4622      	mov	r2, r4
 800399a:	4631      	mov	r1, r6
 800399c:	bf28      	it	cs
 800399e:	463a      	movcs	r2, r7
 80039a0:	f7ff ffca 	bl	8003938 <memcpy>
 80039a4:	4631      	mov	r1, r6
 80039a6:	4640      	mov	r0, r8
 80039a8:	f7ff fbbc 	bl	8003124 <_free_r>
 80039ac:	e7e1      	b.n	8003972 <_realloc_r+0x1e>
 80039ae:	4635      	mov	r5, r6
 80039b0:	e7df      	b.n	8003972 <_realloc_r+0x1e>

080039b2 <_malloc_usable_size_r>:
 80039b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039b6:	1f18      	subs	r0, r3, #4
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	bfbc      	itt	lt
 80039bc:	580b      	ldrlt	r3, [r1, r0]
 80039be:	18c0      	addlt	r0, r0, r3
 80039c0:	4770      	bx	lr
	...

080039c4 <_init>:
 80039c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039c6:	bf00      	nop
 80039c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ca:	bc08      	pop	{r3}
 80039cc:	469e      	mov	lr, r3
 80039ce:	4770      	bx	lr

080039d0 <_fini>:
 80039d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039d2:	bf00      	nop
 80039d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039d6:	bc08      	pop	{r3}
 80039d8:	469e      	mov	lr, r3
 80039da:	4770      	bx	lr
